<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical documentation on Peertube plugin livechat</title><link>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/</link><description>Recent content in Technical documentation on Peertube plugin livechat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/index.xml" rel="self" type="application/rss+xml"/><item><title>MUC Slow mode</title><link>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/slow_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/slow_mode/</guid><description>The livechat plugin includes a &amp;ldquo;slow mode&amp;rdquo; feature, to rate limit the number of messages that a user can send to a given MUC room. At time of writing, there were no XEP to describe such feature. Please find below a XEP draft, that will be submitted for review.
Work In Progress, this page is not done yet. For an updated version of this document, you can check the draft XEP XMP file.</description></item><item><title>Polls</title><link>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/polls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/polls/</guid><description>The poll system relies on two thinks:
mod_muc_polls Prosody module on the backend polls Converse plugin on the frontend Backend mod_muc_polls is a Prosody modules that implements polls in MUC. This module could be used on any Prosody server, and has no code specific to the livechat plugin.
The way this module works could be standardized one day, by writing a XEP.
Poll creation This module adds the http://jabber.</description></item><item><title>Terms&amp;Conditions</title><link>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/terms/</guid><description>You can set terms &amp;amp; conditions on the instance level (called &amp;ldquo;global terms&amp;rdquo;), or at the streamers' channels level (called &amp;ldquo;muc terms&amp;rdquo;, as it is related to muc rooms).
Backend The mod_muc_peertubelivechat_terms prosody modules handles the terms configuration.
It has a configuration option for the global terms. It also adds muc terms in the room data.
When a new occupant session is opened, this modules sends him messages containing the global and muc terms (if set).</description></item><item><title>Tasks overview</title><link>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://johnxlivingston.github.io/peertube-plugin-livechat/nb/technical/tasks/</guid><description>The livechat plugin includes a Task Application. The present document describes how this is implemented.
Basics This features relies on XEP-0060: Publish-Subscribe. This XEP provide a way to store and retrieve items, and to receive push notifications when an item is created/deleted/modified.
There is a Prosody Module, mod_pubsub_peertubelivechat, to implement some specific use of the pubsub mechanism.
We use the JID+NodeID addressing to specify some nodes related to each MUC room.</description></item></channel></rss>