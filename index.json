[{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/intro/","title":"Introduction","tags":[],"description":"Introduction","content":"This Peertube plugin is meant to provide chat system for Peertube videos.\n              See a demo.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contributing/codeofconduct/","title":"Code of Conduct","tags":[],"description":"Contributor Covenant Code of Conduct","content":"Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\n Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community  Examples of unacceptable behavior include:\n The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by mail at git.[at].john-livingston.fr. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla\u0026rsquo;s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/","title":"Documentation","tags":[],"description":"Plugin documentation","content":"  Installation guide  Plugin peertube-plugin-livechat installation guide\n  Known issues: CPU Compatibility  For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.\n   Upgrade from version older than 6.0.0  Important notes when upgrading for an older version.\n    Admin documentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n   Advanced usage  Some advanced features\n  XMPP clients  Allow connections using XMPP clients\n Using Matterbridge  Using Matterbridge to bridge with other chats\n   User documentation  Plugin peertube-plugin-livechat user documentation\n  Moderation  Plugin peertube-plugin-livechat moderation\n   OBS  Documentation to stream the chat content using OBS.\n   XMPP Clients  Connect to chat using a XMPP client\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/installation/","title":"Installation guide","tags":[],"description":"Plugin peertube-plugin-livechat installation guide","content":" Before updating to a major release, please read the release notes and breaking changes list : CHANGELOG.\n To install or update the plugin, just use the Peertube web admin interface.\n Here are some other more specific instructions:\n Known issues: CPU Compatibility  For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.\n   Upgrade from version older than 6.0.0  Important notes when upgrading for an older version.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/installation/cpu_compatibility/","title":"Known issues: CPU Compatibility","tags":[],"description":"For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.","content":"The Prosody AppImage included in the plugin will only work on x86_64 and arm64 CPU. It is not compatible with other CPU architectures.\nTo use the plugin, you will have to manually install Prosody on your server (see below).\nNote: the plugin requires Prosody \u0026gt;= 0.12.0. If you are using an older version, Chat Federation could be broken, and it could have some unexpected behaviour.\nOnce it is done, you have to check Use system Prosody in the plugin settings.\nOn non-docker Peertube installation For standard installation, you just have to install the official prosody package for your linux distribution.\nFor example, on Debian/Ubuntu:\nsudo apt install prosody You can then disable the service that starts automatically when you install Prosody (the plugin will launch a Prosody process, there is no need for the service to run). For example, on Debian/Ubuntu (and other Systemd based linux distributions):\nsudo systemctl disable prosody \u0026amp;\u0026amp; sudo systemctl stop prosody Warning: do not disable Prosody if it is used for another service on your server, like for example Jitsi.\nDocker You will have to generate a Peertube image that includes Prosody in the same container that Peertube. I know this is not the standard way to do this with Docker, but keep in mind it is a temporary workaround.\nTo generate and use such an image, please refer to the Docker documentation. The Docker file to generate the image should be:\nFROMchocobozzz/peertube:production-bullseyeRUN apt -y update \u0026amp;\u0026amp; apt install -y prosody \u0026amp;\u0026amp; apt -y cleanYunohost You have to disable metronome (the XMPP server provided by Yunohost), and install prosody.\nThis is already done by the Yunohost Peertube application, as it was required for the plugin before the v6.0.0. But it may be removed in a near feature (to avoid drawbacks of this method). I have to discuss with Yunohost team, to decide how we can do to minimize drawbacks, and maximize compatibility.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/user/moderation/","title":"Moderation","tags":[],"description":"Plugin peertube-plugin-livechat moderation","content":"You can access room settings and moderation tools by opening the chat in a new window, and using the dropdown menu at the top right.\nYou can list all existing chatrooms: in the plugin settings screen, there is a button Â«List roomsÂ».\nYou can delete old rooms: join the room, and use the menu on the top to destroy the room.\nNotes All instance moderators and admins will be owner of created chat rooms. If the video is local (not from a remote Peertube), the video owner will be admin in the chat room.\nYou can use ConverseJS moderation commands to moderate the room. When you open the chat room in full screen, there will also be a menu with dedicated commands on the top right.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/user/obs/","title":"OBS","tags":[],"description":"Documentation to stream the chat content using OBS.","content":"OBS Overlay If you are using OBS for streaming, you can easily include the chat in your stream.\nYou can use the Â«share chat linkÂ» feature to generate an URL to your chat. The button should be near the chat if you are the video owner (unless it was desactivated by your server admins).\nCheck the Â«readonlyÂ» checkbox in the modal. Then use this link as a Â«web browser sourceÂ» in OBS.\nYou can use the Â«Transparent backgroundÂ» to have a transparent background in OBS. If you want to customize the background transparency, you can add this CSS in your OBS browser source\u0026rsquo;s settings:\n:root { --livechat-transparent: rgba(255 255 255 / 90%) !important; } Note: you can customize colors. This is undocumented yet, but you can try this: in the modal, check Â«use curent theme colorsÂ», then you can try to manually change color values in the URL. You must use valid CSS color values, and they must be properly URL encoded.\nMixing multiple chats in your live stream You can use the social_stream browser extension to mix multiple chat source (from Peertube, Twitch, Youtube, Facebook, \u0026hellip;) and include their contents in your live stream. The compatibility with this plugin was added in recent versions.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/admin/settings/","title":"Settings","tags":[],"description":"Plugin Peertube Livechat settings","content":"This section describes the plugin settings page.\nList existing rooms When pressing the Â«List roomsÂ» button, all existing chatrooms will be listed. You can then find them and moderated them.\nFederation Following settings concern the fedration with other Peertube instances, and other fediverse softwares.\nDon\u0026rsquo;t display remote chats By checking this setting, your instance will never display chats from remote videos.\nDon\u0026rsquo;t publish chat information By checking this setting, your instance will not publish chat information on the fediverse. Remote Peertube instances will not be aware that they are chat rooms associated to your videos.\nPlease note: if you already had chats in progress, it is possible that the information has already been published. You will have to wait for the next video update before the information is unpublished. Also, if you disable this setting, you\u0026rsquo;ll have to wait for the videos to be updated before the information are published again. This update happens among others when a live event resumes or stops.\nPlease note: this setting only affects the publication of information via the ActivityPub protocol. It will not prevent a remote application from otherwise detecting the presence of chats, and trying to connect to it.\nChat behaviour Room type You can choose here to have separate rooms for each video, or to group them by channel.\nAutomatically open the chat If checked, the chat will be loaded as soon as you are on the video page.\nShow the Â«open in new windowÂ» button If your web chat tool can be opened in a full window, you can add a button to do so.\nIf you are using an external web chat tool (see the chat mode Â«Use an external web chat toolÂ»), maybe it will not work in fullscreen (for example if it needs to access the parent window to get video informations). You can disable this button by unchecking this settings.\nShow the Â«share chat linkÂ» button This feature enables a Â«share chat linkÂ» modal. With this modal, you can generate URLs to join the chat. The chat can be customized (readonly mode, use the current theme, \u0026hellip;).\nYou can for example generate a readonly URL and use it in OBS to integrate the chat in your live stream!\nThis settings allows you to choose who can access this modal.\nChats are only available for local videos Peertube is a federated service. Plugins are only available on the server you are browsing. So, if you are watching a remote video, only you will have the webchat, not users from remote instances. Therefore, this options is checked by default and prevent displaying a webchat for remote videos.\nUsers can activate the chat for their lives If checked, all live videos will have a checkbox in their properties for enabling the web chat. The video owner will be able to activate web chats.\nActivate chat for all lives The chat will be available for all Peertube live videos on your instance.\nActivate chat for all non-lives The chat will be available for all Peertube video that are not live.\nActivate chat for these videos You can choose some UUIDs for which the chat will be available. If you don\u0026rsquo;t want te enable the feature for all videos, you can use this field to list videos UUIDs. You can add comments: everything rights to the # character will be stripped off, as for empty lines.\nHide the chat for anonymous users If checked, anonymous Peertube users won\u0026rsquo;t see the chat.\nNote: for now this feature simply hide the chat. In a future release, the chat will be replaced by a message saying Â«please log in to [\u0026hellip;]Â». See v5.7.0 Release Notes for more information.\nTheming ConverseJS theme You can choose which theme to use for ConverseJS:\n Peertube theme: this is a special theme, made especially for peertube\u0026rsquo;s integration. Default ConverseJS theme: this is the default ConverseJS theme. ConverseJS concord theme: this is a theme provided by ConverseJS.  Automatic color detection Try to autodetect colors from user\u0026rsquo;s current theme. When this settings is enabled, the plugin tries to auto-detect colors to apply to the chat theme. If this is not correctly working for some of your Peertube theme, you can disable this option.\nWebchat iframe style attribute You can add some custom styles that will be added to the iframe. For example a custom width:\nwidth:400px;\nChat server advanced settings Use system Prosody The plugin comes with an AppImage that is used to run the Prosody XMPP server. If this AppImage is not working, you can fallback to the Prosody that is packaged for your server. Just install the prosody package.\nThis settings should only be used if the plugin is broken, and waiting for a patch.\nDisable Websocket With Peertube \u0026gt;= 5.0.0, this plugin try to use Websocket connection for chatting. If the user\u0026rsquo;s browser or connection is not compatible, the browser will automatically fallback on the BOSH protocol.\nBut in rare case, this can fail. For example if you have a reverse proxy in front of Peertube that does not allow Websocket connection for plugins. In this case, you can check this setting to disable Websocket connections.\nProsody port This is the port that the Prosody server will use. By default it is set to 52800. If you want to use another port, just change the value here.\nPeertube URL for API calls In some rare cases, Prosody can\u0026rsquo;t call Peertube\u0026rsquo;s API from its public URI. If you have such issues (see the diagnostic tool result), you can try to set the value of this settings to http://localhost:9000 or http://127.0.0.1:9000 (supposing your Peertube is listening on port 9000. Check that in your Peertube config/production.yaml file).\nLog rooms content by default If checked, room content will be archived on the server by default. This means that users who join the chan will see messages sent before they have joined.\nPlease note that it is always possible to enable/disable the content logging for a specific room, by editing its properties.\nRoom logs expiration You can set here the expiration delay for room logs. See the online help for accepted values.\nEnable connection to room using external XMPP accounts By enabling this option, it will be possible to connect to rooms using external XMPP accounts and XMPP clients.Warning, enabling this option can request extra server and DNS configuration. Please refer to the documentation: Enable external XMPP account connections.\nProsody server to server port The port that will be used for XMPP s2s (server to server) connections.You should use the standard 5269 port. Otherwise you should setup a specific DNS record.\nServer to server network interfaces The network interfaces to listen on for server to server connections.List of IP to listen on, coma separated (spaces will be stripped).You can use Â«*Â» to listen on all IPv4 interfaces, and Â«::Â» for all IPv6.Examples:\n *, :: * 127.0.0.1, ::1 172.18.0.42  Certificates directory If this field is empty, the plugin will generate and use self-signed certificates.If you want to use other certificates, just specify here the folder where Prosody can find them. Note: the peertube user must have read access to this directory.\nEnable client to server connections This setting enable XMPP clients to connect to the built-in Prosody server. For now, this option only allows connections from localhost clients.\nAs example, this option can allow an instance of Matterbridge (once it could use anonymous login) on the same machine to bridge your chat with another services like a Matrix room.\nProsody client to server port The port that will be used by the c2s module of the built-in Prosody server. XMPP clients shall use this port to connect. Change it if this port is already in use on your server.\nEnable external XMPP components This settings enable XMPP external components to connect to the server. For now, this option only allows connections from localhost components.\nThis feature could be used to connect bridges or bots.\nMore informations on Prosody external components here.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/admin/advanced/","title":"Advanced usage","tags":[],"description":"Some advanced features","content":"  XMPP clients  Allow connections using XMPP clients\n   Using Matterbridge  Using Matterbridge to bridge with other chats\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contributing/translate/","title":"Translate","tags":[],"description":"Translate the plugin","content":"You can contribute to this plugin translation. Translations are handled using the Weblate software, using Framasoft Weblate instance.\nNever modify directly files in the languages folder, this could lead to conflicts.\n How to  Create an account: https://weblate.framasoft.org/accounts/register/ Validate your email and follow the link sent Create your password and setup your account Go to the plugin project page: https://weblate.framasoft.org/projects/peertube-livechat/peertube-plugin-livechat/ Choose the locale you want to translate Just translate missing sentences, or correct the ones that seems incorrect to you.  There might be some Â«very technicalÂ» strings. If you are not 100% sure of the meaning, or of your translation, you better not translate it, so it will display in english.\n Documentation translation Fow now, this is not done on Weblate. I still looking for the good technical solution.\nPlease refer to the \u0026ldquo;documentation\u0026rdquo; documentation page.\nAdding a new locale If you think there is a missing locale, please check first if it is handled in Peertube. If so, you can open an issue to ask for it.\nAdding new strings / use translations in the code If you are working on new features, and need new strings, you can create them directly in Weblate. The english version is mandatory. Start with it.\nEach string is linked to a key (for example use_chat). Choose an explicit key in english.\nTo use a string in front-end, you need (for now) to call peertubeHelpers.translate with the english string. This means we can\u0026rsquo;t change english strings without updating the code. This is not optimal, but will change in a near future.\nFor backend, for now the only file where there is localisation is server/lib/settings.ts. There is a loc function to call, passing as parameter the localisation key.\nIf you have to test new strings without waiting for a Weblate merge, you can modify languages/*.yml files, but avoid to commit these change (to minimize conflict risks).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/admin/","title":"Admin documentation","tags":[],"description":"Plugin Peertube Livechat administration","content":"  Settings  Plugin Peertube Livechat settings\n   Advanced usage  Some advanced features\n  XMPP clients  Allow connections using XMPP clients\n   Using Matterbridge  Using Matterbridge to bridge with other chats\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contributing/feedback/","title":"Give your feedback","tags":[],"description":"Give your feedback","content":"You don\u0026rsquo;t need to know how to code to start contributing to this plugin! Other contributions are very valuable too, among which: you can test the software and report bugs, you can give feedback, features that you are interested in, user interface, design, \u0026hellip;\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/admin/advanced/xmpp_clients/","title":"XMPP clients","tags":[],"description":"Allow connections using XMPP clients","content":"This chat module is based on the XMPP protocol, also known as Jabber. It is therefore possible to connect to the chats using XMPP client software. This can for example be useful to facilitate moderation operations.\nFor the user documentation associated with these features, please refer to the user documentation page.\nEnabling these features requires configuration changes on the server, and on the DNS records. It is not possible to configure this only from the Peertube interface, and it requires some basic system some basic system admin skills.\n Login to your Peertube account This feature is not yet available, and will come in a future version of the plugin.\n Connection using an external XMPP account To enable this feature, you will need to set up your server and DNS records, so that XMPP clients can find and access the Prosody server that this plugin uses internally.\nPlugin settings Start by going to the livechat plugin settings of your instance, then enable the setting \u0026ldquo;Enable connection to room using external XMPP accounts\u0026rdquo;. By checking this settings, new settings appear below.\nFirst of all, the \u0026ldquo;Prosody server to server port\u0026rdquo; field. This one defaults to 5269, which is the standard port for this service. You can however change to another port, if this is already in use on your server.\nNext, the field \u0026ldquo;Server to server network interfaces\u0026rdquo; field allows you to specify which network interfaces the server should listen on. The default value \u0026ldquo;*, ::\u0026rdquo; indicates to listen on all IP addresses. You can change these values, if you wish to listen on only certain IP addresses. The syntax is explained next to the setting.\nFor the \u0026ldquo;Certificate folder\u0026rdquo; setting, you can leave it empty. In this case, the plugin will automatically generate self-signed certificates. Some XMPP servers may refuse to connect, depending on their configuration. In this case, you can indicate here a path on the server, in which you must place certificates to be used by the module. It is up to you to generate and renew them. See bellow for more information.\nFirewall You must open the configured port (5269 by default) on your firewall.\nIf you are using Docker for your Peertube, you need to modify the docker-compose.yml file to open port 5269 of the peertube container, so that the outer world can connect to it.\nDNS You need to add a DNS record allowing remote servers to find the \u0026ldquo;room.your_instance.tld\u0026rdquo; component.\nThe easiest way to do this is to add an SRV record for the \u0026ldquo;room\u0026rdquo; subdomain:\n record name: _xmpp-server._tcp.room.your_instance.tld. (replace Â«your_instance.tldÂ» by your instance uri) TTL: 3600 class: IN SRV: 0 priority: 0 weight: 5 port: 5269 (adapt if your changed the default port) target: your_instance.tld. (replace by your instance uri)  Be careful to keep the dot after \u0026ldquo;your_instance.tld\u0026rdquo;.\nUsing the dig command to check your record, you should get a result similar to this:\n$ dig +short _xmpp-server._tcp.room.videos.john-livingston.fr. SRV 0 5 5269 videos.john-livingston.fr. If you are not using the standard 5269 port, you must also add a SRV record for _xmpp-server._tcp.your_instance.tld. (same as above, just without the room. prefix). Of course, you can also add this record if you use the standard port. It will also work.\nUsing trusted certificates The self-signed certificates that this plugin uses by default can be rejected by some XMPP servers, for security reasons.\nIt is possible to use certificates validated by a certification authority. However, this requires advanced system administration knowledge. Indeed, due to the multitude of possible use cases, it is impossible to document all situations here. This documentation will therefore only explain the goal to be reached, and give an example which will only be suitable for a \u0026ldquo;basic\u0026rdquo; situation (manual installation of Peertube, using letsencrypt). If you are in another situation (Docker installation, certificates signed by another authority, etc\u0026hellip;), you will have to adapt this approach by yourself.\nBasic principle It is up to you to generate valid certificates for domains your_instance.tld and room.your_instance.tld. You can use any method supported by Prosody.\nYou must then place these certificates in a folder that will be accessible to the peertube user, and specify this folder in the plugin setting \u0026ldquo;Certificate folder\u0026rdquo;.\nIf you want to use the ProsodyCtl utility to import certificates, this utility is available (once Peertube is started) using the following command (adapting the path to your Peertube data folder, and replacing \u0026ldquo;xxx\u0026rdquo; with the arguments you wish to pass to prosodyctl): sudo -u peertube /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl xxx\n The plugin will check once a day to see if any files have been modified in this folder, and reload Prosody if necessary.\nMethod for the simple case We assume here that your Peertube installation is \u0026ldquo;classic\u0026rdquo; (no use of Docker), and that the certificates are generated by letsencrypt, using the certbot tool.\nFirst of all, we\u0026rsquo;ll have to create a certificate for the subdomain room.your_instance.tld : this is the uri of the MUC (XMPP chat rooms) component. Even if the connections are made on your_instance.tld, we will need a valid certificate for this subdomain.\nSo start by setting up a DNS entry for room.your_instance.tld, which points to your server. You can use a CNAME entry (or an A entry and a AAAA entry).\nNext, we\u0026rsquo;ll use nginx (already installed for your Peertube) to generate the certbot certificate. We will create a new site. In the file /etc/nginx/site-available/room.peertube, add:\nserver { listen 80; listen [::]:80; server_name room.your_instance.tld; location /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/certbot; } location / { return 301 https://your_instance.tld; } } Then enable the site:\nln -s /etc/nginx/sites-available/room.peertube /etc/nginx/sites-enabled/ systemc reload nginx Then we prepare the folder in which we will later import the certificates. We assume here that you already have the plugin active. We will create the following folder (if it doesn\u0026rsquo;t already exist), with the user peertube to make sure there are no permissions issues:\nsudo -u peertube mkdir /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/certs Now you have to configure this folder in the plugin settings, for the parameter \u0026ldquo;Certificate folders\u0026rdquo;. It\u0026rsquo;s important to do this now, otherwise the certificate import script will put the certificates in the wrong folder.\nWe will configure certbot to import the generated certificates into the Prosody folder. We can use the ProsodyCtl utility packaged in the plugin.\nNote: for it to be available, the plugin must have been started at least once.\nWe will create a file /etc/letsencrypt/renewal-hooks/deploy/prosody.sh containing:\n#!/bin/sh /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl \\  --root \\  --config /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  cert import \\  room.your_instance.tld your_instance.tld /etc/letsencrypt/live Then we ask to generate the certificate:\ncertbot -d room.videos.john-livingston.fr If certbot offers you several methods to generate the certificate, choose \u0026ldquo;nginx\u0026rdquo;.\nNormally you should now find the certificates in the configured folder.\nNote: the first time you do this, you will have to reload Prosody. The easiest way to do this is to restart Peertube.\nMethod for the Docker case This method works with the officially supported Docker guide from PeerTube.\nFirst, ensure you create a DNS entry for room.your_instance.tld, which points to your server. You can use a CNAME entry (or an A entry and a AAAA entry). This is necessary for Let\u0026rsquo;s Encrypt to validate the domain for certificate generation.\nEnter the directory where your docker-compose.yml file exists.\nOpen a shell in the certbot container:\ndocker exec -it certbot /bin/sh Run certbot:\ncertbot You will be presented with a series of prompts. Enter 2 for the authentication type:\nHow would you like to authenticate with the ACME CA? Select the appropriate number [1-2] then [enter] (press \u0026#39;c\u0026#39; to cancel): 2 Enter the domain name room.your_instance.tld:\nPlease enter the domain name(s) you would like on your certificate (comma and/or space separated) (Enter \u0026#39;c\u0026#39; to cancel): room.your_instance.tld Enter the directory where the PeerTube webserver serves requests for Let\u0026rsquo;s Encrypt, /var/www/certbot:\nInput the webroot for \u0026lt;room.your_instance.tld\u0026gt;: (Enter \u0026#39;c\u0026#39; to cancel): /var/www/certbot You should see output like the following:\nSuccessfully received certificate. Certificate is saved at: /etc/letsencrypt/live/room.your_instance.tld/fullchain.pem Key is saved at: /etc/letsencrypt/live/room.your_instance.tld/privkey.pem Run the below command inside the certbot container to give read access to the new certs and private keys to the peertube group. Note: This will also make the files readable to the group with id 999 on the host system. Check the groups on your system to assess this as a risk before running this command.\nchown -R root:999 /etc/letsencrypt/live; \\ chmod 750 /etc/letsencrypt/live; \\ chown -R root:999 /etc/letsencrypt/archive; \\ chmod 750 /etc/letsencrypt/archive; \\ find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} \\; Exit the certbot container:\nexit Modify your docker-compose.yml file, changing the entrypoint line under the certbot service to the following. This is the same as the above, but to be automatically executed after every certificate renewal.\nentrypoint: /bin/sh -c \u0026#34;trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; chown -R root:999 /etc/letsencrypt/live; chmod 750 /etc/letsencrypt/live; chown -R root:999 /etc/letsencrypt/archive; chmod 750 /etc/letsencrypt/archive; find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} +; sleep 12h \u0026amp; wait $${!}; done;\u0026#34; Continuing to modify docker-compose.yml, add the certbot certificate volume into the peertube container. It should look something like this:\nvolumes: - ./docker-volume/certbot/conf:/etc/letsencrypt Restart your services:\ndocker-compose down; docker-comopse up -d In the livechat plugin settings from your PeerTube administration settings, set the certificate directory to the following:\n/etc/letsencrypt/live Save the plugin settings and verify Prosody can see the certificates:\ndocker-compose exec -u peertube \\  peertube \\  /data/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun \\  prosodyctl \\  --config /data/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  check certs Troubleshooting If you can\u0026rsquo;t make it work, you can use the diagnostic tool (there is a button on top of the plugin settings page), and take a close look on the Â«Prosody checkÂ» section.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contributing/develop/","title":"Develop","tags":[],"description":"Develop","content":"Always talk about features you want to develop by creating/finding and commenting the issue tackling your problem before you start working on it, and inform the community that you begin coding by claiming the issue.\nPull Request must be done on the main branch.\nUntil march 2023, contribution were made on the develop branch. This procedure is now deprecated.\n Prerequisite for building this plugin:\n you must have npm installed you must have python venv installed (python3-venv package on Debian for example)  To clone the repository:\n# Clone the repository git clone https://github.com/JohnXLivingston/peertube-plugin-livechat.git # Be sure to checkout the main branch git checkout main # Initialize the submodules. This command must be run again if any submodules\u0026#39; version changes. git submodule update --init --recursive # Install NPM dependencies and build the module for the first time: npm install # Build the plugin after a modification: npm run build # If you have a fork from the repository, add it as remote (example): git remote add me git@github.com:MY_GITHUB_ACCOUNT/peertube-plugin-livechat.git # Create a local branch for you developments, and checkout it (example): git checkout my_development # Note: if an issue is associated, use fix_1234 as your branch name (where 1234 is the issue\u0026#39;s number) # To propose your modifications, push your branch to your repository (example): git push --set-upstream me my_development # Then go to your github repository with your web browser to propose the Pull Request (see additional instructions below) Once you are ready to show your code to ask for feedback, submit a draft Pull Request. Once you are ready for a code review before merge, submit a Pull Request. In any case, please link your PR to the issues it solves by using the GitHub syntax: \u0026ldquo;fixes #issue_number\u0026rdquo;.\nThe front-end code is in the client folder, the back-end code in server. There are some shared code in shared folder.\nFor general instructions (developping plugins, building, installation, \u0026hellip;), please refer to the Peertube documentation.\nYou can build the plugin with extra debug features simply by using:\nNODE_ENV=dev npm run build ESBuild vs Typescript This plugin uses ESBuild for frontend code generation, as the official peertube-plugin-quickstart plugin. ESBuild can handle Typescript, but does not check types (see ESBuild documentation). That\u0026rsquo;s why we first compile Typescript with the -noEmit option, just to check types (check:client:ts in package.json file). Then, if everything is okay, we run ESBuild to generate the compiled javascript.\nDebug Mode There is a debug mode for this plugin, that shorten some delay. For example, some log files will rotate every two minutes, instead of once per day. This permit to test more easily certain actions, for which it could normally take hours or days to wait.\nTo enable this mode, you juste have to create the /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/debug_mode file (replacing /var/www/peertube/storage/ by the correct path on your installation).\nThe simple existence of this file is sufficient to trigger the debug mode. To make sure it\u0026rsquo;s taken into account, you can restart your Peertube instance.\nThis file can contain some JSON to enable more advances options. To have a list of existing parameters, check server/lib/debug.ts. Restart Peertube after each content modification.\nDon\u0026rsquo;t enable this mode on a production server, neither on a public server. This could cause security issues.\n Restart Prosody When debug mode is enabled, you can restart Prosody using this API call: http://your_instance.tld/plugins/livechat/router/api/restart_prosody. This call don\u0026rsquo;t need any authentificaiton. It can be done from a command line, for example using curl http://your_instance.tld/plugins/livechat/router/api/restart_prosody.\nProsody debugger It is possible to connect the Prosody AppImage to a remote debugger using MobDebug.\nTo do so, you have to setup MobDebug in a folder that can be accessed by the peertube user. Then, add this in the debub_mode file:\n{ \u0026#34;debug_prosody\u0026#34;: { \u0026#34;debugger_path\u0026#34;: \u0026#34;/the_path_to_mobdebug/src\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;8172\u0026#34; } } host and port are optional. debugger_path must point to the folder where the MobDebug .lua file is.\nRestart Peertube.\nStart your debugger server.\nFor Prosody to connect to the debugger, call the API http://your_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. This call does not need any authentication. It can be done from a command line, for example with curl http://your_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. You can even configure your debug server to launch this request automatically.\nProsody will then restart, connecting to the debugger.\nQuick dev environment using Docker There is a tutorial, in french, on the le Peertube forum that explains how to quickly build a dev env using Docker.\nA repo was made out of it, check out https://codeberg.org/mose/pt-plugin-dev\nNote: for an unknown reason, Prosody can\u0026rsquo;t resolve containers DNS address when using the lua-unbound library. There is a dirty hack in the plugin: just create a /data/plugins/data/peertube-plugin-livechat/no_lua_unbound file in your docker-volumes, then restart containers.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/user/","title":"User documentation","tags":[],"description":"Plugin peertube-plugin-livechat user documentation","content":"  Moderation  Plugin peertube-plugin-livechat moderation\n   OBS  Documentation to stream the chat content using OBS.\n   XMPP Clients  Connect to chat using a XMPP client\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/user/xmpp_clients/","title":"XMPP Clients","tags":[],"description":"Connect to chat using a XMPP client","content":"This chat plugin relies on the XMPP protocol (also known as Jabber). It is therefore possible to connect to the chats using XMPP client software. This can be useful for example to facilitate moderation operations.\nThe features described on this page must be enabled and configured by your Peertube instance\u0026rsquo;s administrators. You may therefore not have access to them.\n Login to your Peertube account This feature is not yet available, and will come in a future version of the plugin.\n Connection using an external XMPP account If this feature is enabled on your instance, you can connect to Peertube chats using any XMPP account.\nTo get the address of the room you want to join, you can use the \u0026ldquo;share chat\u0026rdquo; button that is located above the chat:\nBy default, the share button is only visible to the owner of the video, and the admins/moderators of the instance. However, admins can decide to display this button for everyone.\n Then, choose \u0026ldquo;Connect using XMPP\u0026rdquo;:\nThen you just have to click on \u0026ldquo;open\u0026rdquo; or copy/paste the address of the chat room into your XMPP client (using the \u0026ldquo;join a room\u0026rdquo; feature).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contributing/document/","title":"Documentation","tags":[],"description":"Document the plugin, or translate the documentation.","content":"General information Always inform the community before working (by creating a new issue, or commenting an existing one). This is to avoid that two persons are working on the same thing, and prevent conflicts.\nDocumentation work has to be merged in the main branch.\nThe documentation source code is in the support/documentation/content folder.\nThe documentation is generated using Hugo. You have to install it on your computer if you want to preview your work.\nThe used theme is hugo-theme-learn. You should read its documentation before starting editing the documentation.\nWhen a new plugin version is released, or when documentation is updated, plugin maintainers will merge the main branch to the documentation branche. This will trigger github and gitlab pipelines, and update published documentation.\nTranslations The principal language is english (en code).\nThe different translations of the same file are side by side in the tree, and are identified by a language code in the file name extension. Example: _index.fr.md is the French translation of _index.en.md.\nPlease note that a missing translation file will not appear in the menus of the generated site.\nAlways make sure to create files for all languages, even if the translation is not yet available.\nFor this, there is a script doc-generate-missing-translations.sh in the root of the repository. When you add a new file, you just have to create the english version, then run this script. It will create all missing translations, putting a sample message inviting the user to read the english version.\nAdd a new language In the support/documentation/config.toml file, please copy and modify the [Languages.fr] section.\nThen, run the doc-generate-missing-translations.sh script. It will create all the missing files.\nThen you can translate them one by one. If the translations are not complete, it does not matter, the generated files will display a message suggesting to change the language.\nPreview To preview your modifications, just run:\nhugo serve -s support/documentation/ Then open your browser on the address http://localhost:1313/peertube-plugin-livechat/. This page will automatically refresh on each modification.\nPublication Publishing the documentation is automatic, as soon as the changes are merged into the `main' branch.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/installation/upgrade_before_6.0.0/","title":"Upgrade from version older than 6.0.0","tags":[],"description":"Important notes when upgrading for an older version.","content":"IMPORTANT NOTE Since version v6.0.0, this plugin does not need any Prosody installation.\nIf you were using this plugin before this version, and if you had installed Prosody manually, you can safely uninstall Prosody.\nIf you were using the custom Peertube docker image that is embedding Prosody, you can switch back to the official Peertube image.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/documentation/admin/advanced/matterbridge/","title":"Using Matterbridge","tags":[],"description":"Using Matterbridge to bridge with other chats","content":"Here is a tutorial to use Matterbridge with the plugin: https://gitlab.com/refrac/obs-matterbridge-overlay/-/blob/master/documentation/peertube.md\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contributing/","title":"Contributing","tags":[],"description":"Contributing","content":"Interested in contributing? Awesome!\n Code of Conduct  Contributor Covenant Code of Conduct\n   Translate  Translate the plugin\n   Give your feedback  Give your feedback\n   Develop  Develop\n   Documentation  Document the plugin, or translate the documentation.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/issues/","title":"Bug tracking &amp; new features","tags":[],"description":"Bug tracking / New features requests","content":"If you have new feature requests, bugs, or difficulties to setup the plugin, you can use the Github issue tracker.\nTo have a glimpse to the roadmap for upcoming features, please refer to:\n this github project. the milestones on github.  If you are a webdesigner or a ConverseJS/Prosody/XMPP expert, and want to help improve this plugin, you are welcome.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/contact/","title":"Contact me","tags":[],"description":"Contact the author","content":"If you have any question, or if you want to talk about this plugin, you can join this XMPP room with any Jabber client: plugin-livechat-support@room.im.yiny.org.\nIf you want to support the project financially, you can contact me by mail at git.[at].john-livingston.fr, or check my Liberapay profile.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/credits/","title":"Credits","tags":[],"description":"Plugin Credits","content":"package.json, COPYRIGHT and LICENSE files contain the license information for this software and its dependencies.\nThe plugin is maintained by John Livingston.\nThanks to David Revoy for his work on Peertube\u0026rsquo;s mascot, Sepia. The character design is under CC-By licence, and the SVG files used to create some logo and avatars in this plugin are GPLv3.0.\nThanks to Framasoft for making Peertube possible, and for the financial support.\nThanks to ritimo for the financial support.\nThanks to Code Lutin and RÃ©tribution Copie Publique for the financial support.\nThanks to NlNet and the NGI0 Entrust fund for the financial support.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/","title":"","tags":[],"description":"","content":"PeerTube plugin livechat You can use the language selector in the left menu to view this documentation in different languages.\n Before updating to a major release, please read the release notes and breaking changes list : CHANGELOG.\n  Introduction  Introduction\n   Documentation  Plugin documentation\n  Installation guide  Plugin peertube-plugin-livechat installation guide\n  Known issues: CPU Compatibility  For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.\n Upgrade from version older than 6.0.0  Important notes when upgrading for an older version.\n  Admin documentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n Advanced usage  Some advanced features\n  User documentation  Plugin peertube-plugin-livechat user documentation\n  Moderation  Plugin peertube-plugin-livechat moderation\n OBS  Documentation to stream the chat content using OBS.\n XMPP Clients  Connect to chat using a XMPP client\n   Contributing  Contributing\n  Code of Conduct  Contributor Covenant Code of Conduct\n   Translate  Translate the plugin\n   Give your feedback  Give your feedback\n   Develop  Develop\n   Documentation  Document the plugin, or translate the documentation.\n    Bug tracking \u0026amp; new features  Bug tracking / New features requests\n   Contact me  Contact the author\n   Credits  Plugin Credits\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/tags/","title":"Tags","tags":[],"description":"","content":""}]