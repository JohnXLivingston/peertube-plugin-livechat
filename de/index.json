[{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/intro/","title":"Einführung","tags":[],"description":"Einführung","content":"Dieses Peertube Plugin ist dafür gedacht, ein Chatsystem für Peertube-Videos bereitzustellen.\nYou can use the language selector in the left menu to view this documentation in different languages. Some translations are missing or incomplete. In this case, you\u0026rsquo;ll see the English version of the text.\n               Siehe eine demo.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/installation/cpu_compatibility/","title":"Bekannte Probleme: CPU Kompatibilität","tags":[],"description":"Derzeit funktioniert das Plugin standartmäßig nur für x86_64 CPU Architekturen. Hier sind einige Anleitungen für andere CPU Architekturen.","content":"Das im Plugin enthaltene Prosody AppImage funktioniert nur mit x86_64 und arm64 CPU Architekturen. Es ist nicht kompatibel mit anderen CPU-Architekturen.\nUm das Plugin zu verwenden, müssen Sie Prosody manuell auf Ihrem Server installieren (siehe unten).\nNote: the plugin requires Prosody \u0026gt;= 0.12.0. If you are using an older version, Chat Federation could be broken, and it could have some unexpected behaviour.\nSobald dies geschehen ist, müssen Sie in den Plugin-Einstellungen das Häkchen bei Use system Prosody setzen.\nNicht-Docker Peertube installation Für die Standardinstallation müssen Sie nur das offizielle prosody-Paket für Ihre Linux-Distribution installieren.\nZum Beispiel, auf Debian/Ubuntu:\nsudo apt install prosody Sie können dann den Dienst deaktivieren, der automatisch startet, wenn Sie Prosody installieren (das Plugin startet einen Prosody-Prozess, der Dienst muss nicht dauerhaft laufen). Zum Beispiel unter Debian/Ubuntu (und anderen Systemd-basierten Linux-Distributionen):\nsudo systemctl disable prosody \u0026amp;\u0026amp; sudo systemctl stop prosody Achtung: Deaktivieren Sie Prosody nicht, wenn es für einen anderen Dienst auf Ihrem Server verwendet wird, wie zum Beispiel Jitsi.\nDocker Sie müssen ein Peertube-Image generieren, das Prosody in demselben Container enthält, der auch Peertube beinhaltet. Ich weiß, dass dies nicht der Standardweg ist, um dies mit Docker zu tun, aber bedenken Sie, dass eine vorübergehende Lösung ist.\nUm ein solches Image zu erzeugen und zu verwenden, lesen Sie bitte die Docker-Dokumentation. Die Docker-Datei, um das Paket zu erzeugen, sollte wie folgt sein:\nFROMchocobozzz/peertube:production-bullseyeRUN apt -y update \u0026amp;\u0026amp; apt install -y prosody \u0026amp;\u0026amp; apt -y cleanYunohost Sie müssen metronome (der von Yunohost bereitgestellte XMPP-Server) deaktivieren, und prosody installieren.\nDies wird bereits von der Yunohost Peertube Anwendung gemacht, da es für das Plugin vor v6.0.0 erforderlich war.\nEs kann aber sein, dass es in naher Zukunft entfernt wird (um die Nachteile dieser Methode zu vermeiden). Ich muss mit dem Yunohost Team diskutieren, um zu entscheiden, wie wir die Nachteile minimieren können, und die Kompatibilität zu maximieren.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/","title":"Dokumentation","tags":[],"description":"Plugin Dokumentation","content":"  Installationsanleitung  Plugin peertube-plugin-livechat Installationsanleitung\n  Bekannte Probleme: CPU Kompatibilität  Derzeit funktioniert das Plugin standartmäßig nur für x86_64 CPU Architekturen. Hier sind einige Anleitungen für andere CPU Architekturen.\n   Aktualisieren von Versionen vor 6.0.0  Wichtige Hinweise zum aktualisieren von älteren Versionen.\n    Admin Dokumentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n   Fortgeschrittene Nutzung  Einige erweiterte Funktionen\n  XMPP clients  Allow connections using XMPP clients\n Matterbridge benutzen  Matterbridge als Brücke zu anderen Chats nutzen\n   Benutzer Dokumentation  Plugin peertube-plugin-livechat Benutzer Dokumentation\n  Dokumentation  Plugin peertube-plugin-livechat Benutzer Dokumentation\n   OBS  Documentation to stream the chat content using OBS.\n   XMPP Clients  Connect to chat using a XMPP client\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/user/moderation/","title":"Dokumentation","tags":[],"description":"Plugin peertube-plugin-livechat Benutzer Dokumentation","content":"You can access room settings and moderation tools by opening the chat in a new window, and using the dropdown menu at the top right.\nYou can list all existing chatrooms: in the plugin settings screen, there is a button «List rooms».\nYou can delete old rooms: join the room, and use the menu on the top to destroy the room.\nNotes All instance moderators and admins will be owner of created chat rooms. If the video is local (not from a remote Peertube), the video owner will be admin in the chat room.\nYou can use ConverseJS moderation commands to moderate the room. When you open the chat room in full screen, there will also be a menu with dedicated commands on the top right.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/installation/","title":"Installationsanleitung","tags":[],"description":"Plugin peertube-plugin-livechat Installationsanleitung","content":" Bevor Sie auf eine Hauptversion aktualisieren, lesen Sie bitte die Versionshinweise und die Liste der wichtigsten Änderungen : CHANGELOG.\n Um das Plugin zu installieren oder zu aktualisieren einfach das Peertube Web-Admin-Interface benutzen.\n Hier sind weitere, spezifischere Anweisungen:\n Bekannte Probleme: CPU Kompatibilität  Derzeit funktioniert das Plugin standartmäßig nur für x86_64 CPU Architekturen. Hier sind einige Anleitungen für andere CPU Architekturen.\n   Aktualisieren von Versionen vor 6.0.0  Wichtige Hinweise zum aktualisieren von älteren Versionen.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/user/obs/","title":"OBS","tags":[],"description":"Documentation to stream the chat content using OBS.","content":"OBS Overlay If you are using OBS for streaming, you can easily include the chat in your stream.\nYou can use the «share chat link» feature to generate an URL to your chat. The button should be near the chat if you are the video owner (unless it was desactivated by your server admins).\nCheck the «readonly» checkbox in the modal. Then use this link as a «web browser source» in OBS.\nYou can use the «Transparent background» to have a transparent background in OBS. If you want to customize the background transparency, you can add this CSS in your OBS browser source\u0026rsquo;s settings:\n:root { --livechat-transparent: rgba(255 255 255 / 90%) !important; } Note: you can customize colors. This is undocumented yet, but you can try this: in the modal, check «use curent theme colors», then you can try to manually change color values in the URL. You must use valid CSS color values, and they must be properly URL encoded.\nMixing multiple chats in your live stream You can use the social_stream browser extension to mix multiple chat source (from Peertube, Twitch, Youtube, Facebook, \u0026hellip;) and include their contents in your live stream. The compatibility with this plugin was added in recent versions.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/admin/settings/","title":"Settings","tags":[],"description":"Plugin Peertube Livechat settings","content":"This section describes the plugin settings page.\nBestehende Räume auflisten  When pressing the «List rooms» button, all existing chatrooms will be listed. You can then find them and moderated them.\nFederation Following settings concern the federation with other Peertube instances, and other fediverse softwares.\nChats von anderen Instanzen nicht anzeigen  Wenn Sie diese Einstellung aktivieren, werden in Ihrer Instanz niemals Chats von Videos anderer Instanzen angezeigt. Chat-Information nicht veröffentlichen  Wenn Sie diese Einstellung aktivieren, wird Ihre Instanz keine Chat Informationen im Fediverse veröffentlichen. Andere Peertube-Instanzen wissen nicht, dass mit Ihren Videos Chaträume verbunden sind.\nBitte beachten Sie: Wenn Sie bereits Chats geführt haben, ist es möglich, dass die Informationen bereits veröffentlicht wurden. Sie müssen das nächste Video Update abwarten, bevor die Informationen nicht mehr öffentlich zugänglich sind. Wenn Sie diese Einstellung deaktivieren, müssen Sie außerdem warten, bis die Videos aktualisiert wurden, bevor die Informationen erneut veröffentlicht werden. Diese Aktualisierung erfolgt unter anderem, wenn ein Live Event fortgesetzt oder beendet wird.\nBitte beachten Sie: Diese Einstellung betrifft nur die Veröffentlichung von Informationen über das ActivityPub-Protokoll. Dies hindert eine entfernte Anwendung nicht daran, das Vorhandensein von Chats zu erkennen und zu versuchen, eine Verbindung herzustellen. Chat behaviour Raumtyp  Sie können hier wählen, ob Sie für jedes Video einen eigenen Raum haben möchten oder ob Sie sie nach Kanälen gruppieren möchten. Chat automatisch öffnen  Wenn ausgewählt wird der Chat geladen, sobald Sie auf der Videoseite sind. Zeige den «Chat in neuem Fenster öffnen» Knopf  Es wird einen Knopf zum Öffnen des Webchats in einem neuen Fenster geben. Zeige den «Chat Link teilen» Knopf  This feature enables a «share chat link» modal. With this modal, you can generate URLs to join the chat. The chat can be customized (readonly mode, use the current theme, \u0026hellip;).\nYou can for example generate a readonly URL and use it in OBS to integrate the chat in your live stream!\nThis settings allows you to choose who can access this modal.\nNutzer können den Chat für ihre Live-Videos aktivieren  Wenn diese Option aktiviert ist, haben alle Live-Videos in ihren Eigenschaften ein Feld zur Aktivierung des Webchats. The video owner will be able to activate web chats.\nChat für alle Live-Videos aktivieren  Wenn diese Option markiert ist, wird der Chat für alle Live-Videos aktiviert. Chat für alle Nicht-Live-Videos aktivieren  Chat für alle Nicht-Live-Videos aktivieren Chat für diese Videos aktivieren  Chat für diese Videos aktivieren Chat für anonyme Benutzer ausblenden  Wenn die Option aktiviert ist, können anonyme Peertube-Nutzer den Chat nicht sehen. Diese Funktion ist noch experimentell. Wenn Sie diese Option aktiviert haben, wird empfohlen auch die Option \"Chat-Informationen nicht veröffentlichen\" zu aktivieren. Andernfalls könnten einige Tools von Drittanbietern versuchen, den Chat zu öffnen, und ein unvorhersehbares Verhalten verursachen. Bevor Sie auf eine Hauptversion aktualisieren, lesen Sie bitte die Versionshinweise und die Liste der wichtigsten Änderungen : CHANGELOG.\nTheming ConverseJS Thema  You can choose which theme to use for ConverseJS:\n  Peertube theme: this is a special theme, made especially for peertube\u0026rsquo;s integration.\n  Default ConverseJS theme: this is the default ConverseJS theme.\n  ConverseJS concord theme: this is a theme provided by ConverseJS.\n  Automatische Farberkennung  Versucht, die Farben des aktuellen Themas des Benutzers automatisch zu erkennen.\nWenn diese Einstellung aktiviert ist, versucht das Plugin, die Farben für das Chat-Thema automatisch zu erkennen.\nWenn dies für einige Ihrer Peertube-Themen nicht korrekt funktioniert, können Sie diese Option deaktivieren. Sie können den Fehler im offiziellen Issue Tracker  melden. Vergessen Sie nicht anzugeben, welches Thema nicht funktioniert. Webchat Iframe Stil-Attribut  Sie können einige benutzerdefinierte Stile hinzufügen, die dem Iframe hinzugefügt werden. Zum Beispiel eine benutzerdefinierte Breite: width:400px; Chat server advanced settings System Prosody benutzen  The plugin comes with an AppImage that is used to run the Prosody XMPP server. If this AppImage is not working, you can fallback to the Prosody that is packaged for your server. Just install the prosody package.\nThis settings should only be used if the plugin is broken, and waiting for a patch.\nWebsocket deaktivieren  Mit Peertube \u0026gt;= 5.0.0 versucht dieses Plugin, eine Websocket-Verbindung zum Chatten zu verwenden. Wenn der Browser oder die Verbindung des Benutzers nicht kompatibel ist, wird der Browser automatisch auf das BOSH-Protokoll zurückgreifen. Aber in seltenen Fällen kann dies fehlschlagen. Zum Beispiel, wenn Sie einen Reverse Proxy vor Peertube haben, der keine Websocket-Verbindung für Plugins erlaubt. In diesem Fall können Sie diese Einstellungen überprüfen, um Websocket-Verbindungen zu deaktivieren. Prosody Port  Der Port, der vom integrierten Prosody-Server verwendet wird.\nÄndern Sie ihn, wenn dieser Port bereits auf Ihrem Server verwendet wird.\nSie können diesen Port auf Ihrer Firewall schließen, es wird nicht von der Außenwelt darauf zugegriffen. Hinweis: Dies könnte sich in naher Zukunft ändern, da geplant ist, eine Funktion zum Aktivieren externer Verbindungen hinzuzufügen. Peertube-URL für API-Aufrufe  Bitte lassen Sie diese Einstellungen leer, wenn Sie nicht wissen, was Sie tun.\nIn einigen seltenen Fällen kann Prosody die API von Peertube nicht von seiner öffentlichen URI aufrufen. Sie können dieses Feld verwenden, um die URI von Peertube für Prosody-Module anzupassen (z.B. mit «http://localhost:9000» oder «http://127.0.0.1:9000»). Standardmäßig Inhalte von Räumen protokollieren  Wenn diese Option aktiviert ist, werden die Rauminhalte standardmäßig gespeichert. Jeder Benutzer, der einem Raum beitritt, sieht, was bereits geschrieben wurde, bevor er dem Chat beitrat.\nBitte beachten Sie, dass es immer möglich ist, die Inhaltsarchivierung für einen bestimmten Raum zu aktivieren/deaktivieren, indem Sie seine Eigenschaften bearbeiten. Ablaufzeit von Raumprotokollen  Sie können hier auswählen, wie lange der Inhalt des Chatrooms vom Server aufbewahrt wird. Der Wert kann sein:  60: Der Inhalt wird 60 Sekunden gespeichert. Sie können 60 durch einen beliebigen ganzzahligen Wert ersetzen. 1d: Der Inhalt wird für 1 Tag gespeichert. Sie können 1 durch einen beliebigen ganzzahligen Wert ersetzen. 1w: Der Inhalt wird für 1 Woche gespeichert. Sie können 1 durch einen beliebigen ganzzahligen Wert ersetzen. 1m: Der Inhalt wird für 1 Monat gespeichert. Sie können 1 durch einen beliebigen ganzzahligen Wert ersetzen. 1y: Der Inhalt wird für 1 Jahr gespeichert. Sie können 1 durch einen beliebigen ganzzahligen Wert ersetzen. nie: Der Inhalt läuft nie ab und wird für immer aufbewahrt.  Verbindung zum Raum mit externen XMPP Konten aktivieren  Durch Aktivieren dieser Option ist es möglich, über externe XMPP-Konten und XMPP-Clients eine Verbindung zu Räumen herzustellen.\nAchtung: Durch die Aktivierung dieser Option können zusätzliche Server- und DNS-Konfigurationen erforderlich sein. Bitte beachten Sie die Dokumentation: Aktivieren Sie externe XMPP-Kontoverbindungen.  Prosody Server Port zu Server Port  Der Port, der für XMPP s2s-Verbindungen (Server zu Server) verwendet wird.\nSie sollten den Standardport 5269 verwenden. Andernfalls müssen Sie einen bestimmten DNS Eintrag erstellen . Server zu Server Netzwerkschnittstellen  Die Netzwerkschnittstellen, die für Server zu Server Verbindungen verwendet werden sollen.\nListe der zu nutzenden IPs, durch Kommata getrennt (Leerzeichen werden entfernt).\nSie können «*» verwenden, um alle IPv4-Schnittstellen zu nutzen, und «::» für alle IPv6-Schnittstellen.\nBeispiele:  *, :: * 127.0.0.1, ::1 172.18.0.42  Zertifikate Ordner  Wenn dieses Feld leer ist, erzeugt und verwendet das Plugin selbstsignierte Zertifikate.\nWenn Sie andere Zertifikate verwenden wollen, geben Sie hier einfach den Ordner an, in dem Prosody sie finden kann. Hinweis: Der Benutzer \"peertube\" muss Lesezugriff auf diesen Ordner haben. Aktivieren von Client-Server-Verbindungen  Ermöglichen Sie XMPP-Clients die Verbindung zum integrierten Prosody-Server.\nDiese Option allein lässt nur Verbindungen von localhost-Clients zu. This setting enable XMPP clients to connect to the built-in Prosody server. For now, this option only allows connections from localhost clients.\nAs example, this option can allow an instance of Matterbridge (once it could use anonymous login) on the same machine to bridge your chat with another services like a Matrix room.\nProsody Client-Server-Verbindungsport  Der Port, der vom c2s-Modul des integrierten Prosody-Servers verwendet wird.\nXMPP-Clients müssen diesen Port zum Verbinden verwenden.\nÄndern Sie ihn, wenn dieser Port bereits auf Ihrem Server verwendet wird.\nSie können diesen Port auf Ihrer Firewall vorerst geschlossen halten, es wird nicht von der Außenwelt darauf zugegriffen. Hinweis: Dies könnte sich in naher Zukunft ändern, da geplant ist, eine Funktion zum Aktivieren externer Verbindungen hinzuzufügen. Aktivieren externer XMPP-Komponenten  This settings enable XMPP external components to connect to the server. For now, this option only allows connections from localhost components.\nThis feature could be used to connect bridges or bots.\nMore informations on Prosody external components here.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contributing/codeofconduct/","title":"Verhaltenskodex","tags":[],"description":"Vereinbarung über Verhaltenskodex für Mitwirkende","content":" This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Translations are available at https://www.contributor-covenant.org/translations. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by mail at git.[at].john-livingston.fr.\n Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\n Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community  Examples of unacceptable behavior include:\n The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by mail at git.[at].john-livingston.fr. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla\u0026rsquo;s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/admin/advanced/","title":"Fortgeschrittene Nutzung","tags":[],"description":"Einige erweiterte Funktionen","content":"  XMPP clients  Allow connections using XMPP clients\n   Matterbridge benutzen  Matterbridge als Brücke zu anderen Chats nutzen\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/technical/thirdparty/","title":"Third party","tags":[],"description":"Displaying the livechat with 3rd party software.","content":" This page describes experimental features. These features are available with the plugin version \u0026gt;= 7.2.0.\n Einführung Peertube is part of the Fediverse. So Peertube video can be watched from other Peertube instances, and from various other softwares:\n  from a Mastodon (or other fediverse application) instance,\n  from a mobile app (Fedilab, Tusky, \u0026hellip;),\n  from desktop fediverse app,\n  \u0026hellip;\n  This livechat plugin is using well known standards, so it is possible to join chat rooms even when not viewing the video on Peertube.\nThere are basically 2 ways to join the chat room associated to a video:\n  opening a web page (with an url like https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535),\n  using a XMPP client (and joining a room like xmpp://8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld?join)\n  Joining the chat using a XMPP client is not always possible. It requires some DNS and server configuration. It will only be possible if instance\u0026rsquo;s admins have correctly setup the external XMPP clients connection feature.\n Don\u0026rsquo;t try to gues these url and connection methods yourself. Please report to next chapters.\n Chat discovery Using ActivityPub The livechat plugin adds some data in Video ActivityPub objects, so that the chat can be discovered.\nThis requires Peertube \u0026gt;= 5.1\n This follows the FEP-1970 recommendations.\nAt the time of the writing, this FEP is in draft status, and the livechat plugin is a Proof-of-concept. Until the FEP is adopted, the specification can change, and the livechat plugin will be adapted accordingly.\n Basically, the chat will be declared as attachments on the Video object, using the discussion relation.\nBy default, here is an example of what you will get:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, { \u0026#34;RsaSignature2017\u0026#34;: \u0026#34;https://w3id.org/security#RsaSignature2017\u0026#34; }, { // ...  } ], \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://yourinstance.tld/accounts/root/followers\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Video\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;The video title\u0026#34;, // ...  \u0026#34;url\u0026#34;: [ /* ... */ ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; } ] } In case the instance has activated the external XMPP clients connection feature:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, { \u0026#34;RsaSignature2017\u0026#34;: \u0026#34;https://w3id.org/security#RsaSignature2017\u0026#34; }, { // ...  } ], \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://yourinstance.tld/accounts/root/followers\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Video\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;The video title\u0026#34;, // ...  \u0026#34;url\u0026#34;: [ /* ... */ ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;xmpp://8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld?join\u0026#34; } ] } Algorithm If you want to display the chat in a web page or in an iframe, here is what you should do:\n  get the Video ActivityPub object,\n  if there is no attachment key, stop.\n  loop through the attachment values (if attachment is not an array, just iterate on this single value)\n  search for an entry with rel === discussion, and with href using the https scheme (that begins with https://)\n  if found, open this href\n  If you want to open the chat room using the XMPP protocol:\n  get the Video ActivityPub object,\n  if there is no attachment key, stop.\n  loop through the attachment values (if attachment is not an array, just iterate on this single value)\n  search for an entry with rel === discussion, and with href using the xmpp scheme (that begins with xmpp://)\n  if found, open this xmpp uri with your client, or connect to the XMPP room at that address\n  Additional notes In the ActivityPub object, there is also a peertubeLiveChat entry. Don\u0026rsquo;t use the content of this entry. This is specific to the livechat plugin, and can be changed or removed in a near future. It is currently required for some endpoint discovery.\nUsing Podcast RSS feed The livechat plugin adds some data in Podcast RSS feeds under the \u0026lt;podcast:liveItem\u0026gt;, so that the chat can be discovered for live streams.\nThis requires Peertube \u0026gt;= 5.2\n The \u0026lt;podcast:chat\u0026gt; element is currently only supported for live streams.\n This follows the \u0026lt;podcast:chat\u0026gt; proposal.\nAt the time of the writing, this proposal is in draft status, and the livechat plugin is a Proof-of-concept. Until the proposal is adopted, the specification can change, and the livechat plugin will be adapted accordingly.\n Basically, the chat will be declared as tag under on the \u0026lt;podcast:liveItem\u0026gt; element.\nBy default, here is an example of what you will get:\n\u0026lt;podcast:liveItem status=\u0026#34;live\u0026#34; start=\u0026#34;2023-07-06T18:00:00.000Z\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The video title\u0026lt;/title\u0026gt; \u0026lt;guid isPermaLink=\u0026#34;false\u0026#34;\u0026gt;e32b4890-983b-4ce5-8b46-f2d6bc1d8819_2023-07-06T18:00:00.000Z\u0026lt;/guid\u0026gt; \u0026lt;link\u0026gt;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026lt;/link\u0026gt; \u0026lt;podcast:socialInteract uri=\u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; protocol=\u0026#34;activitypub\u0026#34; accountUrl=\u0026#34;https://yourinstance.tld/a/youraccount\u0026#34; /\u0026gt; \u0026lt;enclosure url=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; type=\u0026#34;application/x-mpegURL\u0026#34; /\u0026gt; \u0026lt;podcast:alternateEnclosure type=\u0026#34;application/x-mpegURL\u0026#34; lang=\u0026#34;en\u0026#34; title=\u0026#34;HLS\u0026#34; default=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;podcast:source uri=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; /\u0026gt; \u0026lt;/podcast:alternateEnclosure\u0026gt; \u0026lt;itunes:image href=\u0026#34;https://yourinstance.tld/lazy-static/previews/8df24108-6e70-4fc8-b1cc-f2db7fcdd535.jpg\u0026#34; /\u0026gt; \u0026lt;podcast:chat server=\u0026#34;yourinstance.tld\u0026#34; protocol=\u0026#34;xmpp\u0026#34; embedUrl=\u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; /\u0026gt; \u0026lt;/podcast:liveItem\u0026gt; In case the instance has activated the external XMPP clients connection feature:\n\u0026lt;podcast:liveItem status=\u0026#34;live\u0026#34; start=\u0026#34;2023-07-06T18:00:00.000Z\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The video title\u0026lt;/title\u0026gt; \u0026lt;guid isPermaLink=\u0026#34;false\u0026#34;\u0026gt;e32b4890-983b-4ce5-8b46-f2d6bc1d8819_2023-07-06T18:00:00.000Z\u0026lt;/guid\u0026gt; \u0026lt;link\u0026gt;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026lt;/link\u0026gt; \u0026lt;podcast:socialInteract uri=\u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; protocol=\u0026#34;activitypub\u0026#34; accountUrl=\u0026#34;https://yourinstance.tld/a/youraccount\u0026#34; /\u0026gt; \u0026lt;enclosure url=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; type=\u0026#34;application/x-mpegURL\u0026#34; /\u0026gt; \u0026lt;podcast:alternateEnclosure type=\u0026#34;application/x-mpegURL\u0026#34; lang=\u0026#34;en\u0026#34; title=\u0026#34;HLS\u0026#34; default=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;podcast:source uri=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; /\u0026gt; \u0026lt;/podcast:alternateEnclosure\u0026gt; \u0026lt;itunes:image href=\u0026#34;https://yourinstance.tld/lazy-static/previews/8df24108-6e70-4fc8-b1cc-f2db7fcdd535.jpg\u0026#34; /\u0026gt; \u0026lt;podcast:chat server=\u0026#34;yourinstance.tld\u0026#34; protocol=\u0026#34;xmpp\u0026#34; space=\u0026#34;8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld\u0026#34; embedUrl=\u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; /\u0026gt; \u0026lt;/podcast:liveItem\u0026gt; Algorithm If you want to display the chat in a web page or in an iframe, here is what you should do:\n  get the Podcast RSS feed for the channel,\n  if there is no \u0026lt;podcast:liveItem\u0026gt; element under the \u0026lt;channel\u0026gt;, stop.\n  find the \u0026lt;podcast:liveItem\u0026gt; you are looking for\n \u0026lt;podcast:socialInteract\u0026gt; can be used to cross-reference the items with ActivityPub    if there is no \u0026lt;podcast:chat\u0026gt; element under the \u0026lt;podcast:liveItem\u0026gt;, stop.\n  loop through the \u0026lt;podcast:chat\u0026gt; values (if \u0026lt;podcast:chat\u0026gt; is not an array, just iterate on this single value)\n there should only be one, but you should expect to handle several just in case    search for the first entry protocol === xmpp and an embedUrl attribute\n  if found, open this embedUrl\n  If you want to open the chat room using the XMPP protocol:\n  get the Podcast RSS feed for the channel,\n  if there is no \u0026lt;podcast:liveItem\u0026gt; element under the \u0026lt;channel\u0026gt;, stop.\n  find the \u0026lt;podcast:liveItem\u0026gt; you are looking for\n \u0026lt;podcast:socialInteract\u0026gt; can be used to cross-reference the items with ActivityPub    loop through the \u0026lt;podcast:chat\u0026gt; values (if \u0026lt;podcast:chat\u0026gt; is not an array, just iterate on this single value)\n there should only be one, but you should expect to handle several just in case    search for the first entry protocol === xmpp and a space attribute\n space should be an XMPP JID for a MUC    if found, open this XMPP JID with your client after converting it to a join URI, or connect to the XMPP room at that address\n  "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contributing/translate/","title":"Translate","tags":[],"description":"Translate the plugin","content":"You can contribute to this plugin translation. Translations are handled using the Weblate software, using Framasoft Weblate instance.\nNever modify directly files in the languages folder, this could lead to conflicts.\n How to   Create an account: https://weblate.framasoft.org/accounts/register/\n  Validate your email and follow the link sent\n  Create your password and setup your account\n  Go to the plugin project page: https://weblate.framasoft.org/projects/peertube-livechat/peertube-plugin-livechat/\n  Choose the locale you want to translate\n  Just translate missing sentences, or correct the ones that seems incorrect to you.\n  There might be some «very technical» strings. If you are not 100% sure of the meaning, or of your translation, you better not translate it, so it will display in english.\n Adding a new locale If you think there is a missing locale, please check first if it is handled in Peertube. If so, you can open an issue to ask for it.\nAdding new strings / use translations in the code If you are working on new features, and need new strings, you can create them directly in Weblate. The english version is mandatory. Start with it.\nEach string is linked to a key (for example use_chat). Choose an explicit key in english, lower case.\nIf you have to test new strings without waiting for a Weblate merge, you can modify languages/*.yml files, but avoid to commit these changes (to minimize conflict risks).\nUse translations in front-end code Before using a string in front-end, you need to declare a new constant in client/@types/global.d.ts. The constant name must:\n  start with the prefix \u0026ldquo;LOC_\u0026rdquo;\n  use the string key, upper cased\n  you just have to declare its type, not its value\n  For example, to use \u0026ldquo;use_chat\u0026rdquo;, you have to declare:\ndeclare const LOC_USE_CHAT: string The build-client.js script will read the client/@types/global.d.ts, search for such constants, and load their values from the languages files.\nNow, you can simply call peertubeHelpers.translate(LOC_USE_CHAT) in your code.\nUse translations in back-end code In theory, the only parts of the backend code where you need localization is the settings declaration and standardized data (ActivityPub, RSS, \u0026hellip;). Here we need to get english strings from the translation key.\nNote: you should never need another language translation from backend code. Localization must be done on front-end.\nThere is a lib/loc.ts module providing a loc() function. Just pass it the key to have the english string: loc('diagnostic')'.\nDocumentation translation The documentation translation is done using the corresponding Weblate component.\nThere is a specific \u0026ldquo;Hugo shortcodes\u0026rdquo; you can use to display an application string. Saying you want to display the name of the button \u0026ldquo;open_chat_new_window\u0026rdquo;, you can use this in the documentation markdown file:\n{{% livechat_label open_chat_new_window %}} You can also prevent a whole page from being translating by adding livechatnotranslation: true in the Yaml Font Matter section:\n--- title: \u0026#34;Third party\u0026#34; description: \u0026#34;Displaying the livechat with 3rd party software.\u0026#34; weight: 20 chapter: false livechatnotranslation: true --- Never translate a string in the livechat.en.pot file, it would be ignored. Instead, edit directly the markdown files.\nIf a string contains a link, you can change it for the correct link in the translated language. For example, for a link to this documentation, you can add the language code in the url.\nSome strings are block of code. Don\u0026rsquo;t translate code. But you can translate comments, or parameters if relevant.\nIf you are not sure, just don\u0026rsquo;t translate, and ask what to do.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/admin/","title":"Admin Dokumentation","tags":[],"description":"Plugin Peertube Livechat administration","content":"  Settings  Plugin Peertube Livechat settings\n   Fortgeschrittene Nutzung  Einige erweiterte Funktionen\n  XMPP clients  Allow connections using XMPP clients\n   Matterbridge benutzen  Matterbridge als Brücke zu anderen Chats nutzen\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contributing/feedback/","title":"Give your feedback","tags":[],"description":"Give your feedback","content":"Sie müssen keine Programmierkenntnisse haben, um zu diesem Plugin beizutragen! Andere Beiträge sind auch sehr wertvoll, darunter: Sie können die Software testen und Fehler melden, Sie können Feedback geben, Funktionen die Sie interessieren, Benutzeroberfläche, Design, \u0026hellip;\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/admin/advanced/xmpp_clients/","title":"XMPP clients","tags":[],"description":"Allow connections using XMPP clients","content":"This chat module is based on the XMPP protocol, also known as Jabber. It is therefore possible to connect to the chats using XMPP client software. This can for example be useful to facilitate moderation operations.\nFor the user documentation associated with these features, please refer to the user documentation page.\nEnabling these features requires configuration changes on the server, and on the DNS records. It is not possible to configure this only from the Peertube interface, and it requires some basic system some basic system admin skills.\n Login to your Peertube account This feature is not yet available, and will come in a future version of the plugin.\n Connection using an external XMPP account To enable this feature, you will need to set up your server and DNS records, so that XMPP clients can find and access the Prosody server that this plugin uses internally.\nImpressum des Plugins Start by going to the livechat plugin settings of your instance, then enable the setting \u0026ldquo;Enable connection to room using external XMPP accounts\u0026rdquo;. By checking this settings, new settings appear below.\nFirst of all, the \u0026ldquo;Prosody server to server port\u0026rdquo; field. This one defaults to 5269, which is the standard port for this service. You can however change to another port, if this is already in use on your server.\nNext, the field \u0026ldquo;Server to server network interfaces\u0026rdquo; field allows you to specify which network interfaces the server should listen on. The default value \u0026ldquo;*, ::\u0026rdquo; indicates to listen on all IP addresses. You can change these values, if you wish to listen on only certain IP addresses. The syntax is explained next to the setting.\nFor the \u0026ldquo;Certificate folder\u0026rdquo; setting, you can leave it empty. In this case, the plugin will automatically generate self-signed certificates. Some XMPP servers may refuse to connect, depending on their configuration. In this case, you can indicate here a path on the server, in which you must place certificates to be used by the module. It is up to you to generate and renew them. See bellow for more information.\nFirewall You must open the configured port (5269 by default) on your firewall.\nIf you are using Docker for your Peertube, you need to modify the docker-compose.yml file to open port 5269 of the peertube container, so that the outer world can connect to it.\nDNS You need to add a DNS record allowing remote servers to find the \u0026ldquo;room.your_instance.tld\u0026rdquo; component.\nThe easiest way to do this is to add an SRV record for the \u0026ldquo;room\u0026rdquo; subdomain:\n  record name: _xmpp-server._tcp.room.your_instance.tld. (replace «your_instance.tld» by your instance uri)\n  TTL: 3600\n  class: IN\n  SRV: 0\n  priority: 0\n  weight: 5\n  port: 5269 (adapt if your changed the default port)\n  target: your_instance.tld. (replace by your instance uri)\n  Be careful to keep the dot after \u0026ldquo;your_instance.tld\u0026rdquo;.\nUsing the dig command to check your record, you should get a result similar to this:\n$ dig +short _xmpp-server._tcp.room.videos.john-livingston.fr. SRV 0 5 5269 videos.john-livingston.fr. If you are not using the standard 5269 port, you must also add a SRV record for _xmpp-server._tcp.your_instance.tld. (same as above, just without the room. prefix). Of course, you can also add this record if you use the standard port. It will also work.\nUsing trusted certificates The self-signed certificates that this plugin uses by default can be rejected by some XMPP servers, for security reasons.\nIt is possible to use certificates validated by a certification authority. However, this requires advanced system administration knowledge. Indeed, due to the multitude of possible use cases, it is impossible to document all situations here. This documentation will therefore only explain the goal to be reached, and give an example which will only be suitable for a \u0026ldquo;basic\u0026rdquo; situation (manual installation of Peertube, using letsencrypt). If you are in another situation (Docker installation, certificates signed by another authority, etc\u0026hellip;), you will have to adapt this approach by yourself.\nBasic principle It is up to you to generate valid certificates for domains your_instance.tld and room.your_instance.tld. You can use any method supported by Prosody.\nYou must then place these certificates in a folder that will be accessible to the peertube user, and specify this folder in the plugin setting \u0026ldquo;Certificate folder\u0026rdquo;.\nIf you want to use the ProsodyCtl utility to import certificates, this utility is available (once Peertube is started) using the following command (adapting the path to your Peertube data folder, and replacing \u0026ldquo;xxx\u0026rdquo; with the arguments you wish to pass to prosodyctl): sudo -u peertube /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl xxx\n The plugin will check once a day to see if any files have been modified in this folder, and reload Prosody if necessary.\nMethod for the simple case We assume here that your Peertube installation is \u0026ldquo;classic\u0026rdquo; (no use of Docker), and that the certificates are generated by letsencrypt, using the certbot tool.\nFirst of all, we\u0026rsquo;ll have to create a certificate for the subdomain room.your_instance.tld : this is the uri of the MUC (XMPP chat rooms) component. Even if the connections are made on your_instance.tld, we will need a valid certificate for this subdomain.\nSo start by setting up a DNS entry for room.your_instance.tld, which points to your server. You can use a CNAME entry (or an A entry and a AAAA entry).\nNext, we\u0026rsquo;ll use nginx (already installed for your Peertube) to generate the certbot certificate. We will create a new site. In the file /etc/nginx/site-available/room.peertube, add:\nserver { listen 80; listen [::]:80; server_name room.your_instance.tld; location /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/certbot; } location / { return 301 https://your_instance.tld; } } Then enable the site:\nln -s /etc/nginx/sites-available/room.peertube /etc/nginx/sites-enabled/ systemc reload nginx Then we prepare the folder in which we will later import the certificates. We assume here that you already have the plugin active. We will create the following folder (if it doesn\u0026rsquo;t already exist), with the user peertube to make sure there are no permissions issues:\nsudo -u peertube mkdir /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/certs Now you have to configure this folder in the plugin settings, for the parameter \u0026ldquo;Certificate folders\u0026rdquo;. It\u0026rsquo;s important to do this now, otherwise the certificate import script will put the certificates in the wrong folder.\nWe will configure certbot to import the generated certificates into the Prosody folder. We can use the ProsodyCtl utility packaged in the plugin.\nNote: for it to be available, the plugin must have been started at least once.\nWe will create a file /etc/letsencrypt/renewal-hooks/deploy/prosody.sh containing:\n#!/bin/sh /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl \\  --root \\  --config /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  cert import \\  room.your_instance.tld your_instance.tld /etc/letsencrypt/live Then we ask to generate the certificate:\ncertbot -d room.videos.john-livingston.fr If certbot offers you several methods to generate the certificate, choose \u0026ldquo;nginx\u0026rdquo;.\nNormally you should now find the certificates in the configured folder.\nNote: the first time you do this, you will have to reload Prosody. The easiest way to do this is to restart Peertube.\nMethod for the Docker case This method works with the officially supported Docker guide from PeerTube.\nFirst, ensure you create a DNS entry for room.your_instance.tld, which points to your server. You can use a CNAME entry (or an A entry and a AAAA entry). This is necessary for Let\u0026rsquo;s Encrypt to validate the domain for certificate generation.\nEnter the directory where your docker-compose.yml file exists.\nOpen a shell in the certbot container:\ndocker exec -it certbot /bin/sh Run certbot:\ncertbot You will be presented with a series of prompts. Enter 2 for the authentication type:\nHow would you like to authenticate with the ACME CA? Select the appropriate number [1-2] then [enter] (press \u0026#39;c\u0026#39; to cancel): 2 Enter the domain name room.your_instance.tld:\nPlease enter the domain name(s) you would like on your certificate (comma and/or space separated) (Enter \u0026#39;c\u0026#39; to cancel): room.your_instance.tld Enter the directory where the PeerTube webserver serves requests for Let\u0026rsquo;s Encrypt, /var/www/certbot:\nInput the webroot for \u0026lt;room.your_instance.tld\u0026gt;: (Enter \u0026#39;c\u0026#39; to cancel): /var/www/certbot You should see output like the following:\nSuccessfully received certificate. Certificate is saved at: /etc/letsencrypt/live/room.your_instance.tld/fullchain.pem Key is saved at: /etc/letsencrypt/live/room.your_instance.tld/privkey.pem Run the below command inside the certbot container to give read access to the new certs and private keys to the peertube group. Note: This will also make the files readable to the group with id 999 on the host system. Check the groups on your system to assess this as a risk before running this command.\nchown -R root:999 /etc/letsencrypt/live; \\ chmod 750 /etc/letsencrypt/live; \\ chown -R root:999 /etc/letsencrypt/archive; \\ chmod 750 /etc/letsencrypt/archive; \\ find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} \\; Exit the certbot container:\nexit Modify your docker-compose.yml file, changing the entrypoint line under the certbot service to the following. This is the same as the above, but to be automatically executed after every certificate renewal.\nentrypoint: /bin/sh -c \u0026#34;trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; chown -R root:999 /etc/letsencrypt/live; chmod 750 /etc/letsencrypt/live; chown -R root:999 /etc/letsencrypt/archive; chmod 750 /etc/letsencrypt/archive; find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} +; sleep 12h \u0026amp; wait $${!}; done;\u0026#34; Continuing to modify docker-compose.yml, add the certbot certificate volume into the peertube container. It should look something like this:\nvolumes: - ./docker-volume/certbot/conf:/etc/letsencrypt Start your debugger server.\ndocker-compose down; docker-comopse up -d In the livechat plugin settings from your PeerTube administration settings, set the certificate directory to the following:\n/etc/letsencrypt/live Save the plugin settings and verify Prosody can see the certificates:\ndocker-compose exec -u peertube \\  peertube \\  /data/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun \\  prosodyctl \\  --config /data/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  check certs Troubleshooting If you can\u0026rsquo;t make it work, you can use the diagnostic tool (there is a button on top of the plugin settings page), and take a close look on the «Prosody check» section.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/user/","title":"Benutzer Dokumentation","tags":[],"description":"Plugin peertube-plugin-livechat Benutzer Dokumentation","content":"  Dokumentation  Plugin peertube-plugin-livechat Benutzer Dokumentation\n   OBS  Documentation to stream the chat content using OBS.\n   XMPP Clients  Connect to chat using a XMPP client\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contributing/develop/","title":"Entwickeln","tags":[],"description":"Entwickeln","content":"Sprechen Sie immer über die Funktionen, die Sie entwickeln wollen, indem Sie das Issue, das Ihr Problem behandelt, erstellen/finden und kommentieren bevor Sie mit der Arbeit daran beginnen und informieren Sie die Gemeinschaft darüber, dass Sie mit der Programmierung beginnen, indem Sie das Thema für sich beanspruchen.\nBitte benutzen Sie den main Zweig.\nUntil march 2023, contribution were made on the develop branch. This procedure is now deprecated.\n Voraussetzung für die Erstellung dieses Plugins:\n  Sie müssen npm installiert haben\n  Sie müssen python venv installiert haben (z.B. das Paket python3-venv auf Debian)\n  you must have build-essential installed\n  Um das Repository zu klonen:\n# Clone the repository. Dont forget the --recursive to clone submodules. git clone https://github.com/JohnXLivingston/peertube-plugin-livechat.git --recursive # Install NPM dependencies and build the module for the first time: npm install # Build the plugin after a modification: npm run build # If you have a fork from the repository, add it as remote (example): git remote add me git@github.com:MY_GITHUB_ACCOUNT/peertube-plugin-livechat.git # Create a local branch for you developments, and checkout it (example): git checkout my_development # Note: if an issue is associated, use fix_1234 as your branch name (where 1234 is the issue\u0026#39;s number) # To propose your modifications, push your branch to your repository (example): git push --set-upstream me my_development # Then go to your github repository with your web browser to propose the Pull Request (see additional instructions below) Sobald Sie bereit sind, Ihren Code zu zeigen und um Feedback zu bitten, reichen Sie einen Entwurf für einen Pull Request ein. Sobald Sie bereit für eine Codeüberprüfung vor der Zusammenführung sind, reichen Sie einen Pull Request ein. In jedem Fall sollten Sie Ihren PR mit dem Problem, die er behebt, verlinken, indem Sie die GitHub-Syntax verwenden: \u0026ldquo;fixes #issue_number\u0026rdquo;.\nDer Front-End-Code befindet sich im Ordner client, der Back-End-Code im Ordner server. Es gibt einige gemeinsam genutzte Codes im shared Ordner.\nFür allgemeine Anweisungen (Entwicklung von Plugins, Erstellung, Installation, \u0026hellip;), lesen Sie bitte die Peertube Dokumentation.\nSie können das Plugin mit zusätzlichen Debug-Funktionen bauen, indem Sie es einfach benutzen:\nNODE_ENV=dev npm run build ESBuild vs Typescript Dieses Plugin verwendet ESBuild für die Generierung von Frontend-Code, wie das offizielle peertube-plugin-quickstart Plugin. ESBuild kann mit Typescript umgehen, prüft aber keine Typen (siehe ESBuild-Dokumentation). Deshalb kompilieren wir Typescript zuerst mit der Option -noEmit, nur um die Typen zu überprüfen (check:client:ts in der package.json Datei). Dann, wenn alles in Ordnung ist, führen wir ESBuild aus, um das kompilierte Javascript zu erzeugen.\nDebug Mode There is a debug mode for this plugin, that shorten some delay. For example, some log files will rotate every two minutes, instead of once per day. This permit to test more easily certain actions, for which it could normally take hours or days to wait.\nTo enable this mode, you juste have to create the /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/debug_mode file (replacing /var/www/peertube/storage/ by the correct path on your installation).\nThe simple existence of this file is sufficient to trigger the debug mode. To make sure it\u0026rsquo;s taken into account, you can restart your Peertube instance.\nThis file can contain some JSON to enable more advanced options. To have a list of existing parameters, check server/lib/debug.ts. Restart Peertube after each content modification.\nDon\u0026rsquo;t enable this mode on a production server, neither on a public server. This could cause security issues.\n Restart Prosody When debug mode is enabled, you can restart Prosody using this API call: http://your_instance.tld/plugins/livechat/router/api/restart_prosody. This call don\u0026rsquo;t need any authentificaiton. It can be done from a command line, for example using curl http://your_instance.tld/plugins/livechat/router/api/restart_prosody.\nProsody debugger It is possible to connect the Prosody AppImage to a remote debugger using MobDebug.\nTo do so, you have to setup MobDebug in a folder that can be accessed by the peertube user. Then, add this in the debub_mode file:\n{ \u0026#34;debug_prosody\u0026#34;: { \u0026#34;debugger_path\u0026#34;: \u0026#34;/the_path_to_mobdebug/src\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;8172\u0026#34; } } host and port are optional. debugger_path must point to the folder where the MobDebug .lua file is.\nRestart Peertube.\nStart your debugger server.\nFor Prosody to connect to the debugger, call the API http://your_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. This call does not need any authentication. It can be done from a command line, for example with curl http://your_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. You can even configure your debug server to launch this request automatically.\nProsody will then restart, connecting to the debugger.\nQuick dev environment using Docker There is a tutorial, in french, on the le Peertube forum that explains how to quickly build a dev env using Docker.\nA repo was made out of it, check out pt-plugin-dev.\nNote: for an unknown reason, Prosody can\u0026rsquo;t resolve containers DNS address when using the lua-unbound library. There is a dirty hack in the plugin: just create a /data/plugins/data/peertube-plugin-livechat/no_lua_unbound file in your docker-volumes, then restart containers.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/user/xmpp_clients/","title":"XMPP Clients","tags":[],"description":"Connect to chat using a XMPP client","content":"This chat plugin relies on the XMPP protocol (also known as Jabber). It is therefore possible to connect to the chats using XMPP client software. This can be useful for example to facilitate moderation operations.\nThe features described on this page must be enabled and configured by your Peertube instance\u0026rsquo;s administrators. You may therefore not have access to them.\n Login to your Peertube account This feature is not yet available, and will come in a future version of the plugin.\n Connection using an external XMPP account If this feature is enabled on your instance, you can connect to Peertube chats using any XMPP account.\nTo get the address of the room you want to join, you can use the \u0026ldquo;share chat\u0026rdquo; button that is located above the chat:\nBy default, the share button is only visible to the owner of the video, and the admins/moderators of the instance. However, admins can decide to display this button for everyone.\n Then, choose \u0026ldquo;Connect using XMPP\u0026rdquo;:\nThen you just have to click on \u0026ldquo;open\u0026rdquo; or copy/paste the address of the chat room into your XMPP client (using the \u0026ldquo;join a room\u0026rdquo; feature).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/installation/upgrade_before_6.0.0/","title":"Aktualisieren von Versionen vor 6.0.0","tags":[],"description":"Wichtige Hinweise zum aktualisieren von älteren Versionen.","content":"WICHTIGER HINWEIS Seit Version v6.0.0 benötigt dieses Plugin keine andere Prosody-Installation.\nFalls Sie dieses Plugin vor dieser Version benutzt haben und Sie Prosody manuell installiert haben, können Sie Prosody sicher deinstallieren.\nFalls Sie ein eigenes Peertube Docker Paket genutzt haben, welches Prosody eingebettet hatte, können Sie zu den offiziellen Peertube Paketen zurück wechseln.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contributing/document/","title":"Dokumentation","tags":[],"description":"Dokumentieren Sie das Plugin, oder übersetzen Sie die Dokumentation.","content":"Allgemeine Informationen Informieren Sie die Community immer vor der Arbeit (indem Sie ein neues Problem erstellen oder ein bestehendes kommentieren). Damit soll vermieden werden, dass zwei Personen an der gleichen Sache arbeiten, und Konflikte zu verhindern.\nBitte benutzen Sie den main-Zweig.\nDer Quellcode der Dokumentation befindet sich im Ordner support/documentation/content.\nDie Dokumentation wird mit Hugo erstellt. Sie müssen es auf Ihrem Computer installieren, wenn Sie eine Vorschau Ihrer Arbeit sehen wollen.\nDas verwendete Thema ist hugo-theme-learn. Sie sollten dessen Dokumentation lesen, bevor Sie mit der Bearbeitung der Dokumentation beginnen.\nWhen a new plugin version is released, or when documentation is updated, plugin maintainers will merge the main branch to the documentation branch. This will trigger github and gitlab pipelines, and update published documentation.\nÜbersätzungen Die Hauptsprache ist Englisch (Code en).\nThe support/documentation/content/en folder contains only english documentation files.\nDocumentation is translated using Weblate (see the translation documentation). To do so, we use the po4a tool, as we will se later in this page.\nEine neue Sprache hinzufügen Kopieren und ändern Sie den Abschnitt [Languages.fr] in der Datei support/documentation/config.toml.\nIf the translations are not complete, it does not matter, english will be used for missing strings.\nVorschau Um eine Vorschau Ihrer Änderungen zu sehen, führen Sie einfach diesen Befehl aus:\nhugo serve -s support/documentation/ Öffnen Sie dann Ihren Browser und gehen Sie auf die Adresse http://localhost:1313/peertube-plugin-livechat/. Diese Seite wird bei jeder Änderung automatisch aktualisiert.\nUpdate localization files and generate documentation translations For now, you only have the english version. To update documentation strings, and generate translations, you have to run the doc-translate.sh script.\nTo do so, make sure you have po4a (version \u0026gt;= 0.66) installed on your computer.\nSome linux distro (like Debian Bullseye for example) have too old version of po4a. Please make sure to install a compatible version. If you are using Debian Bullseye for example, you can download the Bookworm po4a.deb file from https://packages.debian.org, and install it manually.\n To handle translations, just do:\nnpm run doc:translate You can then preview the result using hugo serve -s support/documentation/, and using the language selector.\nWrite documentation Just edit the english files in support/documentation/content/en.\nThen, before commiting, always run npm run doc:translate, so that changes in english files can be propagated to the support/documentation/po/livechat.en.pot file.\nYou can use the livechat_label short code to use application strings. See here: Documentation translation.\nIt is possible to prevent a file from beeing translating, using livechatnotranslation: true in the Yaml Font Matter section. See here: Documentation translation.\nPlease use the livechatnotranslation option for technical documentation. We don\u0026rsquo;t want technical documentation to be translated, to avoid issues because of a wrong translation.\nAvoid adding line breaks in middle of a sentence. But add a line break after each sentence in a paragraph. This is to facilitate the work for translators: so then can easily check that they don\u0026rsquo;t miss a sentence when translating a parapraph.\nWhat if I can\u0026rsquo;t use hugo and/or po4a? Just edit english markdown files, and specify that you can\u0026rsquo;t build translations when you make your Pull Request.\nVeröffentlichung Publishing the documentation is automatic, as soon as the changes are merged into the documentation branch.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/documentation/admin/advanced/matterbridge/","title":"Matterbridge benutzen","tags":[],"description":"Matterbridge als Brücke zu anderen Chats nutzen","content":"Hier ist ein Tutorial um Matterbridge mit diesem Plugin zu benutzen (nur auf englisch): https://gitlab.com/refrac/obs-matterbridge-overlay/-/blob/master/documentation/peertube.md\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contributing/","title":"Beitragen","tags":[],"description":"Beitragen","content":"Interessiert beizutragen? Super!\n Verhaltenskodex  Vereinbarung über Verhaltenskodex für Mitwirkende\n   Translate  Translate the plugin\n   Give your feedback  Give your feedback\n   Entwickeln  Entwickeln\n   Dokumentation  Dokumentieren Sie das Plugin, oder übersetzen Sie die Dokumentation.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/issues/","title":"Neue Funktionen / Fehler (Bugs)","tags":[],"description":"Neue Funktionen / Fehler (Bugs)","content":"Wenn Sie neue Funktionswünsche, Fehler (Bugs) oder Schwierigkeiten bei der Einrichtung des Plugins haben, können Sie den Github issue tracker verwenden.\nEinen Einblick in die Roadmap für kommende Funktionen finden Sie hier:\n  Github Project.\n  Meilensteine auf Github.\n  Wenn Sie ein Webdesigner oder ein ConverseJS/Prosody/XMPP-Experte sind und helfen wollen, dieses Plugin zu verbessern, sind Sie gerne willkommen.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/technical/","title":"Technical documentation","tags":[],"description":"Technical documentation","content":"  Third party  Displaying the livechat with 3rd party software.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/contact/","title":"Kontakt","tags":[],"description":"Kontakt","content":"Wenn Sie eine Frage haben oder über dieses Plugin sprechen möchten, können Sie diesem XMPP-Raum mit einem beliebigen Jabber-Client beitreten: plugin-livechat-support@room.im.yiny.org.\nWenn Sie das Projekt finanziell unterstützen möchten, können Sie mich per E-Mail unter git.[at].john-livingston.fr kontaktieren oder mein Liberapay-Profil ansehen.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/credits/","title":"Impressum","tags":[],"description":"Impressum des Plugins","content":"package.json, COPYRIGHT and LICENSE Dateien beinhalten die Lizenzinformationen für dieses Programm und seiner Abhängigkeiten.\nDas Plugin wird von John Livingston betrieben.\nDank an David Revoy für seine Arbeit an dem Peertube Maskottchen, Sepia. Das Charakterdesign steht unter CC-By-Lizenz, und die SVG-Dateien, die zur Erstellung einiger Logos und Avatare in diesem Plugin verwendet werden, sind GPLv3.0.\nVielen Dank an Framasoftfür die Ermöglichung von Peertube, für die finanzielle Unterstützung, und für das Weblate.\nVielen Dank an ritimo für die finanzielle Unterstützung.\nVielen Dank an Code Lutin und Rétribution Copie Publique für die finanzielle Unterstützung.\nVielen Dank an NlNet und die NGI0 Entrust fund für die finanzielle Unterstützung.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/","title":"","tags":[],"description":"","content":"PeerTube plugin livechat You can use the language selector in the left menu to view this documentation in different languages. Some translations are missing or incomplete. In this case, you\u0026rsquo;ll see the English version of the text.\n Bevor Sie auf eine Hauptversion aktualisieren, lesen Sie bitte die Versionshinweise und die Liste der wichtigsten Änderungen : CHANGELOG.\n  Einführung  Einführung\n   Dokumentation  Plugin Dokumentation\n  Installationsanleitung  Plugin peertube-plugin-livechat Installationsanleitung\n  Bekannte Probleme: CPU Kompatibilität  Derzeit funktioniert das Plugin standartmäßig nur für x86_64 CPU Architekturen. Hier sind einige Anleitungen für andere CPU Architekturen.\n Aktualisieren von Versionen vor 6.0.0  Wichtige Hinweise zum aktualisieren von älteren Versionen.\n  Admin Dokumentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n Fortgeschrittene Nutzung  Einige erweiterte Funktionen\n  Benutzer Dokumentation  Plugin peertube-plugin-livechat Benutzer Dokumentation\n  Dokumentation  Plugin peertube-plugin-livechat Benutzer Dokumentation\n OBS  Documentation to stream the chat content using OBS.\n XMPP Clients  Connect to chat using a XMPP client\n   Beitragen  Beitragen\n  Verhaltenskodex  Vereinbarung über Verhaltenskodex für Mitwirkende\n   Translate  Translate the plugin\n   Give your feedback  Give your feedback\n   Entwickeln  Entwickeln\n   Dokumentation  Dokumentieren Sie das Plugin, oder übersetzen Sie die Dokumentation.\n    Neue Funktionen / Fehler (Bugs)  Neue Funktionen / Fehler (Bugs)\n   Technical documentation  Technical documentation\n  Third party  Displaying the livechat with 3rd party software.\n    Kontakt  Kontakt\n   Impressum  Impressum des Plugins\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/de/tags/","title":"Tags","tags":[],"description":"","content":""}]