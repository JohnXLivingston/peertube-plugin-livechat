[{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/intro/","title":"Introduction","tags":[],"description":"Introduction","content":"Ce plugin pour Peertube permet d\u0026rsquo;intégrer un système de «chat» (clavardage) à coté des vidéos.\nVous pouvez utiliser le sélecteur de langue dans le menu de gauche pour afficher cette documentation dans différentes langues.\n               Voir une démo.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/codeofconduct/","title":"Code de conduite","tags":[],"description":"Convention de Code de conduite Contributeur⋅rices","content":"Notre engagement En tant que membres, contributeur·trice·s et dirigeant·e·s, nous nous engageons à faire de la participation à notre communauté une expérience sans harcèlement, quel que soit l\u0026rsquo;âge, la taille corporelle, le handicap visible ou invisible, l\u0026rsquo;appartenance ethnique, les caractéristiques sexuelles, l\u0026rsquo;identité et l\u0026rsquo;expression de genre, le niveau d\u0026rsquo;expérience, l\u0026rsquo;éducation, le statut socio-économique, la nationalité, l\u0026rsquo;apparence personnelle, la race, la religion, ou l\u0026rsquo;identité et l\u0026rsquo;orientation sexuelle.\nNous nous engageons à agir et interagir de manière à contribuer à une communauté ouverte, accueillante, diversifiée, inclusive et saine.\nNos critères Exemples de comportements qui contribuent à créer un environnement positif :\n Faire preuve d\u0026rsquo;empathie et de bienveillance envers les autres Être respectueux des opinions, points de vue et expériences divergents Donner et recevoir avec grâce les critiques constructives Assumer ses responsabilités et s\u0026rsquo;excuser auprès des personnes affectées par nos erreurs et apprendre de ces expériences Se concentrer sur ce qui est le meilleur non pas uniquement pour nous en tant qu\u0026rsquo;individu, mais aussi pour l\u0026rsquo;ensemble de la communauté  Exemples de comportements inacceptables :\n L\u0026rsquo;utilisation de langage ou d\u0026rsquo;images sexualisés et d\u0026rsquo;attentions ou d\u0026rsquo;avances sexuelles de toute nature Le trolling, les commentaires insultants ou désobligeants et les attaques personnelles ou d\u0026rsquo;ordre politique Le harcèlement en public ou en privé La publication d\u0026rsquo;informations privées d\u0026rsquo;autrui, telle qu\u0026rsquo;une adresse postale ou une adresse électronique, sans leur autorisation explicite Toute autre conduite qui pourrait raisonnablement être considérée comme inappropriée dans un cadre professionnel  Responsabilités d\u0026rsquo;application Les dirigeant·e·s de la communauté sont chargé·e·s de clarifier et de faire respecter nos normes de comportements acceptables et prendront des mesures correctives appropriées et équitables en réponse à tout comportement qu\u0026rsquo;ils ou elles jugent inapproprié, menaçant, offensant ou nuisible.\nLes dirigeant·e·s de la communauté ont le droit et la responsabilité de supprimer, modifier ou rejeter les commentaires, les contributions, le code, les modifications de wikis, les rapports d\u0026rsquo;incidents ou de bogues et autres contributions qui ne sont pas alignés sur ce code de conduite, et communiqueront les raisons des décisions de modération le cas échéant.\nPortée d\u0026rsquo;application Ce code de conduite s\u0026rsquo;applique à la fois au sein des espaces du projet ainsi que dans les espaces publics lorsqu\u0026rsquo;un individu représente officiellement le projet ou sa communauté. Font parties des exemples de représentation d\u0026rsquo;un projet ou d\u0026rsquo;une communauté l\u0026rsquo;utilisation d\u0026rsquo;une adresse électronique officielle, la publication sur les réseaux sociaux à l\u0026rsquo;aide d\u0026rsquo;un compte officiel ou le fait d\u0026rsquo;agir en tant que représentant·e désigné·e lors d\u0026rsquo;un événement en ligne ou hors-ligne.\nApplication Les cas de comportements abusifs, harcelants ou tout autre comportement inacceptables peuvent être signalés aux dirigeant·e·s de la communauté responsables de l\u0026rsquo;application du code de conduite à git.[at].john-livingston.fr. Toutes les plaintes seront examinées et feront l\u0026rsquo;objet d\u0026rsquo;une enquête rapide et équitable.\nTou·te·s les dirigeant·e·s de la communauté sont tenu·e·s de respecter la vie privée et la sécurité des personnes ayant signalé un incident.\nDirectives d\u0026rsquo;application Les dirigeant·e·s de communauté suivront ces directives d\u0026rsquo;application sur l\u0026rsquo;impact communautaire afin de déterminer les conséquences de toute action qu\u0026rsquo;ils jugent contraire au présent code de conduite :\n1. Correction Impact communautaire : utilisation d\u0026rsquo;un langage inapproprié ou tout autre comportement jugé non professionnel ou indésirable dans la communauté.\nConséquence : un avertissement écrit et privé de la part des dirigeant·e·s de la communauté, clarifiant la nature du non-respect et expliquant pourquoi le comportement était inapproprié. Des excuses publiques peuvent être demandées.\n2. Avertissement Impact communautaire : un non-respect par un seul incident ou une série d\u0026rsquo;actions.\nConséquence : un avertissement avec des conséquences dû à la poursuite du comportement. Aucune interaction avec les personnes concernées, y compris l\u0026rsquo;interaction non sollicitée avec celles et ceux qui sont chargé·e·s de l\u0026rsquo;application de ce code de conduite, pendant une période déterminée. Cela comprend le fait d\u0026rsquo;éviter les interactions dans les espaces communautaires ainsi que sur les canaux externes comme les médias sociaux. Le non-respect de ces conditions peut entraîner un bannissement temporaire ou permanent.\n3. Bannissement temporaire Impact communautaire : un non-respect grave des normes communautaires, notamment un comportement inapproprié soutenu.\nConséquence : un bannissement temporaire de toutes formes d\u0026rsquo;interactions ou de communications avec la communauté pendant une période déterminée. Aucune interaction publique ou privée avec les personnes concernées, y compris les interactions non sollicitées avec celles et ceux qui appliquent ce code de conduite, n\u0026rsquo;est autorisée pendant cette période. Le non-respect de ces conditions peut entraîner un bannissement permanent.\n4. Bannissement permanent Impact communautaire : démontrer un schéma récurrent de non-respect des normes de la communauté y compris un comportement inapproprié soutenu, le harcèlement d\u0026rsquo;un individu ainsi que l\u0026rsquo;agression ou le dénigrement de catégories d\u0026rsquo;individus.\nConséquence : un bannissement permanent de toutes formes d\u0026rsquo;interactions publiques au sein de la communauté.\nAttributions Ce code de conduite est adapté du Contributor Covenant, version 2.0, disponible à https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nLes Directives d\u0026rsquo;application ont été inspirées par le Code of conduct enforcement ladder de Mozilla.\nPour obtenir des réponses aux questions courantes sur ce code de conduite, consultez la FAQ à https://www.contributor-covenant.org/faq. Les traductions sont disponibles sur https://www.contributor-covenant.org/translations.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/","title":"Documentation","tags":[],"description":"Documentation du plugin","content":"  Documentation d\u0026#39;installation  Installation du plugin peertube-plugin-livechat\n  Problème connu: compatibilité CPU  Pour l\u0026#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d\u0026#39;autres architectures CPU.\n   Mise à jour depuis une version antérieure à 6.0.0  Notes importantes pour la mise à jour depuis une ancienne version du plugin.\n    Admin documentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n   Advanced usage  Some advanced features\n  Clients XMPP  Autoriser la connexion en utilisant des clients XMPP.\n Using Matterbridge  Using Matterbridge to bridge with other chats\n   Documentation utilisateur⋅rice  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n  Moderation  Plugin peertube-plugin-livechat moderation\n   OBS  Documentation to stream the chat content using OBS.\n   Clients XMPP  Se connecter au tchat avec un client XMPP\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/installation/","title":"Documentation d&#39;installation","tags":[],"description":"Installation du plugin peertube-plugin-livechat","content":" Avant de mettre à jour le plugin vers une nouvelle version majeure, merci de lire les notes de version, et la liste des éventuelless modifications non rétro-compatibles : CHANGELOG.\n Pour installer ou mettre à jour ce plugin, utilisez simplement l\u0026rsquo;interface web d\u0026rsquo;administration de votre Peertube.\n Vous trouverez ci-dessous d\u0026rsquo;autres instructions :\n Problème connu: compatibilité CPU  Pour l\u0026#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d\u0026#39;autres architectures CPU.\n   Mise à jour depuis une version antérieure à 6.0.0  Notes importantes pour la mise à jour depuis une ancienne version du plugin.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/moderation/","title":"Moderation","tags":[],"description":"Plugin peertube-plugin-livechat moderation","content":" This page is not yet translated in your language, please refer to the english version. You can switch to it by using the language selector in the left menu.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/obs/","title":"OBS","tags":[],"description":"Documentation to stream the chat content using OBS.","content":" This page is not yet translated in your language, please refer to the english version. You can switch to it by using the language selector in the left menu.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/installation/cpu_compatibility/","title":"Problème connu: compatibilité CPU","tags":[],"description":"Pour l&#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d&#39;autres architectures CPU.","content":"L\u0026rsquo;AppImage Prosody inclue dans le plugin ne fonctionne que sur des CPU x86_64 et arm64. Elle n\u0026rsquo;est pas compatible avec d\u0026rsquo;autres architectures CPU.\nPour utiliser le plugin, vous allez devoir installer manuellement Prosody sur votre serveur (voir plus bas).\nNote: la version de Prosody devrait être supérieure ou égale à 0.12.0. Si vous utilisez une version plus ancienne, il pourrait y avoir des bugs sur la fédération du tchat, et d\u0026rsquo;autres comportements inattendus.\nUne fois cela fait, vous aurez à cocher le paramètre Use system Prosody du plugin.\nInstallation autres que Docker Pour les installations standard, vous avez juste à installer le paquet prosody officiellement disponible pour votre distribution linux.\nPar exemple, sur Debian/Ubuntu:\nsudo apt install prosody Vous pouvez alors désactiver le service qui démarre automatiquement quand vous installé le paquet (le plugin va lancer son propre processus Prosody, et n\u0026rsquo;a pas besoin que le service tourne sur le serveur). Par exemple, sur Debian/Ubuntu (et les autres distributions se basant sur Systemd):\nsudo systemctl disable prosody \u0026amp;\u0026amp; sudo systemctl stop prosody Attention: ne désactivez pas Prosody s\u0026rsquo;il est utilisé par un autre service sur votre serveur, par exemple pour Jitsi.\nDocker Vous allez devoir générer une image de Peertube qui inclu Prosody dans le même conteneur que Peertube. Je sais que ce n\u0026rsquo;est pas la façon de faire standard avec Docker, mais gardez en tête que ceci est une solution de contournement temporaire.\nPour générer cette image, merci de vous référer à la documentation de Docker. Le fichier Docker pour générer l\u0026rsquo;image devrait être:\nFROMchocobozzz/peertube:production-bullseyeRUN apt -y update \u0026amp;\u0026amp; apt install -y prosody \u0026amp;\u0026amp; apt -y cleanYunohost Vous avez à désactiver metronome (le serveur XMPP utilisé par Yunohost), et installerprosody.\nCeci est déjà fait par l\u0026rsquo;application Yunohost Peertube, étant donné que c\u0026rsquo;était un pré-requis pour les version du plugin antérieures à la v6.0.0.\nMais il se pourrait que ce soit retiré de l\u0026rsquo;application Yunohost Peertube dans un futur proche (pour éviter les inconvénients de cette méthode). Je dois discuter avec l\u0026rsquo;équipe Yunohost, pour décider de la bonne façon de faire pour minimiser les inconvénients et maximiser la compatibilité.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/settings/","title":"Settings","tags":[],"description":"Plugin Peertube Livechat settings","content":" This page is not yet translated in your language, please refer to the english version. You can switch to it by using the language selector in the left menu.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/advanced/","title":"Advanced usage","tags":[],"description":"Some advanced features","content":"  Clients XMPP  Autoriser la connexion en utilisant des clients XMPP.\n   Using Matterbridge  Using Matterbridge to bridge with other chats\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/translate/","title":"Traduction","tags":[],"description":"Traduire le plugin","content":"Vous pouvez nous aider à traduire ce plugin Peertube en créant ou modifiant des fichiers de traduction dans le dossier languages.\nPour le moment, les traductions se font directement dans le dépôt git. Plus tard en 2023, des outils de traduction en ligne seront mis en place (probablement Weblate). Le processus de traduction en sera plus simple.\n Merci de travailler sur la branche main, et de faire vos pull request sur cette branche.\n Jusqu\u0026rsquo;à mars 2023, il fallait contribuer sur la branche develop. Cette procédure est désormais obsolète.\n Chaîne applicatives standard Si la langue dans laquelle vous souhaitez traduire n\u0026rsquo;existe pas encore, créez un fichier code.json dans le dossier languages, où code est le code langue. Le code langue doit être dans le même format que les codes langues de Peertube (voir la documentation Peertube). Ensuite, ajoutez le fichier de langue dans le fichier package.json, sous la clé translations.\nLes traductions sont sous la forme suivante dans le fichier de langue :\n les fichiers sont au format JSON les clés JSON sont le texte en anglais (voir les clés existantes dans le fichier de traduction français, qui fait référence) la valeur JSON est la traduction NB: il n\u0026rsquo;y a pas de fichier de traduction pour l\u0026rsquo;anglais (c\u0026rsquo;est la façon de fonctionner de Peertube)  Traduction des paramètres du plugin Dans la page des paramètres du plugin, il y a des chaînes de texte plus compliquées. Elles peuvent contenir du code HTML, des retours à la ligne, \u0026hellip; Il est donc compliqué de les maintenir dans des fichiers JSON.\nC\u0026rsquo;est pourquoi le processus de traduction est différent pour les traductions de paramètres.\nLes traductions des paramètres sont définies dans des fichiers YAML. Elles n\u0026rsquo;utilisent pas l\u0026rsquo;anglais comme clé, mais des clés standardisées, comme par exemple list_rooms_label.\nAu contraire des chaînes applicatives standard, il y a aussi un fichier de configuration pour l\u0026rsquo;anglais.\nCes fichiers sont dans le dossier languages/settings. Si le fichier de la langue qui vous intéresse n\u0026rsquo;existe pas, vous n\u0026rsquo;avez qu\u0026rsquo;à créer un fichier nommé code.yml où code est le code de la langue (voir plus haut).\nEnsuite, vous pouvez copier les clés du fichier HTML de référence languages/settings/en.yml, et traduire les chaînes de texte.\nSi vous ne voulez pas traduire une chaîne, vous pouvez l\u0026rsquo;ignorer, ou utiliser null ou ~ comme valeur.\nIl peut y avoir des chaînes «assez techniques». Si vous n\u0026rsquo;êtes pas sûr⋅e à 100% du sens, ou de la traduction, il vaut mieux ne pas la traduire du tout ; ainsi la version anglaise s\u0026rsquo;affichera.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/","title":"Admin documentation","tags":[],"description":"Plugin Peertube Livechat administration","content":"  Settings  Plugin Peertube Livechat settings\n   Advanced usage  Some advanced features\n  Clients XMPP  Autoriser la connexion en utilisant des clients XMPP.\n   Using Matterbridge  Using Matterbridge to bridge with other chats\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/advanced/xmpp_clients/","title":"Clients XMPP","tags":[],"description":"Autoriser la connexion en utilisant des clients XMPP.","content":"Ce module de tchat repose sur le protocole XMPP, aussi connu sous le nom de Jabber. Il est donc possible de se connecter aux tchats en utilisant des logiciels clients XMPP. Cela peut par exemple être utile pour faciliter les opérations de modération.\nPour la documentation utilisateur⋅rice associé à ces fonctionnalités, veuillez vous référer à la page de documentation utilisateur⋅rice.\nL\u0026rsquo;activation de ces fonctionnalités demande des changements de configuration sur le serveur, et sur les enregistrements DNS. Il n\u0026rsquo;est pas possible de les activer uniquement depuis l\u0026rsquo;interface de Peertube, et cela demande d\u0026rsquo;avoir quelques compétences basiques d\u0026rsquo;admin système.\n Connexion à votre compte Peertube Cette fonctionnalité n\u0026rsquo;est pas encore disponible, et viendra dans une prochaine version du plugin.\n Connexion en utilisant un compte XMPP externe Pour activer cette fonctionnalité, il va falloir paraméter votre serveur et vos enregistrements DNS, de sorte que les clients XMPP puissent trouver et accéder au serveur Prosody que ce plugin utilise en interne.\nParamètres du plugin Commencez par aller dans les paramètres du plugin livechat de votre instance, puis activez le paramètre «Autoriser les connexions aux salons via des comptes XMPP externes». En cochant celui-ci, de nouveaux champs apparaissent en dessous.\nTout d\u0026rsquo;abord, le champs «Port Prosody serveur vers serveur». Celui-ci prend par défaut la valeur 5269, qui est le port standard pour ce service. Vous pouvez toutefois changer pour un autre port, si celui-ci est déjà utilisé sur votre serveur.\nEnsuite, le champs «Interfaces réseau pour les connexions serveur vers serveur» vous permet d\u0026rsquo;indiquer sur quelles interfaces réseau le serveur doit écouter. La valeur par défaut «*, ::» indique d\u0026rsquo;écouter sur toutes les addresses IP. Vous pouvez changer ces valeurs, si vous souhaiter n\u0026rsquo;écouter que sur certaines IP. La syntaxe est expliquée à coté du champs.\nPour le champs «Dossiers des certificats», vous pouvez le laisser vide. Dans ce cas là, le plugin va générer automatiquement des certificats auto-signés. Il se pourrait que certains serveurs XMPP refusent de se connecter, cela dépendant de leur paramétrage. Dans ce cas, vous pouvez indiquer ici un chemin sur le serveur, dans lequel vous placerez des certificats à utiliser par le module. Charge à vous de les générer et de les renouveller. Voir plus loin pour une explication plus détaillée.\nPare-feu Vous devez ouvrir le port configuré (5269 par défaut) sur votre pare-feu.\nSi vous utilisez Docker pour votre Peertube, il faut modifier le fichier docker-compose.yml pour ouvrir le port 5269 du conteneur peertube au monde extérieur.\nDNS Vous devez ajouter un enregistrement DNS permettant aux serveurs distant de trouver le composant «room.votre_instance.tld».\nLe plus simple pour cela est d\u0026rsquo;ajouter un enregistrement SRV pour le sous-domaine «room»:\n nom de l\u0026rsquo;enregistrement: _xmpp-server._tcp.room.votre_instance.tld. (remplacez «votre_instance.tld» par la valeur adéquate) TTL: 3600 class: IN SRV: 0 priority: 0 weight: 5 port: 5269 (adaptez si vous avez changé le port) target: votre_instance.tld. (remplacez par la valeur adéquate)  Attention à bien conserver le point après «votre_instance.tld».\nEn utilisant la commande dig pour vérifier votre enregistrement, vous devriez obtenir un résultat similaire à celui-ci:\n$ dig +short _xmpp-server._tcp.room.videos.john-livingston.fr. SRV 0 5 5269 videos.john-livingston.fr. Si vous n\u0026rsquo;utilisez pas le port standard 5269, vous devez ajouter un autre enregistrement SRV pour _xmpp-server._tcp.votre_instance.tld. (pareil que précédemment, mais en enlevant le préfixe room.). Bien sûr, vous pouvez l\u0026rsquo;ajouter même si vous utilisez le port standard. Cela fonctionnera également.\nUtilisation de certificats de confiance Les certificats auto-signés que le plugin utilise par défaut peuvent ne pas convenir à tous les serveurs distants. En effet, ceux-ci peuvent les refuser pour raison de sécurité.\nIl est possible d\u0026rsquo;utiliser des certificats validés par une autorité de certification. Cependant cela demande des connaissances d\u0026rsquo;administration système avancées. En effet, devant la multitude de cas possibles, il est impossible de documenter ici toutes les situations. La présente documentation va donc se contenter de vous expliquer le but à atteindre, et donner un example qui ne conviendra qu\u0026rsquo;à une situation «basique» (installation manuelle de Peertube, avec utilisation de letsencrypt). Si vous êtes dans une autre situation (installation Docker, certificats signés par une autre autorité, etc\u0026hellip;), il vous faudra adapter la démarche.\nPrincipe de base À vous de générer des certificats valides pour les domaines votre_instance.tld et room.votre_instance.tld. Vous pouvez utiliser n\u0026rsquo;importe quelle méthode supportées par Prosody.\nVous devez ensuite placer ces certificats dans un dossier qui sera accessible au user peertube, puis indiquer ce dossier dans le paramètre du plugin «Dossiers des certificats».\nSi vous voulez utiliser l\u0026rsquo;utilitaire ProsodyCtl (pour importer des certificats letsencrypts, générer des certificats, etc\u0026hellip;), cet utilitaire est disponible (une fois Peertube démarré) en utilisant la commande qui suit (en adaptant le chemin vers votre dossier data Peertube, et en remplaçant «xxx» par les arguments que vous souhaitez passer à prosodyctl) : sudo -u peertube /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl xxx\n Le plugin va vérifier une fois par jour si des fichiers ont été modifiés dans ce dossier, et recharger Prosody le cas échéant.\nMéthode dans le cas simple Nous supposons ici que votre installation de Peertube est «classique» (pas d\u0026rsquo;utilisation de Docker), et que les certificats sont générés par letsencrypt, en utilisant l\u0026rsquo;outils certbot.\nTout d\u0026rsquo;abord, on va devoir créer un certificat pour le sous-domain room.votre_instance.tld : c\u0026rsquo;est l\u0026rsquo;uri du composant MUC (salons de discussion XMPP). Même si les connections se font sur votre_instance.tld, il va nous falloir un certificat valide pour ce sous-domaine.\nCommencez donc par paraméter une entrée DNS pour room.votre_instance.tld, qui pointe sur votre serveur. Vous pouvez tout à faire faire une entrée CNAME (ou une entrée A et une entrée AAAA).\nEnsuite, nous allons utiliser nginx (déjà installé pour votre Peertube) pour générer le certificat certbot. On va créer un nouveau site. Dans le fichier /etc/nginx/site-available/room.peertube, ajoutez:\nserver { listen 80; listen [::]:80; server_name room.votre_instance.tld; location /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/certbot; } location / { return 301 https://votre_instance.tld; } } Ensuite on active ce site:\nln -s /etc/nginx/sites-available/room.peertube /etc/nginx/sites-enabled/ systemc reload nginx On prépare ensuite le dossier dans lequel on va plus tard importer les certificats. On suppose ici que vous avez déjà le plugin actif. On va créer le dossier suivant (s\u0026rsquo;il n\u0026rsquo;existe pas déjà), avec le user peertube pour être sûr qu\u0026rsquo;il n\u0026rsquo;y a pas de problème de droits:\nsudo -u peertube mkdir /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/certs Il faut maintenant configurer ce dossier dans les paramètres du plugin, pour «Dossiers des certificats». C\u0026rsquo;est important de le faire avant la suite, sinon le script d\u0026rsquo;import des certificats va les placer au mauvais endroit.\nOn va configurer certbot pour qu\u0026rsquo;il importe les certificats générés dans le dossier de Prosody. On va pouvoir utiliser l\u0026rsquo;utilistaire ProsodyCtl packagé dans le plugin.\nNote: pour qu\u0026rsquo;il soit disponible, il faut que le plugin ai démarré au moins une fois.\nOn va créer un fichier /etc/letsencrypt/renewal-hooks/deploy/prosody.sh contenant:\n#!/bin/sh /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl \\  --root \\  --config /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  cert import \\  room.votre_instance.tld votre_instance.tld /etc/letsencrypt/live Puis on demande à générer le certificat :\ncertbot -d room.videos.john-livingston.fr Si certbot vous propose plusieurs méthodes pour générer le certificat, choisissez «nginx».\nNormalement vous devriez maintenant trouver les certificats dans le dossier configuré.\nNote: la première fois que vous faites tout ça, il va falloir recharger Prosody. Le plus simple pour cela est de redémarrer Peertube.\nMéthode en cas d\u0026rsquo;utilisation de Docker Merci de vous référer à la documentation en anglais.\nEn cas de problème Si cela ne fonctionne pas, vous pouvez utiliser l\u0026rsquo;outils de diagnostic (un bouton se trouve en haut de la page des paramètres du plugin), et notamment regarder ce que dit la section «Prosody check».\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/feedback/","title":"Donnez vos retours","tags":[],"description":"Donnez vos retours","content":"Vous n\u0026rsquo;avez pas besoin de coder pour commencer à contribuer à ce plugin ! Les autres formes de contributions sont également précieuses, parmis lesquelles : vous pouvez tester le plugin et remonter les bugs que vous rencontrez, partager vos retours d\u0026rsquo;expérience, proposer des fonctionnalités qui vous intéressent, remonter vos remarques sur l\u0026rsquo;interface, le design, etc.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/xmpp_clients/","title":"Clients XMPP","tags":[],"description":"Se connecter au tchat avec un client XMPP","content":"Ce module de tchat repose sur le protocole XMPP, aussi connu sous le nom de Jabber. Il est donc possible de se connecter aux tchats en utilisant des logiciels clients XMPP. Cela peut par exemple être utile pour faciliter les opérations de modération.\nLes fonctions décrites dans cette page doivent être activées et configurées par les administrateur⋅rices de votre instance Peertube. Il se peut donc que vous n\u0026rsquo;y ayez pas accès.\n Connexion à votre compte Peertube Cette fonctionnalité n\u0026rsquo;est pas encore disponible, et viendra dans une prochaine version du plugin.\n Connexion en utilisant un compte XMPP externe Si cette fonctionnalité est activée sur votre instance, vous pouvez vous connecter aux tchats Peertube en utilisant un compte XMPP quelconque.\nPour obtenir l\u0026rsquo;adresse du salon à rejoindre, vous pouvez utiliser la fenêtre de «partage» du tchat, dont le bouton est situé au dessus du tchat:\nPar défaut, le bouton de partage n\u0026rsquo;est visible que pour le ou la propriétaire de la vidéo, et les admins/modérateur⋅rices de l\u0026rsquo;instance. Toutefois, les admins peuvent décider d\u0026rsquo;afficher ce bouton pour tout le monde.\n Ensuite, dans la modale qui s\u0026rsquo;affiche, choississez «Connexion avec un client XMPP»:\nIl vous suffit ensuite, soit de cliquer sur «ouvrir», soit de copier/coller l\u0026rsquo;adresse du salon dans votre client XMPP (en utilisant la fonctionnalité «rejoindre un salon»).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/","title":"Documentation utilisateur⋅rice","tags":[],"description":"Documentation utilisateur⋅rice du plugin peertube-plugin-livechat","content":"  Moderation  Plugin peertube-plugin-livechat moderation\n   OBS  Documentation to stream the chat content using OBS.\n   Clients XMPP  Se connecter au tchat avec un client XMPP\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/develop/","title":"Développer","tags":[],"description":"Développer et proposer des modifications de code","content":"Toujours annoncer les fonctionnalités sur lesquelles vous voulez travailler en créant un ticket ou en commentant un ticket existant, avant de commencer à travailler dessus. Et annoncez clairement à la communauté que vous commencez à travailler dessus. Ceci afin d\u0026rsquo;éviter que plusieurs personnes travaillent sur la même chose et entrent en conflit.\nLes Pull Request sont à faire sur la branche main.\nJusqu\u0026rsquo;à mars 2023, il fallait contribuer sur la branche develop. Cette procédure est désormais obsolète.\n Pré-requis pour compiler le plugin:\n vous devez avoir installé npm vous devez avoir installé les venv python (paquet python3-venv sous Debian par exemple)  Pour clôner le dépot :\n# Cloner le dépot git clone https://github.com/JohnXLivingston/peertube-plugin-livechat.git # Passer sur la branche main si ce n\u0026#39;est pas déjà le cas git checkout main # Initialiser les sous-modules. Cette commande est à refaire si jamais la version d\u0026#39;un l\u0026#39;un des sous-module change. git submodule update --init --recursive # Installer les dépendances NPM et compiler le plugin pour la première fois : npm install # Compiler le plugin après une modification : npm run build # Si vous avez un fork du dépot, ajoutez le en remote (exemple) : git remote add me git@github.com:MON_COMPTE_GITHUB/peertube-plugin-livechat.git # Créez une branche locale pour vos développements et placez vous dessus (exemple) : git checkout mon_developpement # NB: si un ticket y est associé, utilisé le nom fix_1234 (où 1234 est le numéro du ticket) # Pour proposer vos modifications, poussez votre branche sur votre dépot (exemple) : git push --set-upstream me mon_developpement # Rendez-vous ensuite sur votre dépot github avec votre navigateur web pour proposer la Pull Request (voir les instructions complémentaires ci-dessous) Quand vous êtes prêt⋅e à montrer votre code pour avoir un retour, soumettez une Pull Request draft. Quand vous êtes prêt⋅e pour une relecture de code avant merge, soumettez une Pull Request. Dans tous les cas, merci de lier votre Pull Request au ticket concerné en utilisant la syntax de GitHub : «fixes #issue_number».\nLe code du front-end est dans le dossier client. Le code backend dans server. Il y a du code partagé entre les deux dans shared.\nPour les instructions génériques concernant le développement de plugins (building, installation, \u0026hellip;), merci de vous référer à la documentation Peertube.\nVous pouvez builder le plugin avec des infos de debug supplémentaires en utilisant :\nNODE_ENV=dev npm run build ESBuild vs Typescript Ce plugin utilise ESBuild pour compiler le code front-end, comme le plugin peertube-plugin-quickstart officiel. ESBuild peut gérer Typescript, mais ne vérifie pas les types (voir la documentation ESBuild). C\u0026rsquo;est pourquoi on compile d\u0026rsquo;abord Typescript avec l\u0026rsquo;option -noEmit, juste pour vérifier les types (check:client:ts dans le fichier package.json). Ensuite, si tout est ok, on lance ESBuild pour générer le javascript compilé.\nDebug Mode Il existe un mode de debug pour le plugin, qui va raccourcir le délais de certaines actions. Par exemple, il va faire tourner les journaux toutes les deux minutes, au lieu de tous les jours. Cela permet de tester plus facilement certaines actions, pour lesquelles il faudrait normalement attendre des heures ou des jours.\nPour activer ce mode, il suffit de créer un fichier /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/debug_mode (en adaptant /var/www/peertube/storage/ à votre installation le cas échéant).\nLa simple existance de ce fichier suffit à déclencher le mode debug. Pour être sûr qu\u0026rsquo;il est pris en compte, vous pouvez redémarrer votre instance Peertube.\nCe fichier peut également contenir du JSON qui pourra activer d\u0026rsquo;autres options. Pour en avoir la liste, vous pouvez regarder le code de server/lib/debug.ts. Redémarrez Peertube après chaque modification de son contenu.\nN\u0026rsquo;activer jamais ce mode sur un serveur de production, ni même sur un serveur public. Cela pourrait poser des problèmes de sécurité.\n Redémarrer Prosody Pour redémarrer Prosody quand le mode debug est activé, vous pouvez appeler l\u0026rsquo;API http://votre_instance.tld/plugins/livechat/router/api/restart_prosody. Cet appel n\u0026rsquo;a pas besoin d\u0026rsquo;authentification. Il peut se faire depuis une ligne de commande, par exemple avec curl http://votre_instance.tld/plugins/livechat/router/api/restart_prosody.\nProsody debugger Il est possible de connecter l\u0026rsquo;AppImage Prosody à un debugger distant en utilisant MobDebug.\nPour cela, placer MobDebug dans un dossier accessible par le user peertube. Ensuite, ajouter cela dans le fichier debug_mode du plugin:\n{ \u0026#34;debug_prosody\u0026#34;: { \u0026#34;debugger_path\u0026#34;: \u0026#34;/the_path_to_mobdebug/src\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;8172\u0026#34; } } host et port sont optionnels. debugger_path doit pointer vers le dossier où se trouve le fichier .lua de MobDebug.\nRedémarrer Peertube.\nLancer votre serveur de debug.\nPour que Prosody se connecte au debugger, appelez l\u0026rsquo;API http://votre_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. Cet appel n\u0026rsquo;a pas besoin d\u0026rsquo;authentification. Il peut se faire depuis une ligne de commande, par exemple avec curl http://votre_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. Vous pouvez même configurer votre serveur de debuggage pour lancer cette commande automatiquement.\nProsody va alors redémarrer en se connectant au debugger.\nEnvironnement de développement rapide via Docker Un tutoriel est disponible sur le forum Peertube pour expliquer comment monter rapidement un environnement de développement en utilisant Docker.\nUn dépot a été crée sur la base de ce tutoriel: https://codeberg.org/mose/pt-plugin-dev\nNote: pour une raison obscure, Prosody n\u0026rsquo;arrive pas à résoudre les adresses DNS des conteneurs quand la librairie lua-unbound est utilisée. Pour contourner cela, il y a un «dirty hack»: il suffit de créer une fichier /data/plugins/data/peertube-plugin-livechat/no_lua_unbound dans vos docker-volumes, puis de les redémarrer.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/document/","title":"Documenter","tags":[],"description":"Documenter le plugin, ou traduire la documentation.","content":"Généralités Toujours vous annoncer avant de commencer à travailler (en créant un ticket ou en commentant un ticket existant). Ceci afin d\u0026rsquo;éviter que plusieurs personnes travaillent sur la même chose et entrent en conflit.\nLe travail de documentation se fait sur la branche main.\nLe code source de la documentation se trouve dans le dossier support/documentation/content du dépot de code.\nLa documentation est générée via l\u0026rsquo;outils Hugo. Celui-ci doit être installé sur votre machine pour pouvoir prévisualiser la documentation.\nLe thème utilisé est hugo-theme-learn. Il est recommandé d\u0026rsquo;en lire la documentation avant de commencer.\nQuand une version du plugin est publiée, ou quand la documentation est mise à jour, les mainteneur⋅euses du plugin fusionnerons la branche main dans la branche documentation, ce qui aura pour effet de déclencher les pipelines github et gitlab pour mettre à jour les versions publiées.\nTraductions La langue principale est l\u0026rsquo;anglais (code en).\nLes différentes traductions d\u0026rsquo;un même fichier sont côte-à-côte dans l\u0026rsquo;arborescence, et sont identifiées par un code langue dans l\u0026rsquo;extension du nom de fichier. Exemple: _index.fr.md est la tranduction française de _index.en.md.\nAttention, un fichier de traduction manquant n\u0026rsquo;apparaitra pas dans les menus du site générés. On veillera donc toujours à créer les fichiers pour toutes les langues, même si la traduction n\u0026rsquo;est pas encore disponible.\nPour cela, il y a un script doc-generate-missing-translations.sh à la racine du dépot. Quand on ajoute un nouveau fichier, il suffit de créer la version anglaise, puis de lancer ce script. Il va créer toutes les traductions manquantes, on y mettant un message type invitant l\u0026rsquo;utilisateur⋅rice à lire la version anglaise.\nAjout d\u0026rsquo;une nouvelle langue Dans le fichier support/documentation/config.toml, inspirez vous de la section [Languages.fr] pour déclarer la nouvelle langue.\nEnsuite, lancez le script doc-generate-missing-translations.sh à la racine du dépot. Celui-ci crééra tous les fichiers manquants pour la nouvelle langue.\nIl ne vous reste plus qu\u0026rsquo;à les traduire. Si les traductions ne sont pas complètes, ce n\u0026rsquo;est pas grave, les fichiers générés afficherons un message proposant de changer de langue.\nPrévisualiser Pour prévisualiser vos modification, il suffit de lancer:\nhugo serve -s support/documentation/ Puis d\u0026rsquo;ouvrir votre navigateur à l\u0026rsquo;adresse http://localhost:1313/peertube-plugin-livechat/. Cette page se raffraichira automatiquement à chaque modification.\nPublication La publication de la documentation est automatique, dès que les modifications sont fusionnées dans la branche main.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/installation/upgrade_before_6.0.0/","title":"Mise à jour depuis une version antérieure à 6.0.0","tags":[],"description":"Notes importantes pour la mise à jour depuis une ancienne version du plugin.","content":"IMPORTANT NOTE Depuis la version v6.0.0, ce plugin ne nécessite plus l\u0026rsquo;installation de Prosody.\nSi vous utilisiez ce plugin avant, et que vous aviez installé Prosody manuellement, vous pouvez le désinstaller en tout sécurité.\nSi vous utilisiez l\u0026rsquo;image docker spéciale de Peertube (qui incluais Prosody), vous pouvez basculer sur l\u0026rsquo;image officielle de Peertube.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/advanced/matterbridge/","title":"Using Matterbridge","tags":[],"description":"Using Matterbridge to bridge with other chats","content":" This page is not yet translated in your language, please refer to the english version. You can switch to it by using the language selector in the left menu.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/","title":"Contribuer","tags":[],"description":"Contribuer","content":"Intéressé⋅e pour contribuer ? Super !\n Code de conduite  Convention de Code de conduite Contributeur⋅rices\n   Traduction  Traduire le plugin\n   Donnez vos retours  Donnez vos retours\n   Développer  Développer et proposer des modifications de code\n   Documenter  Documenter le plugin, ou traduire la documentation.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/issues/","title":"Évolutions / Bugs","tags":[],"description":"Évolutions / suivi des bugs","content":"Si vous avez des demandes de nouvelles fonctionnalités, des bugs, ou des difficultés à installer et utiliser le plugin, vous pouvez utiliser l\u0026rsquo;outils Github issue tracker. Si possible, merci d\u0026rsquo;y écrire en anglais ; mais le français sera accepté.\nPour avoir un apperçu de la feuille de routes pour les fonctionnalités à venir, vous pouvez vous référer à :\n ce projet github. les jalons sur github.  Si vous êtes webdesigner ou avez une expertise en ConverseJS/Prosody/XMPP et souhaitez participer à l\u0026rsquo;évolution de ce plugin, n\u0026rsquo;hésitez pas à me contacter.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contact/","title":"Me contacter","tags":[],"description":"Contacter l&#39;auteur","content":"Si vous avez des questions ou souhaitez parler de ce plugin, vous pouvez rejoindre ce salon XMPP avec n\u0026rsquo;importe quel client Jabber : plugin-livechat-support@room.im.yiny.org.\nSi vous souhaitez supporter le projet financièrement, vous pouvez me contacter par mail à l\u0026rsquo;adresse git.[arobase].john-livingston.fr, ou passer par mon profil Liberapay.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/credits/","title":"Crédits","tags":[],"description":"Crédits pour le plugin","content":"Les fichiers package.json, COPYRIGHT et LICENSE contiennent les informations sur la licence du présent logiciel (en anglais).\nLe plugin est maintenu par John Livingston.\nMerci à David Revoy pour son travail sur la mascotte de Peertube, Sepia. Le character design est en licence CC-By, et les fichiers SVG utilisés pour créer certains logos et avatars en GPLv3.0.\nMerci à Framasoft pour avoir rendu Peertube possible, et pour le support financier.\nMerci à ritimo pour le support financier.\nMerci à Code Lutin et à la Rétribution Copie Publique pour le support financier.\nMerci à NlNet et au fond NGI0 Entrust pour le support financier.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/","title":"","tags":[],"description":"","content":"PeerTube plugin livechat Avant de mettre à jour le plugin vers une nouvelle version majeure, merci de lire les notes de version, et la liste des éventuelless modifications non rétro-compatibles : CHANGELOG.\n  Introduction  Introduction\n   Documentation  Documentation du plugin\n  Documentation d\u0026#39;installation  Installation du plugin peertube-plugin-livechat\n  Problème connu: compatibilité CPU  Pour l\u0026#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d\u0026#39;autres architectures CPU.\n Mise à jour depuis une version antérieure à 6.0.0  Notes importantes pour la mise à jour depuis une ancienne version du plugin.\n  Admin documentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n Advanced usage  Some advanced features\n  Documentation utilisateur⋅rice  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n  Moderation  Plugin peertube-plugin-livechat moderation\n OBS  Documentation to stream the chat content using OBS.\n Clients XMPP  Se connecter au tchat avec un client XMPP\n   Contribuer  Contribuer\n  Code de conduite  Convention de Code de conduite Contributeur⋅rices\n   Traduction  Traduire le plugin\n   Donnez vos retours  Donnez vos retours\n   Développer  Développer et proposer des modifications de code\n   Documenter  Documenter le plugin, ou traduire la documentation.\n    Évolutions / Bugs  Évolutions / suivi des bugs\n   Me contacter  Contacter l\u0026#39;auteur\n   Crédits  Crédits pour le plugin\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/tags/","title":"Tags","tags":[],"description":"","content":""}]