[{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/intro/","title":"Introduction","tags":[],"description":"Introduction","content":"Ce plugin pour Peertube permet d\u0026rsquo;intégrer un système de «chat» (clavardage) à coté des vidéos.\nVous pouvez utiliser le sélecteur de langue dans le menu de gauche pour afficher cette documentation dans différentes langues. Certaines traductions sont manquantes ou incomplètes. Dans ce cas, vous verrez la version anglaise du texte.\n               Voir une démo.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/codeofconduct/","title":"Code de conduite","tags":[],"description":"Convention de Code de conduite Contributeur⋅rices","content":" Ce code de conduite est adapté du Contributor Covenant, version 2.1, disponible à l\u0026rsquo;adresse https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Les traductions sont disponibles à l\u0026rsquo;adresse https://www.contributor-covenant.org/translations. Les cas de comportements abusifs, harcelants ou tout autre comportement inacceptables peuvent être signalés aux dirigeant·e·s de la communauté responsables de l’application du code de conduite à git.[at].john-livingston.fr.\n Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\n Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community  Examples of unacceptable behavior include:\n The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by mail at git.[at].john-livingston.fr. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla\u0026rsquo;s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/","title":"Documentation","tags":[],"description":"Documentation du plugin","content":"  Documentation d\u0026#39;installation  Installation du plugin peertube-plugin-livechat\n  Problème connu: compatibilité CPU  Pour l\u0026#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d\u0026#39;autres architectures CPU.\n   Mise à jour depuis une version antérieure à 6.0.0  Notes importantes pour la mise à jour depuis une ancienne version du plugin.\n    Admin documentation  Plugin Peertube Livechat administration\n  Paramètres du plugin  Plugin Peertube Livechat administration\n   Usage avancé  Quelques fonctionnalités avancées\n  Clients XMPP  Autoriser la connexion en utilisant des clients XMPP\n Utiliser Matterbridge  Utiliser Matterbridge pour faire un pont vers d\u0026#39;autres tchats\n   Documentation utilisateur⋅rice  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n  Modération  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n   OBS  Documentation pour diffuser le contenu du tchat à l\u0026#39;aide d\u0026#39;OBS.\n   Clients XMPP  Se connecter au tchat avec un client XMPP\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/installation/","title":"Documentation d&#39;installation","tags":[],"description":"Installation du plugin peertube-plugin-livechat","content":" Avant de mettre à jour le plugin vers une nouvelle version majeure, merci de lire les notes de version, et la liste des éventuelless modifications non rétro-compatibles : CHANGELOG.\n Pour installer ou mettre à jour ce plugin, utilisez simplement l\u0026rsquo;interface web d\u0026rsquo;administration de votre Peertube.\n Vous trouverez ci-dessous d\u0026rsquo;autres instructions :\n Problème connu: compatibilité CPU  Pour l\u0026#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d\u0026#39;autres architectures CPU.\n   Mise à jour depuis une version antérieure à 6.0.0  Notes importantes pour la mise à jour depuis une ancienne version du plugin.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/moderation/","title":"Modération","tags":[],"description":"Documentation utilisateur⋅rice du plugin peertube-plugin-livechat","content":"Vous pouvez accéder aux paramètres de la salle et aux outils de modération en ouvrant le tchat dans une nouvelle fenêtre, et en utilisant le menu déroulant en haut à droite.\nVous pouvez lister toutes les salles de discussion existantes : dans l\u0026rsquo;écran des paramètres du plugin, il y a un bouton \u0026ldquo;Lister les salles\u0026rdquo;.\nVous pouvez supprimer d\u0026rsquo;anciennes salles : rejoignez la salle, et utilisez le menu en haut pour détruire la salle.\nRemarques Tous les modérateur⋅rics et administrateur⋅rices de l\u0026rsquo;instance seront propriétaires des salons de discussion créés. Si la vidéo est locale (et ne provient pas d\u0026rsquo;un Peertube distant), le⋅a propriétaire de la vidéo sera l\u0026rsquo;administrateur⋅rice de l\u0026rsquo;espace de discussion.\nVous pouvez utiliser les commandes de modération ConverseJS pour modérer le salon. Lorsque vous ouvrez la salle de discussion en plein écran, un menu avec des commandes dédiées s\u0026rsquo;affiche en haut à droite.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/obs/","title":"OBS","tags":[],"description":"Documentation pour diffuser le contenu du tchat à l&#39;aide d&#39;OBS.","content":"Overlay OBS Si vous utilisez OBS pour la diffusion en direct, vous pouvez facilement inclure le tchat dans votre flux vidéo.\nVous pouvez utiliser la fonction \u0026ldquo;partager le lien du tchat\u0026rdquo; pour générer une URL vers votre tchat. Le bouton devrait se trouver près du tchat si vous êtes le⋅a propriétaire de la vidéo (à moins qu\u0026rsquo;il n\u0026rsquo;ait été désactivé par les administrateur⋅rices de votre serveur).\nCochez la case «lecture seule» dans la fenêtre modale. Utilisez ensuite ce lien comme «source navigateur web» dans OBS.\nVous pouvez utiliser l\u0026rsquo;option \u0026ldquo;Fond transparent\u0026rdquo; pour obtenir un fond transparent dans OBS. Si vous souhaitez personnaliser la transparence de l\u0026rsquo;arrière-plan, vous pouvez ajouter ce CSS dans les paramètres de la source de votre navigateur OBS :\n:root { --livechat-transparent: rgba(255 255 255 / 90%) !important; } Remarque : vous pouvez personnaliser les couleurs. Ce n\u0026rsquo;est pas encore documenté, mais vous pouvez essayer ceci : dans la fenêtre modale, cochez \u0026ldquo;utiliser les couleurs actuelles du thème\u0026rdquo;, puis essayez de modifier manuellement les valeurs de couleur dans l\u0026rsquo;URL. Vous devez utiliser des valeurs de couleur CSS valides, et elles doivent être correctement encodées dans l\u0026rsquo;URL.\nMélanger plusieurs tchats dans votre flux en direct Vous pouvez utiliser l\u0026rsquo;extension social_stream browser extension pour mélanger plusieurs sources de tchat (Peertube, Twitch, Youtube, Facebook, \u0026hellip;) et inclure leurs contenus dans votre flux en direct. La compatibilité avec ce plugin a été ajoutée dans les versions récentes.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/settings/","title":"Paramètres du plugin","tags":[],"description":"Plugin Peertube Livechat administration","content":"Cette section décrit la page de configuration du plugin.\nLister les salons de tchat existants  Lorsque vous appuyez sur le bouton \u0026ldquo;Lister les salles\u0026rdquo;, toutes les salles de chat existantes sont listées. Vous pouvez alors les trouver et les modérer.\nFédération Les paramètres suivants concernent la fédération avec d\u0026rsquo;autres instances Peertube et d\u0026rsquo;autres logiciels du fediverse.\nNe pas afficher les tchats distants  En cochant ce paramètre, votre instance n'affichera jamais les tchats sur les vidéos distantes. Ne pas publier les informations de tchats  En cochant ce paramètre, votre instance ne publiera pas les informations de tchat sur le fédivers. Les instances Peertube distantes ne sauront pas qu'un tchat est associé aux vidéos.\nAttention : si vous aviez déjà des tchats en cours, il est possible que les informations aient déjà été publiées. Il faudra attendre la prochaine mise à jour des vidéos pour que les informations soient dépubliées. De même, si vous désactivé ce paramètre, il faudra attendre que les vidéos soient mises à jour pour à nouveau publier les informations. Cette mise à jour intervient entre autre quand un live reprend ou s'arrête.\nAttention : ce paramètre ne joue que sur la publication d'informations via le protocole ActivityPub. Il n'empêchera pas une application distante de détecter autrement la présence de tchat, et de tenter de s'y connecter. Comportement en chat Type de salon  Vous pouvez choisir d'avoir des salons séparés pour chaque vidéo, ou de les grouper par chaîne. Ouvrir automatiquement le tchat  Quand on regarde une vidéo, le tchat va automatiquement s'ouvrir. Montrer le bouton «ouvrir dans une nouvelle fenêtre»  Il y aura un bouton pour ouvrir le tchat dans une nouvelle fenêtre. Montrer le bouton «partager le lien du salon»  Cette fonctionnalité permet d\u0026rsquo;activer une fenêtre modale \u0026ldquo;partager le lien du chat\u0026rdquo;. Avec cette modale, vous pouvez générer des URL pour rejoindre le chat. Le chat peut être personnalisé (mode lecture seule, utilisation du thème actuel, \u0026hellip;).\nVous pouvez par exemple générer une URL en lecture seule et l\u0026rsquo;utiliser dans OBS pour intégrer le chat dans votre flux en direct !\nCe paramètre vous permet de choisir qui peut accéder à cette fenêtre modale.\nLes utilisateur⋅rices peuvent activer le tchat pour leurs directs  Si coché, il y aura pour tous les directs une case à cocher dans les propriétés qui permettra d'activer/désactiver le tchat. Le⋅a propriétaire de la vidéo pourra activer le tchat en ligne.\nActiver le tchat pour tous les directs  Si coché, il y aura un tchat pour tous les directs. Activer le tchat pour toutes les vidéos «non-direct»  Activer le tchat pour toutes les vidéos «non-direct» Activer le tchat pour ces vidéos  Activer le tchat pour ces vidéos Masque les tchats pour les utilisateur⋅rices anonymes  Si coché, les utilisteur⋅rices non connecté⋅es ne verront pas les tchats. Cette fonctionnalité est encore expérimentale. Si vous l'avez activée, il est hautement recommandé d'également cocher «Ne pas publier les informations de tchats». Sinon certains outils tierces ne pourraient tenter d'ouvrir le tchat, et auraient des résultats imprédictibles. Avant de mettre à jour le plugin vers une nouvelle version majeure, merci de lire les notes de version, et la liste des éventuelless modifications non rétro-compatibles : CHANGELOG.\nPersonnalisation de l\u0026rsquo;apparence Thème ConverseJS  Vous pouvez choisir le thème à utiliser pour ConverseJS :\n  Thème Peertube : il s\u0026rsquo;agit d\u0026rsquo;un thème spécial, conçu spécialement pour l\u0026rsquo;intégration dans Peertube.\n  Thème ConverseJS par défaut : c\u0026rsquo;est le thème ConverseJS par défaut.\n  Thème ConverseJS concord : il s\u0026rsquo;agit d\u0026rsquo;un thème fourni par ConverseJS.\n  Détection automatique des couleurs  Essaie de détecter automatiquement les couleurs du thème courant de l'utilisateur⋅rice.\nQuand ce paramètre est activé, le plugin essaie de détecter automatiquement les couleurs à appliquer au thème du tchat.\nSi cela ne fonctionne pas correctement pour certains de vos thèmes Peertube, vous pouvez désactiver cette option. Vous pouvez rapporter les bugs sur le gestionnaire de ticket . N'oubliez pas de préciser pour quel thème cela ne fonctionne pas. Attribut de style de l'iframe du tchat  Styles additionnels à appliquer sur l'iframe du tchat.\nExemple : height:400px; Paramètres avancés du tchat Utiliser le serveur Prosody installé sur le système  Le plugin est livré avec une AppImage qui est utilisée pour exécuter le serveur XMPP Prosody. Si cet AppImage ne fonctionne pas, vous pouvez vous rabattre sur la version de Prosody qui est packagé pour votre serveur. Installez simplement le paquet prosody.\nCe paramètre ne devrait être utilisé que si le plugin est cassé et en attente d\u0026rsquo;un correctif.\nDésactiver Websocket  Avec Peertube \u0026gt;= 5.0.0, ce plugin va essayer d'utiliser Websocket pour les connexions au tchat. Si le navigateur de l'utilisateur⋅rice ou sa connexion n'est pas compatible, le navigateur va automatiquement passer au protocole BOSH. Mais, dans de rare cas, cela pourrait échouer. Par exemple si vous avez un reverse proxy devant votre Peertube qui ne permettrait pas les connexions Websocket. Dans ce cas, vous pouvez cocher cette option pour désactiver les connexions Websocket. Port Prosody  Le port qui va être utilisé par le serveur Prosody.\nChangez-le si ce port est déjà utilisé sur votre serveur.\nVous pouvez fermer ce port sur votre pare-feu, il ne sera pas accédé par le monde extérieur.\nNote : cela pourrait changer dans un futur proche, car il est prévu d'ajouter des paramètres pour autoriser les connexions externes. Url Peertube pour les appels d'API  Merci de ne pas toucher à ce paramètre si vous ne savez pas ce que vous faites.\nDans de rare cas, le serveur Prosody ne peut appeler l'API de Peertube en utilisant l'url publique. Vous pouvez utiliser ce paramètre pour personnaliser l'url que les modules Prosody utiliseront pour les API Peertube (par exemple, en mettant «http://localhost:9000» ou «http://127.0.0.1:9000»). Enregistrer les salons par défaut  Si coché, le contenu des salons sera enregistré par défaut. Quand un⋅e utilisateur⋅rice rejoint un salon, iel pourra voir ce qui a été dit avant.\nÀ noter qu'il est toujours possible d'activer/désactiver cette fonctionnalité pour un salon spécifique, en changeant ses paramètres. Expiration des journaux de salon  Vous pouvez choisir combien de temps le contenu des salons est gardé sur le serveur. La valeur peut être :  60 : le contenu sera sauvegardé pour 60 secondes. Vous pouvez remplacer 60 par n'importe quelle valeur entière. 1d : le contenu sera sauvegardé pour 1 jour. Vous pouvez remplacer 1 par n'importe quelle valeur entière. 1w : le contenu sera sauvegardé pour 1 semaine. Vous pouvez remplacer 1 par n'importe quelle valeur entière. 1m : le contenu sera sauvegardé pour 1 mois. Vous pouvez remplacer 1 par n'importe quelle valeur entière. 1y : le contenu sera sauvegardé pour 1 année. Vous pouvez remplacer 1 par n'importe quelle valeur entière. never : le contenu ne sera jamais effacé.  Autoriser les connexions aux salons via des comptes XMPP externes  En activant cette option, il sera possible de se connecter aux salons en utilisant des comptes XMPP externes via des clients XMPP.\nAttention, activer cette option peut demander une configuration au niveau du serveur et des enregistrements DNS. Pour en savoir plus, merci de vous référer à la documentation: Autoriser les connexions avec des comptes XMPP externes.  Port Prosody serveur vers serveur  Le port à utiliser pour les connexions XMPP s2s (server to server).\nIl est recommandé d'utiliser le port standard 5269. Sinon vous devrez configurer un enregistrement DNS spécifique . Interfaces réseau pour les connexions serveur vers serveur  Les interfaces réseau sur lequelles écouter pour les connexions s2s (server to server).\nUne liste d'IP séparées par des virgules (les espaces seront retirés). On pourra utiliser «*» pour écouter sur toutes les IPv4, et «::» pour toutes les IPv6.\nExemples de configuration possible:  *, :: * 127.0.0.1, ::1 172.18.0.42  Dossiers des certificats  Si ce champ est vide, le plugin va générer et utiliser des certificats auto-signés.\nSi vous voulez utiliser d'autres certificats, vous avez juste à spécifier ici le dossier où Prosody peut les trouver. Note : l'utilisateur «peertube» doit avoir un accès en lecture à ce dossier. Activer les connexions client vers serveur  Autoriser les clients XMPP à se connecter au serveur Prosody.\nCette option seule n'autorise que les connexions de clients sur le localhost. Ce paramètre permet aux clients XMPP de se connecter au serveur Prosody intégré. Pour l\u0026rsquo;instant, cette option n\u0026rsquo;autorise que les connexions des clients sur le localhost.\nPar exemple, cette option peut permettre à une instance Matterbridge (une fois qu\u0026rsquo;elle pourra utiliser une connexion anonyme) sur la même machine de faire le lien entre votre tchat et d\u0026rsquo;autres services tels qu\u0026rsquo;une salle Matrix.\nPort Prosody client vers serveur  Le port à utiliser pour les connexions XMPP c2s (client to server).\nLes clients XMPP devront utiliser ce port pour se connecter.\nChangez ce port si le port est déjà utilisé sur votre serveur.\nPour l'instant, vous pouvez garder ce port fermé sur votre pare-feu, il sera inaccessible depuis l'extérieur (Prosody n'écoute que le localhost).\nNote : cela pourrait prochainement changer, car il est prévu d'ajouter une fonction permettant d'activer les connexions externes. Activer les composants externes personnalisés Prosody  Ce paramètre permet aux composants externes XMPP de se connecter au serveur. Pour l\u0026rsquo;instant, cette option n\u0026rsquo;autorise que les connexions des composants sur localhost.\nCette fonction pourrait être utilisée pour connecter des ponts ou des robots.\nPlus d\u0026rsquo;informations sur les composants externes de Prosody [ici] (https://prosody.im/doc/components).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/installation/cpu_compatibility/","title":"Problème connu: compatibilité CPU","tags":[],"description":"Pour l&#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d&#39;autres architectures CPU.","content":"L\u0026rsquo;AppImage Prosody inclue dans le plugin ne fonctionne que sur des CPU x86_64 et arm64. Elle n\u0026rsquo;est pas compatible avec d\u0026rsquo;autres architectures CPU.\nPour utiliser le plugin, vous allez devoir installer manuellement Prosody sur votre serveur (voir plus bas).\nNote: la version de Prosody devrait être supérieure ou égale à 0.12.0. Si vous utilisez une version plus ancienne, il pourrait y avoir des bugs sur la fédération du tchat, et d\u0026rsquo;autres comportements inattendus.\nUne fois cela fait, vous aurez à cocher le paramètre Use system Prosody du plugin.\nInstallation autres que Docker Pour les installations standard, vous avez juste à installer le paquet prosody officiellement disponible pour votre distribution linux.\nPar exemple, sur Debian/Ubuntu:\nsudo apt install prosody Vous pouvez alors désactiver le service qui démarre automatiquement quand vous installé le paquet (le plugin va lancer son propre processus Prosody, et n\u0026rsquo;a pas besoin que le service tourne sur le serveur). Par exemple, sur Debian/Ubuntu (et les autres distributions se basant sur Systemd):\nsudo systemctl disable prosody \u0026amp;\u0026amp; sudo systemctl stop prosody Attention: ne désactivez pas Prosody s\u0026rsquo;il est utilisé par un autre service sur votre serveur, par exemple pour Jitsi.\nDocker Vous allez devoir générer une image de Peertube qui inclu Prosody dans le même conteneur que Peertube. Je sais que ce n\u0026rsquo;est pas la façon de faire standard avec Docker, mais gardez en tête que ceci est une solution de contournement temporaire.\nPour générer cette image, merci de vous référer à la documentation de Docker. Le fichier Docker pour générer l\u0026rsquo;image devrait être:\nFROMchocobozzz/peertube:production-bullseyeRUN apt -y update \u0026amp;\u0026amp; apt install -y prosody \u0026amp;\u0026amp; apt -y cleanYunohost Vous avez à désactiver metronome (le serveur XMPP utilisé par Yunohost), et installerprosody.\nCeci est déjà fait par l\u0026rsquo;application Yunohost Peertube, étant donné que c\u0026rsquo;était un pré-requis pour les version du plugin antérieures à la v6.0.0.\nMais il se pourrait que ce soit retiré de l\u0026rsquo;application Yunohost Peertube dans un futur proche (pour éviter les inconvénients de cette méthode). Je dois discuter avec l\u0026rsquo;équipe Yunohost, pour décider de la bonne façon de faire pour minimiser les inconvénients et maximiser la compatibilité.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/technical/thirdparty/","title":"Third party","tags":[],"description":"Displaying the livechat with 3rd party software.","content":" This page describes experimental features. These features are available with the plugin version \u0026gt;= 7.2.0.\n Introduction Peertube is part of the Fediverse. So Peertube video can be watched from other Peertube instances, and from various other softwares:\n  from a Mastodon (or other fediverse application) instance,\n  from a mobile app (Fedilab, Tusky, \u0026hellip;),\n  from desktop fediverse app,\n  \u0026hellip;\n  This livechat plugin is using well known standards, so it is possible to join chat rooms even when not viewing the video on Peertube.\nThere are basically 2 ways to join the chat room associated to a video:\n  opening a web page (with an url like https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535),\n  using a XMPP client (and joining a room like xmpp://8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld?join)\n  Joining the chat using a XMPP client is not always possible. It requires some DNS and server configuration. It will only be possible if instance\u0026rsquo;s admins have correctly setup the external XMPP clients connection feature.\n Don\u0026rsquo;t try to gues these url and connection methods yourself. Please report to next chapters.\n Chat discovery Using ActivityPub The livechat plugin adds some data in Video ActivityPub objects, so that the chat can be discovered.\nThis requires Peertube \u0026gt;= 5.1\n This follows the FEP-1970 recommendations.\nAt the time of the writing, this FEP is in draft status, and the livechat plugin is a Proof-of-concept. Until the FEP is adopted, the specification can change, and the livechat plugin will be adapted accordingly.\n Basically, the chat will be declared as attachments on the Video object, using the discussion relation.\nBy default, here is an example of what you will get:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, { \u0026#34;RsaSignature2017\u0026#34;: \u0026#34;https://w3id.org/security#RsaSignature2017\u0026#34; }, { // ...  } ], \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://yourinstance.tld/accounts/root/followers\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Video\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;The video title\u0026#34;, // ...  \u0026#34;url\u0026#34;: [ /* ... */ ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; } ] } In case the instance has activated the external XMPP clients connection feature:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, { \u0026#34;RsaSignature2017\u0026#34;: \u0026#34;https://w3id.org/security#RsaSignature2017\u0026#34; }, { // ...  } ], \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://yourinstance.tld/accounts/root/followers\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Video\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;The video title\u0026#34;, // ...  \u0026#34;url\u0026#34;: [ /* ... */ ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;xmpp://8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld?join\u0026#34; } ] } Algorithm If you want to display the chat in a web page or in an iframe, here is what you should do:\n  get the Video ActivityPub object,\n  if there is no attachment key, stop.\n  loop through the attachment values (if attachment is not an array, just iterate on this single value)\n  search for an entry with rel === discussion, and with href using the https scheme (that begins with https://)\n  if found, open this href\n  If you want to open the chat room using the XMPP protocol:\n  get the Video ActivityPub object,\n  if there is no attachment key, stop.\n  loop through the attachment values (if attachment is not an array, just iterate on this single value)\n  search for an entry with rel === discussion, and with href using the xmpp scheme (that begins with xmpp://)\n  if found, open this xmpp uri with your client, or connect to the XMPP room at that address\n  Additional notes In the ActivityPub object, there is also a peertubeLiveChat entry. Don\u0026rsquo;t use the content of this entry. This is specific to the livechat plugin, and can be changed or removed in a near future. It is currently required for some endpoint discovery.\nUsing Podcast RSS feed The livechat plugin adds some data in Podcast RSS feeds under the \u0026lt;podcast:liveItem\u0026gt;, so that the chat can be discovered for live streams.\nThis requires Peertube \u0026gt;= 5.2\n The \u0026lt;podcast:chat\u0026gt; element is currently only supported for live streams.\n This follows the \u0026lt;podcast:chat\u0026gt; proposal.\nAt the time of the writing, this proposal is in draft status, and the livechat plugin is a Proof-of-concept. Until the proposal is adopted, the specification can change, and the livechat plugin will be adapted accordingly.\n Basically, the chat will be declared as tag under on the \u0026lt;podcast:liveItem\u0026gt; element.\nBy default, here is an example of what you will get:\n\u0026lt;podcast:liveItem status=\u0026#34;live\u0026#34; start=\u0026#34;2023-07-06T18:00:00.000Z\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The video title\u0026lt;/title\u0026gt; \u0026lt;guid isPermaLink=\u0026#34;false\u0026#34;\u0026gt;e32b4890-983b-4ce5-8b46-f2d6bc1d8819_2023-07-06T18:00:00.000Z\u0026lt;/guid\u0026gt; \u0026lt;link\u0026gt;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026lt;/link\u0026gt; \u0026lt;podcast:socialInteract uri=\u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; protocol=\u0026#34;activitypub\u0026#34; accountUrl=\u0026#34;https://yourinstance.tld/a/youraccount\u0026#34; /\u0026gt; \u0026lt;enclosure url=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; type=\u0026#34;application/x-mpegURL\u0026#34; /\u0026gt; \u0026lt;podcast:alternateEnclosure type=\u0026#34;application/x-mpegURL\u0026#34; lang=\u0026#34;en\u0026#34; title=\u0026#34;HLS\u0026#34; default=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;podcast:source uri=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; /\u0026gt; \u0026lt;/podcast:alternateEnclosure\u0026gt; \u0026lt;itunes:image href=\u0026#34;https://yourinstance.tld/lazy-static/previews/8df24108-6e70-4fc8-b1cc-f2db7fcdd535.jpg\u0026#34; /\u0026gt; \u0026lt;podcast:chat server=\u0026#34;yourinstance.tld\u0026#34; protocol=\u0026#34;xmpp\u0026#34; embedUrl=\u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; /\u0026gt; \u0026lt;/podcast:liveItem\u0026gt; In case the instance has activated the external XMPP clients connection feature:\n\u0026lt;podcast:liveItem status=\u0026#34;live\u0026#34; start=\u0026#34;2023-07-06T18:00:00.000Z\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The video title\u0026lt;/title\u0026gt; \u0026lt;guid isPermaLink=\u0026#34;false\u0026#34;\u0026gt;e32b4890-983b-4ce5-8b46-f2d6bc1d8819_2023-07-06T18:00:00.000Z\u0026lt;/guid\u0026gt; \u0026lt;link\u0026gt;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026lt;/link\u0026gt; \u0026lt;podcast:socialInteract uri=\u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; protocol=\u0026#34;activitypub\u0026#34; accountUrl=\u0026#34;https://yourinstance.tld/a/youraccount\u0026#34; /\u0026gt; \u0026lt;enclosure url=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; type=\u0026#34;application/x-mpegURL\u0026#34; /\u0026gt; \u0026lt;podcast:alternateEnclosure type=\u0026#34;application/x-mpegURL\u0026#34; lang=\u0026#34;en\u0026#34; title=\u0026#34;HLS\u0026#34; default=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;podcast:source uri=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; /\u0026gt; \u0026lt;/podcast:alternateEnclosure\u0026gt; \u0026lt;itunes:image href=\u0026#34;https://yourinstance.tld/lazy-static/previews/8df24108-6e70-4fc8-b1cc-f2db7fcdd535.jpg\u0026#34; /\u0026gt; \u0026lt;podcast:chat server=\u0026#34;yourinstance.tld\u0026#34; protocol=\u0026#34;xmpp\u0026#34; space=\u0026#34;8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld\u0026#34; embedUrl=\u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; /\u0026gt; \u0026lt;/podcast:liveItem\u0026gt; Algorithm If you want to display the chat in a web page or in an iframe, here is what you should do:\n  get the Podcast RSS feed for the channel,\n  if there is no \u0026lt;podcast:liveItem\u0026gt; element under the \u0026lt;channel\u0026gt;, stop.\n  find the \u0026lt;podcast:liveItem\u0026gt; you are looking for\n \u0026lt;podcast:socialInteract\u0026gt; can be used to cross-reference the items with ActivityPub    if there is no \u0026lt;podcast:chat\u0026gt; element under the \u0026lt;podcast:liveItem\u0026gt;, stop.\n  loop through the \u0026lt;podcast:chat\u0026gt; values (if \u0026lt;podcast:chat\u0026gt; is not an array, just iterate on this single value)\n there should only be one, but you should expect to handle several just in case    search for the first entry protocol === xmpp and an embedUrl attribute\n  if found, open this embedUrl\n  If you want to open the chat room using the XMPP protocol:\n  get the Podcast RSS feed for the channel,\n  if there is no \u0026lt;podcast:liveItem\u0026gt; element under the \u0026lt;channel\u0026gt;, stop.\n  find the \u0026lt;podcast:liveItem\u0026gt; you are looking for\n \u0026lt;podcast:socialInteract\u0026gt; can be used to cross-reference the items with ActivityPub    loop through the \u0026lt;podcast:chat\u0026gt; values (if \u0026lt;podcast:chat\u0026gt; is not an array, just iterate on this single value)\n there should only be one, but you should expect to handle several just in case    search for the first entry protocol === xmpp and a space attribute\n space should be an XMPP JID for a MUC    if found, open this XMPP JID with your client after converting it to a join URI, or connect to the XMPP room at that address\n  "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/translate/","title":"Translate","tags":[],"description":"Translate the plugin","content":"You can contribute to this plugin translation. Translations are handled using the Weblate software, using Framasoft Weblate instance.\nNever modify directly files in the languages folder, this could lead to conflicts.\n How to   Create an account: https://weblate.framasoft.org/accounts/register/\n  Validate your email and follow the link sent\n  Create your password and setup your account\n  Go to the plugin project page: https://weblate.framasoft.org/projects/peertube-livechat/peertube-plugin-livechat/\n  Choose the locale you want to translate\n  Just translate missing sentences, or correct the ones that seems incorrect to you.\n  There might be some «very technical» strings. If you are not 100% sure of the meaning, or of your translation, you better not translate it, so it will display in english.\n Adding a new locale If you think there is a missing locale, please check first if it is handled in Peertube. If so, you can open an issue to ask for it.\nAdding new strings / use translations in the code If you are working on new features, and need new strings, you can create them directly in Weblate. The english version is mandatory. Start with it.\nEach string is linked to a key (for example use_chat). Choose an explicit key in english, lower case.\nIf you have to test new strings without waiting for a Weblate merge, you can modify languages/*.yml files, but avoid to commit these changes (to minimize conflict risks).\nUse translations in front-end code Before using a string in front-end, you need to declare a new constant in client/@types/global.d.ts. The constant name must:\n  start with the prefix \u0026ldquo;LOC_\u0026rdquo;\n  use the string key, upper cased\n  you just have to declare its type, not its value\n  For example, to use \u0026ldquo;use_chat\u0026rdquo;, you have to declare:\ndeclare const LOC_USE_CHAT: string The build-client.js script will read the client/@types/global.d.ts, search for such constants, and load their values from the languages files.\nNow, you can simply call peertubeHelpers.translate(LOC_USE_CHAT) in your code.\nUse translations in back-end code In theory, the only parts of the backend code where you need localization is the settings declaration and standardized data (ActivityPub, RSS, \u0026hellip;). Here we need to get english strings from the translation key.\nNote: you should never need another language translation from backend code. Localization must be done on front-end.\nThere is a lib/loc.ts module providing a loc() function. Just pass it the key to have the english string: loc('diagnostic')'.\nDocumentation translation The documentation translation is done using the corresponding Weblate component.\nThere is a specific \u0026ldquo;Hugo shortcodes\u0026rdquo; you can use to display an application string. Saying you want to display the name of the button \u0026ldquo;open_chat_new_window\u0026rdquo;, you can use this in the documentation markdown file:\n{{% livechat_label open_chat_new_window %}} You can also prevent a whole page from being translating by adding livechatnotranslation: true in the Yaml Font Matter section:\n--- title: \u0026#34;Third party\u0026#34; description: \u0026#34;Displaying the livechat with 3rd party software.\u0026#34; weight: 20 chapter: false livechatnotranslation: true --- Never translate a string in the livechat.en.pot file, it would be ignored. Instead, edit directly the markdown files.\nIf a string contains a link, you can change it for the correct link in the translated language. For example, for a link to this documentation, you can add the language code in the url.\nSome strings are block of code. Don\u0026rsquo;t translate code. But you can translate comments, or parameters if relevant.\nIf you are not sure, just don\u0026rsquo;t translate, and ask what to do.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/advanced/","title":"Usage avancé","tags":[],"description":"Quelques fonctionnalités avancées","content":"  Clients XMPP  Autoriser la connexion en utilisant des clients XMPP\n   Utiliser Matterbridge  Utiliser Matterbridge pour faire un pont vers d\u0026#39;autres tchats\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/","title":"Admin documentation","tags":[],"description":"Plugin Peertube Livechat administration","content":"  Paramètres du plugin  Plugin Peertube Livechat administration\n   Usage avancé  Quelques fonctionnalités avancées\n  Clients XMPP  Autoriser la connexion en utilisant des clients XMPP\n   Utiliser Matterbridge  Utiliser Matterbridge pour faire un pont vers d\u0026#39;autres tchats\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/advanced/xmpp_clients/","title":"Clients XMPP","tags":[],"description":"Autoriser la connexion en utilisant des clients XMPP","content":"Ce module de tchat repose sur le protocole XMPP, aussi connu sous le nom de Jabber. Il est donc possible de se connecter aux tchats en utilisant des logiciels clients XMPP. Cela peut par exemple être utile pour faciliter les opérations de modération.\nPour la documentation utilisateur⋅rice associé à ces fonctionnalités, veuillez vous référer à la page de documentation utilisateur⋅rice.\nL\u0026rsquo;activation de ces fonctionnalités demande des changements de configuration sur le serveur, et sur les enregistrements DNS. Il n\u0026rsquo;est pas possible de les activer uniquement depuis l\u0026rsquo;interface de Peertube, et cela demande d\u0026rsquo;avoir quelques compétences basiques d\u0026rsquo;admin système.\n Connexion à votre compte Peertube Cette fonctionnalité n\u0026rsquo;est pas encore disponible, et viendra dans une prochaine version du plugin.\n Connexion en utilisant un compte XMPP externe Pour activer cette fonctionnalité, il va falloir paraméter votre serveur et vos enregistrements DNS, de sorte que les clients XMPP puissent trouver et accéder au serveur Prosody que ce plugin utilise en interne.\nParamètres du plugin Commencez par aller dans les paramètres du plugin livechat de votre instance, puis activez le paramètre «Autoriser les connexions aux salons via des comptes XMPP externes». En cochant celui-ci, de nouveaux champs apparaissent en dessous.\nTout d\u0026rsquo;abord, le champs «Port Prosody serveur vers serveur». Celui-ci prend par défaut la valeur 5269, qui est le port standard pour ce service. Vous pouvez toutefois changer pour un autre port, si celui-ci est déjà utilisé sur votre serveur.\nEnsuite, le champs «Interfaces réseau pour les connexions serveur vers serveur» vous permet d\u0026rsquo;indiquer sur quelles interfaces réseau le serveur doit écouter. La valeur par défaut «*, ::» indique d\u0026rsquo;écouter sur toutes les addresses IP. Vous pouvez changer ces valeurs, si vous souhaiter n\u0026rsquo;écouter que sur certaines IP. La syntaxe est expliquée à coté du champs.\nPour le champs «Dossiers des certificats», vous pouvez le laisser vide. Dans ce cas là, le plugin va générer automatiquement des certificats auto-signés. Il se pourrait que certains serveurs XMPP refusent de se connecter, cela dépendant de leur paramétrage. Dans ce cas, vous pouvez indiquer ici un chemin sur le serveur, dans lequel vous placerez des certificats à utiliser par le module. Charge à vous de les générer et de les renouveller. Voir plus loin pour une explication plus détaillée.\nPare-feu Vous devez ouvrir le port configuré (5269 par défaut) sur votre pare-feu.\nSi vous utilisez Docker pour votre Peertube, il faut modifier le fichier docker-compose.yml pour ouvrir le port 5269 du conteneur peertube au monde extérieur.\nDNS Vous devez ajouter un enregistrement DNS permettant aux serveurs distant de trouver le composant «room.votre_instance.tld».\nLe plus simple pour cela est d\u0026rsquo;ajouter un enregistrement SRV pour le sous-domaine «room» :\n  nom de l\u0026rsquo;enregistrement : _xmpp-server._tcp.room.votre_instance.tld. (remplacez «votre_instance.tld» par la valeur adéquate)\n  TTL: 3600\n  class: IN\n  SRV: 0\n  priority: 0\n  weight: 5\n  port: 5269 (adaptez si vous avez changé le port)\n  target: votre_instance.tld. (remplacez par la valeur adéquate)\n  Attention à bien conserver le point après «votre_instance.tld».\nEn utilisant la commande dig pour vérifier votre enregistrement, vous devriez obtenir un résultat similaire à celui-ci:\n$ dig +short _xmpp-server._tcp.room.videos.john-livingston.fr. SRV 0 5 5269 videos.john-livingston.fr. Si vous n\u0026rsquo;utilisez pas le port standard 5269, vous devez ajouter un autre enregistrement SRV pour _xmpp-server._tcp.votre_instance.tld. (pareil que précédemment, mais en enlevant le préfixe room.). Bien sûr, vous pouvez l\u0026rsquo;ajouter même si vous utilisez le port standard. Cela fonctionnera également.\nUtilisation de certificats de confiance Les certificats auto-signés que le plugin utilise par défaut peuvent ne pas convenir à tous les serveurs distants. En effet, ceux-ci peuvent les refuser pour raison de sécurité.\nIl est possible d\u0026rsquo;utiliser des certificats validés par une autorité de certification. Cependant cela demande des connaissances d\u0026rsquo;administration système avancées. En effet, devant la multitude de cas possibles, il est impossible de documenter ici toutes les situations. La présente documentation va donc se contenter de vous expliquer le but à atteindre, et donner un example qui ne conviendra qu\u0026rsquo;à une situation «basique» (installation manuelle de Peertube, avec utilisation de letsencrypt). Si vous êtes dans une autre situation (installation Docker, certificats signés par une autre autorité, etc\u0026hellip;), il vous faudra adapter la démarche.\nPrincipe de base À vous de générer des certificats valides pour les domaines votre_instance.tld et room.votre_instance.tld. Vous pouvez utiliser n\u0026rsquo;importe quelle méthode supportées par Prosody.\nVous devez ensuite placer ces certificats dans un dossier qui sera accessible au user peertube, puis indiquer ce dossier dans le paramètre du plugin «Dossiers des certificats».\nSi vous voulez utiliser l\u0026rsquo;utilitaire ProsodyCtl (pour importer des certificats letsencrypts, générer des certificats, etc\u0026hellip;), cet utilitaire est disponible (une fois Peertube démarré) en utilisant la commande qui suit (en adaptant le chemin vers votre dossier data Peertube, et en remplaçant «xxx» par les arguments que vous souhaitez passer à prosodyctl) : sudo -u peertube /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl xxx\n Le plugin va vérifier une fois par jour si des fichiers ont été modifiés dans ce dossier, et recharger Prosody le cas échéant.\nMéthode dans le cas simple Nous supposons ici que votre installation de Peertube est «classique» (pas d\u0026rsquo;utilisation de Docker), et que les certificats sont générés par letsencrypt, en utilisant l\u0026rsquo;outils certbot.\nTout d\u0026rsquo;abord, on va devoir créer un certificat pour le sous-domain room.votre_instance.tld : c\u0026rsquo;est l\u0026rsquo;uri du composant MUC (salons de discussion XMPP). Même si les connections se font sur votre_instance.tld, il va nous falloir un certificat valide pour ce sous-domaine.\nCommencez donc par paraméter une entrée DNS pour room.votre_instance.tld, qui pointe sur votre serveur. Vous pouvez tout à faire faire une entrée CNAME (ou une entrée A et une entrée AAAA).\nEnsuite, nous allons utiliser nginx (déjà installé pour votre Peertube) pour générer le certificat certbot. On va créer un nouveau site. Dans le fichier /etc/nginx/site-available/room.peertube, ajoutez:\nserver { listen 80; listen [::]:80; server_name room.votre_instance.tld; location /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/certbot; } location / { return 301 https://votre_instance.tld; } } Ensuite on active ce site:\nln -s /etc/nginx/sites-available/room.peertube /etc/nginx/sites-enabled/ systemc reload nginx On prépare ensuite le dossier dans lequel on va plus tard importer les certificats. On suppose ici que vous avez déjà le plugin actif. On va créer le dossier suivant (s\u0026rsquo;il n\u0026rsquo;existe pas déjà), avec le user peertube pour être sûr qu\u0026rsquo;il n\u0026rsquo;y a pas de problème de droits:\nsudo -u peertube mkdir /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/certs Il faut maintenant configurer ce dossier dans les paramètres du plugin, pour «Dossiers des certificats». C\u0026rsquo;est important de le faire avant la suite, sinon le script d\u0026rsquo;import des certificats va les placer au mauvais endroit.\nOn va configurer certbot pour qu\u0026rsquo;il importe les certificats générés dans le dossier de Prosody. On va pouvoir utiliser l\u0026rsquo;utilistaire ProsodyCtl packagé dans le plugin.\nNote: pour qu\u0026rsquo;il soit disponible, il faut que le plugin ai démarré au moins une fois.\nOn va créer un fichier /etc/letsencrypt/renewal-hooks/deploy/prosody.sh contenant:\n#!/bin/sh /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl \\  --root \\  --config /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  cert import \\  room.votre_instance.tld votre_instance.tld /etc/letsencrypt/live Puis on demande à générer le certificat :\ncertbot -d room.videos.john-livingston.fr Si certbot vous propose plusieurs méthodes pour générer le certificat, choisissez «nginx».\nNormalement vous devriez maintenant trouver les certificats dans le dossier configuré.\nNote: la première fois que vous faites tout ça, il va falloir recharger Prosody. Le plus simple pour cela est de redémarrer Peertube.\nMéthode en cas d\u0026rsquo;utilisation de Docker Cette méthode marche avec le guide Docker officiel de Peertube.\nTout d\u0026rsquo;abord, assurez-vous de créer une entrée DNS pour room.your_instance.tld, qui pointe vers votre serveur. Vous pouvez utiliser une entrée CNAME (ou une entrée A et une entrée AAAA). Ceci est nécessaire pour que Let\u0026rsquo;s Encrypt valide le domaine pour la génération du certificat.\nEntrez le répertoire où se trouve votre fichier docker-compose.yml.\nOuvrez un shell dans le conteneur certbot :\ndocker exec -it certbot /bin/sh Lancez certbot :\ncertbot Une série d\u0026rsquo;invites vous sera présentée. Entrez 2 pour le type d\u0026rsquo;authentification :\nHow would you like to authenticate with the ACME CA? Select the appropriate number [1-2] then [enter] (press \u0026#39;c\u0026#39; to cancel): 2 Enter the domain name room.your_instance.tld:\nPlease enter the domain name(s) you would like on your certificate (comma and/or space separated) (Enter \u0026#39;c\u0026#39; to cancel): room.your_instance.tld Enter the directory where the PeerTube webserver serves requests for Let\u0026rsquo;s Encrypt, /var/www/certbot:\nInput the webroot for \u0026lt;room.your_instance.tld\u0026gt;: (Enter \u0026#39;c\u0026#39; to cancel): /var/www/certbot Vous devriez obtenir un résultat semblable à celui qui suit :\nSuccessfully received certificate. Certificate is saved at: /etc/letsencrypt/live/room.your_instance.tld/fullchain.pem Key is saved at: /etc/letsencrypt/live/room.your_instance.tld/privkey.pem Exécutez la commande suivante à l\u0026rsquo;intérieur du conteneur certbot pour donner un accès en lecture aux nouveaux certificats et clés privées au groupe peertube. Note : Cette commande rendra également les fichiers accessibles en lecture au groupe dont l\u0026rsquo;identifiant est 999 sur le système hôte. Vérifiez les groupes sur votre système pour évaluer le risque avant d\u0026rsquo;exécuter cette commande.\nchown -R root:999 /etc/letsencrypt/live; \\ chmod 750 /etc/letsencrypt/live; \\ chown -R root:999 /etc/letsencrypt/archive; \\ chmod 750 /etc/letsencrypt/archive; \\ find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} \\; Sortez du conteneur certbot :\nexit Modifiez votre fichier docker-compose.yml, en changeant la ligne entrypoint sous le service certbot par ce qui suit. C\u0026rsquo;est la même chose que ci-dessus, mais elle doit être exécutée automatiquement après chaque renouvellement de certificat.\nentrypoint: /bin/sh -c \u0026#34;trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; chown -R root:999 /etc/letsencrypt/live; chmod 750 /etc/letsencrypt/live; chown -R root:999 /etc/letsencrypt/archive; chmod 750 /etc/letsencrypt/archive; find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} +; sleep 12h \u0026amp; wait $${!}; done;\u0026#34; En continuant à modifier docker-compose.yml, ajoutez le volume certbot dans le conteneur peertube. Il devrait ressembler à ceci :\nvolumes: - ./docker-volume/certbot/conf:/etc/letsencrypt Redémarrez vos services :\ndocker-compose down; docker-comopse up -d Dans les paramètres du plugin livechat à partir des paramètres d\u0026rsquo;administration de PeerTube, définissez le répertoire des certificats comme suit :\n/etc/letsencrypt/live Sauvegardez les paramètres du plugin et vérifiez que Prosody peut voir les certificats :\ndocker-compose exec -u peertube \\  peertube \\  /data/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun \\  prosodyctl \\  --config /data/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  check certs En cas de problème Si cela ne fonctionne pas, vous pouvez utiliser l\u0026rsquo;outils de diagnostic (un bouton se trouve en haut de la page des paramètres du plugin), et notamment regarder ce que dit la section «Prosody check».\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/feedback/","title":"Donnez vos retours","tags":[],"description":"Donnez vos retours","content":"Vous n\u0026rsquo;avez pas besoin de coder pour commencer à contribuer à ce plugin ! Les autres formes de contributions sont également précieuses, parmis lesquelles : vous pouvez tester le plugin et remonter les bugs que vous rencontrez, partager vos retours d\u0026rsquo;expérience, proposer des fonctionnalités qui vous intéressent, remonter vos remarques sur l\u0026rsquo;interface, le design, etc.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/xmpp_clients/","title":"Clients XMPP","tags":[],"description":"Se connecter au tchat avec un client XMPP","content":"Ce module de tchat repose sur le protocole XMPP, aussi connu sous le nom de Jabber. Il est donc possible de se connecter aux tchats en utilisant des logiciels clients XMPP. Cela peut par exemple être utile pour faciliter les opérations de modération.\nLes fonctions décrites dans cette page doivent être activées et configurées par les administrateur⋅rices de votre instance Peertube. Il se peut donc que vous n\u0026rsquo;y ayez pas accès.\n Connexion à votre compte Peertube Cette fonctionnalité n\u0026rsquo;est pas encore disponible, et viendra dans une prochaine version du plugin.\n Connexion en utilisant un compte XMPP externe Si cette fonctionnalité est activée sur votre instance, vous pouvez vous connecter aux tchats Peertube en utilisant un compte XMPP quelconque.\nPour obtenir l\u0026rsquo;adresse du salon à rejoindre, vous pouvez utiliser la fenêtre de «partage» du tchat, dont le bouton est situé au dessus du tchat:\nPar défaut, le bouton de partage n\u0026rsquo;est visible que pour le ou la propriétaire de la vidéo, et les admins/modérateur⋅rices de l\u0026rsquo;instance. Toutefois, les admins peuvent décider d\u0026rsquo;afficher ce bouton pour tout le monde.\n Ensuite, dans la modale qui s\u0026rsquo;affiche, choississez «Connexion avec un client XMPP»:\nIl vous suffit ensuite, soit de cliquer sur «ouvrir», soit de copier/coller l\u0026rsquo;adresse du salon dans votre client XMPP (en utilisant la fonctionnalité «rejoindre un salon»).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/user/","title":"Documentation utilisateur⋅rice","tags":[],"description":"Documentation utilisateur⋅rice du plugin peertube-plugin-livechat","content":"  Modération  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n   OBS  Documentation pour diffuser le contenu du tchat à l\u0026#39;aide d\u0026#39;OBS.\n   Clients XMPP  Se connecter au tchat avec un client XMPP\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/develop/","title":"Développer","tags":[],"description":"Développer","content":"Toujours annoncer les fonctionnalités sur lesquelles vous voulez travailler en créant un ticket ou en commentant un ticket existant, avant de commencer à travailler dessus. Et annoncez clairement à la communauté que vous commencez à travailler dessus. Ceci afin d\u0026rsquo;éviter que plusieurs personnes travaillent sur la même chose et entrent en conflit.\nLes Pull Request sont à faire sur la branche main.\nJusqu\u0026rsquo;à mars 2023, il fallait contribuer sur la branche develop. Cette procédure est désormais obsolète.\n Pré-requis pour compiler le plugin Il est hautement recommandé d\u0026rsquo;être familier avec les concepts suivants :\n  Git\n  NodeJS\n  NPM\n  Typescript\n  Pour construire le module, vous avez besoin d\u0026rsquo;avoir installé les paquets suivants :\n  git\n  npm (\u0026gt;=8.x)\n  nodejs (\u0026gt;=14.x)\n  build-essential\n  The plugin needs to build an AppImage for the Prosody XMPP server. It appears that the way this AppImage is build requires apt and dpkg commands. So it will only work \u0026ldquo;out of the box\u0026rdquo; on Debian-like systems. If you are using another Linux distribution, you can try to install apt and dpkg manually. See for example this Github issue. We will provide another solution as soon as possible.\nBuilding this AppImage also requires following packages:\n  python3-venv\n  squashfs-tools\n  These dependencies were tested on a Debian Bullseye. If there is some dependencies issues on your UNIX/Linux system, please open an issue on Github.\n Développer Clone the repository, buid the plugin, and create your feature branch:\n# Cloner le dépot. N\u0026#39;oubliez pas le --recursive, pour clôner les sous-modules. git clone https://github.com/JohnXLivingston/peertube-plugin-livechat.git --recursive # Installer les dépendances NPM et compiler le plugin pour la première fois : npm install # Compiler le plugin après une modification : npm run build # Si vous avez un fork du dépot, ajoutez le en remote (exemple) : git remote add me git@github.com:MON_COMPTE_GITHUB/peertube-plugin-livechat.git # Créez une branche locale pour vos développements et placez vous dessus (exemple) : git checkout mon_developpement # NB: si un ticket y est associé, utilisé le nom fix_1234 (où 1234 est le numéro du ticket) # Pour proposer vos modifications, poussez votre branche sur votre dépot (exemple) : git push --set-upstream me mon_developpement # Rendez-vous ensuite sur votre dépot github avec votre navigateur web pour proposer la Pull Request (voir les instructions complémentaires ci-dessous) Once you are ready to show your code to ask for feedback, submit a draft Pull Request. Once you are ready for a code review before merge, submit a Pull Request. In any case, please link your PR to the issues it solves by using the GitHub syntax: \u0026ldquo;fixes #issue_number\u0026rdquo;.\nLe code du front-end est dans le dossier client. Le code backend dans server. Il y a du code partagé entre les deux dans shared.\nPour les instructions génériques concernant le développement de plugins (building, installation, \u0026hellip;), merci de vous référer à la documentation Peertube.\nVous pouvez builder le plugin avec des infos de debug supplémentaires en utilisant :\nNODE_ENV=dev npm run build ESBuild versus Typescript Ce plugin utilise ESBuild pour compiler le code front-end, comme le plugin peertube-plugin-quickstart officiel. ESBuild peut gérer Typescript, mais ne vérifie pas les types (voir la documentation ESBuild). C\u0026rsquo;est pourquoi on compile d\u0026rsquo;abord Typescript avec l\u0026rsquo;option -noEmit, juste pour vérifier les types (check:client:ts dans le fichier package.json). Ensuite, si tout est ok, on lance ESBuild pour générer le javascript compilé.\nDebug Mode Il existe un mode de debug pour le plugin, qui va raccourcir le délais de certaines actions. Par exemple, il va faire tourner les journaux toutes les deux minutes, au lieu de tous les jours. Cela permet de tester plus facilement certaines actions, pour lesquelles il faudrait normalement attendre des heures ou des jours.\nPour activer ce mode, il suffit de créer un fichier /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/debug_mode (en adaptant /var/www/peertube/storage/ à votre installation le cas échéant).\nLa simple existance de ce fichier suffit à déclencher le mode debug. Pour être sûr qu\u0026rsquo;il est pris en compte, vous pouvez redémarrer votre instance Peertube.\nCe fichier peut également contenir du JSON qui pourra activer d\u0026rsquo;autres options. Pour en avoir la liste, vous pouvez regarder le code de server/lib/debug.ts. Redémarrez Peertube après chaque modification de son contenu.\nN\u0026rsquo;activer jamais ce mode sur un serveur de production, ni même sur un serveur public. Cela pourrait poser des problèmes de sécurité.\n Redémarrer Prosody Pour redémarrer Prosody quand le mode debug est activé, vous pouvez appeler l\u0026rsquo;API http://votre_instance.tld/plugins/livechat/router/api/restart_prosody. Cet appel n\u0026rsquo;a pas besoin d\u0026rsquo;authentification. Il peut se faire depuis une ligne de commande, par exemple avec curl http://votre_instance.tld/plugins/livechat/router/api/restart_prosody.\ndebugger Prosody Il est possible de connecter l\u0026rsquo;AppImage Prosody à un debugger distant en utilisant MobDebug.\nPour cela, placer MobDebug dans un dossier accessible par le user peertube. Ensuite, ajouter cela dans le fichier debug_mode du plugin :\n{ \u0026#34;debug_prosody\u0026#34;: { \u0026#34;debugger_path\u0026#34;: \u0026#34;/le_chemin_vers_mobdebug/src\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;8172\u0026#34; } } host et port sont optionnels. debugger_path doit pointer vers le dossier où se trouve le fichier .lua de MobDebug.\nRedémarrer Peertube.\nLancer votre serveur de debug.\nPour que Prosody se connecte au debugger, appelez l\u0026rsquo;API http://votre_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. Cet appel n\u0026rsquo;a pas besoin d\u0026rsquo;authentification. Il peut se faire depuis une ligne de commande, par exemple avec curl http://votre_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. Vous pouvez même configurer votre serveur de debuggage pour lancer cette commande automatiquement.\nProsody va alors redémarrer en se connectant au debugger.\nEnvironnement de développement rapide via Docker Un tutoriel est disponible sur le forum Peertube pour expliquer comment monter rapidement un environnement de développement en utilisant Docker.\nUn dépot a été crée sur la base de ce tutoriel : https://codeberg.org/mose/pt-plugin-dev\nNote : pour une raison obscure, Prosody n\u0026rsquo;arrive pas à résoudre les adresses DNS des conteneurs quand la librairie lua-unbound est utilisée. Pour contourner cela, il y a un «dirty hack» : il suffit de créer une fichier /data/plugins/data/peertube-plugin-livechat/no_lua_unbound dans vos docker-volumes, puis de les redémarrer.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/document/","title":"Documentation","tags":[],"description":"Documenter le plugin, ou traduire la documentation.","content":"Généralités Toujours vous annoncer avant de commencer à travailler (en créant un ticket ou en commentant un ticket existant). Ceci afin d\u0026rsquo;éviter que plusieurs personnes travaillent sur la même chose et entrent en conflit.\nLe travail de documentation se fait sur la branche main.\nLe code source de la documentation se trouve dans le dossier support/documentation/content du dépot de code.\nLa documentation est générée via l\u0026rsquo;outils Hugo. Celui-ci doit être installé sur votre machine pour pouvoir prévisualiser la documentation.\nLe thème utilisé est hugo-theme-learn. Il est recommandé d\u0026rsquo;en lire la documentation avant de commencer.\nQuand une version du plugin est publiée, ou quand la documentation est mise à jour, les mainteneur⋅euses du plugin fusionnerons la branche main dans la branche documentation. Ce qui aura pour effet de déclencher les pipelines github et gitlab pour mettre à jour les versions publiées.\nTraductions La langue principale est l\u0026rsquo;anglais (code en).\nLe dossier support/documentation/content/enne contient que les fichiers de documentation en anglais.\nLa documentation est traduite en utilisant Weblate (voir la documentation sur la traduction). Pour cela, on utilise l\u0026rsquo;outils po4a, comme nous le verrons plus loin dans cette page.\nAjout d\u0026rsquo;une nouvelle langue Dans le fichier support/documentation/config.toml, inspirez vous de la section [Languages.fr] pour déclarer la nouvelle langue.\nSi les traductions ne sont pas complètes, ce n\u0026rsquo;est pas grave, la version anglaise sera utilisée pour les chaînes manquantes.\nPrévisualiser Pour prévisualiser vos modification, il suffit de lancer :\nhugo serve -s support/documentation/ Puis d\u0026rsquo;ouvrir votre navigateur à l\u0026rsquo;adresse http://localhost:1313/peertube-plugin-livechat/. Cette page se raffraichira automatiquement à chaque modification.\nMettre à jour les fichiers de localisation et générer les traductions de la documentation Pour l\u0026rsquo;instant, vous n\u0026rsquo;avez que la version anglaise. Pour mettre à jour les chaînes et générer les traductions, vous devez lancer le script doc-translate.sh.\nPour cela, assurez vous d\u0026rsquo;avoir po4a (version \u0026gt;= 0.66) installé sur votre ordinateur.\nCertaines distributions linux (comme Debian Bullseye par exemple) ont une version trop ancienne de po4a. Veillez à installer une version compatible. Si vous utilisez Debian Bullseye par exemple, vous pouvez télécharger le fichier Bookworm po4a.deb depuis https://packages.debian.org, et l\u0026rsquo;installer manuellement.\n Pour gérer les traductions, il suffit de faire :\nnpm run doc:translate Vous pouvez ensuite prévisualiser le résultat en utilisant hugo serve -s support/documentation/, et en utilisant le sélecteur de langue.\nÉcrire la documentation Éditez seulement les fichiers anglais dans support/documentation/content/en.\nEnsuite, avant de commiter, lancez toujours npm run doc:translate, afin que les changements dans les fichiers anglais puissent être propagés dans le fichier support/documentation/po/livechat.en.pot.\nVous pouvez utiliser le code court livechat_label pour utiliser des chaînes de l\u0026rsquo;application. Voir ici : Traduction de la documentation.\nIl est possible d\u0026rsquo;empêcher un fichier d\u0026rsquo;être traduit, en utilisant livechatnotranslation : true dans la section Yaml Font Matter. Voir ici : Traduction de la documentation.\nVeuillez utiliser l\u0026rsquo;option livechatnotranslation pour la documentation technique. Nous ne voulons pas traduire la documentation technique, afin d\u0026rsquo;éviter les problèmes liés à une mauvaise traduction.\nÉvitez d\u0026rsquo;ajouter des sauts de ligne au milieu d\u0026rsquo;une phrase. En revanche, ajoutez un saut de ligne après chaque phrase d\u0026rsquo;un paragraphe. Cela facilite le travail des traducteur⋅rices : iels peuvent ainsi facilement vérifier qu\u0026rsquo;iels n\u0026rsquo;oublient pas une phrase lorsqu\u0026rsquo;iels traduisent un paragraphe.\nQue faire si je ne peux pas utiliser hugo et/ou po4a ? Il suffit d\u0026rsquo;éditer les fichiers markdown en anglais, et de spécifier que vous ne pouvez pas compiler les traductions lorsque vous faites votre Pull Request.\nPublication La publication de la documentation est automatique, dès que les modifications sont fusionnées dans la branche documentation.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/installation/upgrade_before_6.0.0/","title":"Mise à jour depuis une version antérieure à 6.0.0","tags":[],"description":"Notes importantes pour la mise à jour depuis une ancienne version du plugin.","content":"IMPORTANT NOTE Depuis la version v6.0.0, ce plugin ne nécessite plus l\u0026rsquo;installation de Prosody.\nSi vous utilisiez ce plugin avant, et que vous aviez installé Prosody manuellement, vous pouvez le désinstaller en tout sécurité.\nSi vous utilisiez l\u0026rsquo;image docker spéciale de Peertube (qui incluais Prosody), vous pouvez basculer sur l\u0026rsquo;image officielle de Peertube.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/documentation/admin/advanced/matterbridge/","title":"Utiliser Matterbridge","tags":[],"description":"Utiliser Matterbridge pour faire un pont vers d&#39;autres tchats","content":"This page is not yet translated in your language, please refer to the english version. You can switch to it by using the language selector in the left menu.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contributing/","title":"Contribuer","tags":[],"description":"Contribuer","content":"Intéressé⋅e pour contribuer ? Super !\n Code de conduite  Convention de Code de conduite Contributeur⋅rices\n   Translate  Translate the plugin\n   Donnez vos retours  Donnez vos retours\n   Développer  Développer\n   Documentation  Documenter le plugin, ou traduire la documentation.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/issues/","title":"Évolutions / Bugs","tags":[],"description":"Évolutions / suivi des bugs","content":"Si vous avez des demandes de nouvelles fonctionnalités, des bugs, ou des difficultés à installer et utiliser le plugin, vous pouvez utiliser l\u0026rsquo;outils Github issue tracker. Si possible, merci d\u0026rsquo;y écrire en anglais ; mais le français sera accepté.\nPour avoir un apperçu de la feuille de routes pour les fonctionnalités à venir, vous pouvez vous référer à :\n  ce projet github.\n  les jalons sur github.\n  Si vous êtes webdesigner ou avez une expertise en ConverseJS/Prosody/XMPP et souhaitez participer à l\u0026rsquo;évolution de ce plugin, n\u0026rsquo;hésitez pas à me contacter.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/technical/","title":"Technical documentation","tags":[],"description":"Technical documentation","content":"  Third party  Displaying the livechat with 3rd party software.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/contact/","title":"Me contacter","tags":[],"description":"Contacter l&#39;auteur","content":"Si vous avez des questions ou souhaitez parler de ce plugin, vous pouvez rejoindre ce salon XMPP avec n\u0026rsquo;importe quel client Jabber : plugin-livechat-support@room.im.yiny.org.\nSi vous souhaitez supporter le projet financièrement, vous pouvez me contacter par mail à l\u0026rsquo;adresse git.[arobase].john-livingston.fr, ou passer par mon profil Liberapay.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/credits/","title":"Crédits","tags":[],"description":"Crédits pour le plugin","content":"Les fichiers package.json, COPYRIGHT et LICENSE contiennent les informations sur la licence du présent logiciel (en anglais).\nLe plugin est maintenu par John Livingston.\nMerci à David Revoy pour son travail sur la mascotte de Peertube, Sepia. Le character design est en licence CC-By, et les fichiers SVG utilisés pour créer certains logos et avatars en GPLv3.0.\nMerci à Framasoft pour avoir rendu Peertube possible, pour le support financier, et pour héberger les traductions du projet sur leur instance Weblate.\nMerci à ritimo pour le support financier.\nMerci à Code Lutin et à la Rétribution Copie Publique pour le support financier.\nMerci à NlNet et au fond NGI0 Entrust pour le support financier.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/","title":"","tags":[],"description":"","content":"PeerTube plugin livechat Vous pouvez utiliser le sélecteur de langue dans le menu de gauche pour afficher cette documentation dans différentes langues. Certaines traductions sont manquantes ou incomplètes. Dans ce cas, vous verrez la version anglaise du texte.\n Avant de mettre à jour le plugin vers une nouvelle version majeure, merci de lire les notes de version, et la liste des éventuelless modifications non rétro-compatibles : CHANGELOG.\n  Introduction  Introduction\n   Documentation  Documentation du plugin\n  Documentation d\u0026#39;installation  Installation du plugin peertube-plugin-livechat\n  Problème connu: compatibilité CPU  Pour l\u0026#39;instant le plugin ne supporte de base que les architectures CPU x86_64 et arm64. Veuillez trouver ici des instructions pour le faire fonctionner sur d\u0026#39;autres architectures CPU.\n Mise à jour depuis une version antérieure à 6.0.0  Notes importantes pour la mise à jour depuis une ancienne version du plugin.\n  Admin documentation  Plugin Peertube Livechat administration\n  Paramètres du plugin  Plugin Peertube Livechat administration\n Usage avancé  Quelques fonctionnalités avancées\n  Documentation utilisateur⋅rice  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n  Modération  Documentation utilisateur⋅rice du plugin peertube-plugin-livechat\n OBS  Documentation pour diffuser le contenu du tchat à l\u0026#39;aide d\u0026#39;OBS.\n Clients XMPP  Se connecter au tchat avec un client XMPP\n   Contribuer  Contribuer\n  Code de conduite  Convention de Code de conduite Contributeur⋅rices\n   Translate  Translate the plugin\n   Donnez vos retours  Donnez vos retours\n   Développer  Développer\n   Documentation  Documenter le plugin, ou traduire la documentation.\n    Évolutions / Bugs  Évolutions / suivi des bugs\n   Technical documentation  Technical documentation\n  Third party  Displaying the livechat with 3rd party software.\n    Me contacter  Contacter l\u0026#39;auteur\n   Crédits  Crédits pour le plugin\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/fr/tags/","title":"Tags","tags":[],"description":"","content":""}]