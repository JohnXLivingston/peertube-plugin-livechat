[{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/intro/","title":"Introduction","tags":[],"description":"Introduction","content":"This Peertube plugin is meant to provide chat system for Peertube videos.\nYou can use the language selector in the left menu to view this documentation in different languages. Some translations are missing or incomplete. In this case, you\u0026rsquo;ll see the English version of the text.\n See a demo.\n "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contributing/codeofconduct/","title":"Code of Conduct","tags":[],"description":"Contributor Covenant Code of Conduct","content":" This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Translations are available at https://www.contributor-covenant.org/translations. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by mail at git.[at].john-livingston.fr.\n Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\n Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community  Examples of unacceptable behavior include:\n The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement by mail at git.[at].john-livingston.fr. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla\u0026rsquo;s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/","title":"Documentation","tags":[],"description":"Plugin documentation","content":"  Installation guide  Plugin peertube-plugin-livechat installation guide\n  Known issues: CPU Compatibility  For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.\n   Upgrade from version older than 6.0.0  Important notes when upgrading for an older version.\n    Admin documentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n   Advanced usage  Some advanced features\n  XMPP clients  Allow connections using XMPP clients\n Using Matterbridge  Using Matterbridge to bridge with other chats\n   User documentation  Plugin peertube-plugin-livechat user documentation\n  Moderation  Plugin peertube-plugin-livechat moderation\n   OBS  Documentation to stream the chat content using OBS.\n   XMPP Clients  Connect to chat using a XMPP client\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/installation/","title":"Installation guide","tags":[],"description":"Plugin peertube-plugin-livechat installation guide","content":" Before updating to a major release, please read the release notes and breaking changes list : CHANGELOG.\n To install or update the plugin, just use the Peertube web admin interface.\n Here are some other more specific instructions:\n Known issues: CPU Compatibility  For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.\n   Upgrade from version older than 6.0.0  Important notes when upgrading for an older version.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/installation/cpu_compatibility/","title":"Known issues: CPU Compatibility","tags":[],"description":"For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.","content":"The Prosody AppImage included in the plugin will only work on x86_64 and arm64 CPU. It is not compatible with other CPU architectures.\nTo use the plugin, you will have to manually install Prosody on your server (see below).\nNote: the plugin requires Prosody \u0026gt;= 0.12.0. If you are using an older version, Chat Federation could be broken, and it could have some unexpected behaviour.\nOnce it is done, you have to check Use system Prosody in the plugin settings.\nOn non-docker Peertube installation For standard installation, you just have to install the official prosody package for your linux distribution.\nFor example, on Debian/Ubuntu:\nsudo apt install prosody You can then disable the service that starts automatically when you install Prosody (the plugin will launch a Prosody process, there is no need for the service to run). For example, on Debian/Ubuntu (and other Systemd based linux distributions):\nsudo systemctl disable prosody \u0026amp;\u0026amp; sudo systemctl stop prosody Warning: do not disable Prosody if it is used for another service on your server, like for example Jitsi.\nDocker You will have to generate a Peertube image that includes Prosody in the same container that Peertube. I know this is not the standard way to do this with Docker, but keep in mind it is a temporary workaround.\nTo generate and use such an image, please refer to the Docker documentation. The Docker file to generate the image should be:\nFROMchocobozzz/peertube:production-bullseyeRUN apt -y update \u0026amp;\u0026amp; apt install -y prosody \u0026amp;\u0026amp; apt -y cleanYunohost You have to disable metronome (the XMPP server provided by Yunohost), and install prosody.\nThis is already done by the Yunohost Peertube application, as it was required for the plugin before the v6.0.0.\nBut it may be removed in a near feature (to avoid drawbacks of this method). I have to discuss with Yunohost team, to decide how we can do to minimize drawbacks, and maximize compatibility.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/user/moderation/","title":"Moderation","tags":[],"description":"Plugin peertube-plugin-livechat moderation","content":"You can access room settings and moderation tools by opening the chat in a new window, and using the dropdown menu at the top right.\nYou can list all existing chatrooms: in the plugin settings screen, there is a button «List rooms».\nYou can delete old rooms: join the room, and use the menu on the top to destroy the room.\nNotes All instance moderators and admins will be owner of created chat rooms. If the video is local (not from a remote Peertube), the video owner will be admin in the chat room.\nYou can use ConverseJS moderation commands to moderate the room. When you open the chat room in full screen, there will also be a menu with dedicated commands on the top right.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/user/obs/","title":"OBS","tags":[],"description":"Documentation to stream the chat content using OBS.","content":"OBS Overlay If you are using OBS for streaming, you can easily include the chat in your stream.\nYou can use the «share chat link» feature to generate an URL to your chat. The button should be near the chat if you are the video owner (unless it was desactivated by your server admins).\nCheck the «readonly» checkbox in the modal. Then use this link as a «web browser source» in OBS.\nYou can use the «Transparent background» to have a transparent background in OBS. If you want to customize the background transparency, you can add this CSS in your OBS browser source\u0026rsquo;s settings:\n:root { --livechat-transparent: rgba(255 255 255 / 90%) !important; } Note: you can customize colors. This is undocumented yet, but you can try this: in the modal, check «use curent theme colors», then you can try to manually change color values in the URL. You must use valid CSS color values, and they must be properly URL encoded.\nMixing multiple chats in your live stream You can use the social_stream browser extension to mix multiple chat source (from Peertube, Twitch, Youtube, Facebook, \u0026hellip;) and include their contents in your live stream. The compatibility with this plugin was added in recent versions.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/admin/settings/","title":"Settings","tags":[],"description":"Plugin Peertube Livechat settings","content":"This section describes the plugin settings page.\nList existing rooms  When pressing the «List rooms» button, all existing chatrooms will be listed. You can then find them and moderated them.\nFederation Following settings concern the federation with other Peertube instances, and other fediverse softwares.\nDon't display remote chats  By checking this setting, your instance will never display chats from remote videos. Don't publish chat information  By checking this setting, your instance will not publish chat information on the fediverse. Remote Peertube instances will not be aware that they are chat rooms associated to your videos.\nPlease note: if you already had chats in progress, it is possible that the information has already been published. You will have to wait for the next video update before the information is unpublished. Also, if you disable this setting, you'll have to wait for the videos to be updated before the information are published again. This update happens among others when a live event resumes or stops.\nPlease note: this setting only affects the publication of information via the ActivityPub protocol. It will not prevent a remote application from otherwise detecting the presence of chats, and trying to connect to it. Chat behaviour Room type  You can choose here to have separate rooms for each video, or to group them by channel. Automatically open the chat  When watching a video, the chatbox will automatically open. Show the «open in new window» button  There will be a button for opening the web chat in a new window. Show the «share chat link» button  This feature enables a «share chat link» modal. With this modal, you can generate URLs to join the chat. The chat can be customized (readonly mode, use the current theme, \u0026hellip;).\nYou can for example generate a readonly URL and use it in OBS to integrate the chat in your live stream!\nThis settings allows you to choose who can access this modal.\nUsers can activate the chat for their lives  If checked, all live videos will have a checkbox in their properties for enabling the web chat. The video owner will be able to activate web chats.\nActivate chat for all lives  If checked, the chat will be enabled for all lives. Activate chat for all non-lives  Activate chat for all non-lives Activate chat for these videos  Activate chat for these videos Hide the chat for anonymous users  If checked, anonymous Peertube users won't see the chat. This feature is still experimental. If you enabled it, it is highly recommended to also check \"Don't publish chat information\". Otherwise, some third party tools could try to open the chat, and have unpredictable behaviours. Note: for now this feature simply hide the chat. In a future release, the chat will be replaced by a message saying «please log in to [\u0026hellip;]». See v5.7.0 Release Notes for more information.\nTheming ConverseJS theme  You can choose which theme to use for ConverseJS:\n Peertube theme: this is a special theme, made especially for peertube\u0026rsquo;s integration. Default ConverseJS theme: this is the default ConverseJS theme. ConverseJS concord theme: this is a theme provided by ConverseJS.  Automatic color detection  Try to autodetect colors from user's current theme.\nWhen this settings is enabled, the plugin tries to auto-detect colors to apply to the chat theme.\nIf this is not correctly working for some of your Peertube theme, you can disable this option. You can report the bug on the official issue tracker . Don't forget to specify which theme is not working. Webchat iframe style attribute  Additional styles to be added on the iframe style attribute. Example: height:400px; Chat server advanced settings Use system Prosody  The plugin comes with an AppImage that is used to run the Prosody XMPP server. If this AppImage is not working, you can fallback to the Prosody that is packaged for your server. Just install the prosody package.\nThis settings should only be used if the plugin is broken, and waiting for a patch.\nDisable Websocket  With Peertube \u0026gt;= 5.0.0, this plugin try to use Websocket connection for chatting. If the user's browser or connection is incompatible, the browser will automatically fall back on the BOSH protocol. But in rare case, this can fail. For example, if you have a reverse proxy in front of Peertube that does not allow Websocket connection for plugins. In this case, you can check this setting to disable Websocket connections. Prosody port  The port that will be used by the Prosody server.\nChange it if this port is already in use on your server.\nYou can close this port on your firewall, it will not be accessed from the outer world.\nNote: this might change in a near future, as it is planned to add a feature to activate external connections. Peertube url for API calls  Please let this setting empty if you don't know what you are doing.\nIn some rare cases, Prosody can't call Peertube's API from its public URI. You can use this field to customize Peertube's URI for Prosody modules (for example, with «http://localhost:9000» or «http://127.0.0.1:9000»). Log rooms content by default  If checked, room contents will be saved by default. Any user who joins a room will see what was written before he joins.\nPlease note that it is always possible to enable/disable the content archiving for a specific room, by editing its properties. Room logs expiration  You can choose here how long the chatting room's content is kept by the server. The value can be:  60: the content will be saved for 60 seconds. You can replace 60 by any integer value. 1d: the content will be saved for 1 day. You can replace 1 by any integer value. 1w: the content will be saved for 1 week. You can replace 1 by any integer value. 1m: the content will be saved for 1 month. You can replace 1 by any integer value. 1y: the content will be saved for 1 year. You can replace 1 by any integer value. never: the content will never expire, and will be kept forever.  Enable connection to room using external XMPP accounts  By enabling this option, it will be possible to connect to rooms using external XMPP accounts and XMPP clients.\nWarning, enabling this option can request extra server and DNS configuration. Please refer to the documentation: Enable external XMPP account connections.  Prosody server to server port  The port that will be used for XMPP s2s (server to server) connections.\nYou should use the standard 5269 port. Otherwise you should setup a specific DNS record . Server to server network interfaces  The network interfaces to listen on for server to server connections.\nList of IP to listen on, coma separated (spaces will be stripped).\nYou can use «*» to listen on all IPv4 interfaces, and «::» for all IPv6.\nExamples:  *, :: * 127.0.0.1, ::1 172.18.0.42  Certificates folder  If this field is empty, the plugin will generate and use self-signed certificates.\nIf you want to use other certificates, just specify here the folder where Prosody can find them. Note: the \"peertube\" user must have read access to this folder. Enable client to server connections  Enable XMPP clients to connect to the built-in Prosody server.\nThis option alone only allows connections from localhost clients. This setting enable XMPP clients to connect to the built-in Prosody server. For now, this option only allows connections from localhost clients.\nAs example, this option can allow an instance of Matterbridge (once it could use anonymous login) on the same machine to bridge your chat with another services like a Matrix room.\nProsody client to server port  The port that will be used by the c2s module of the built-in Prosody server.\nXMPP clients shall use this port to connect.\nChange it if this port is already in use on your server.\nYou can keep this port closed on your firewall for now, it will not be accessed from the outer world.\nNote: this might change in a near future, as it is planned to add a feature to activate external connections. Enable custom Prosody external components  This settings enable XMPP external components to connect to the server. For now, this option only allows connections from localhost components.\nThis feature could be used to connect bridges or bots.\nMore informations on Prosody external components here.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/admin/advanced/","title":"Advanced usage","tags":[],"description":"Some advanced features","content":"  XMPP clients  Allow connections using XMPP clients\n   Using Matterbridge  Using Matterbridge to bridge with other chats\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/technical/thirdparty/","title":"Third party","tags":[],"description":"Displaying the livechat with 3rd party software.","content":" This page describes experimental features. These features are available with the plugin version \u0026gt;= 7.2.0.\n Introduction Peertube is part of the Fediverse. So Peertube video can be watched from other Peertube instances, and from various other softwares:\n from a Mastodon (or other fediverse application) instance, from a mobile app (Fedilab, Tusky, \u0026hellip;), from desktop fediverse app, \u0026hellip;  This livechat plugin is using well known standards, so it is possible to join chat rooms even when not viewing the video on Peertube.\nThere are basically 2 ways to join the chat room associated to a video:\n opening a web page (with an url like https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535), using a XMPP client (and joining a room like xmpp://8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld?join)  Joining the chat using a XMPP client is not always possible. It requires some DNS and server configuration. It will only be possible if instance\u0026rsquo;s admins have correctly setup the external XMPP clients connection feature.\n Don\u0026rsquo;t try to gues these url and connection methods yourself. Please report to next chapters.\n Chat discovery Using ActivityPub The livechat plugin adds some data in Video ActivityPub objects, so that the chat can be discovered.\nThis requires Peertube \u0026gt;= 5.1\n This follows the FEP-1970 recommendations.\nAt the time of the writing, this FEP is in draft status, and the livechat plugin is a Proof-of-concept. Until the FEP is adopted, the specification can change, and the livechat plugin will be adapted accordingly.\n Basically, the chat will be declared as attachments on the Video object, using the discussion relation.\nBy default, here is an example of what you will get:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, { \u0026#34;RsaSignature2017\u0026#34;: \u0026#34;https://w3id.org/security#RsaSignature2017\u0026#34; }, { // ...  } ], \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://yourinstance.tld/accounts/root/followers\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Video\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;The video title\u0026#34;, // ...  \u0026#34;url\u0026#34;: [ /* ... */ ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; } ] } In case the instance has activated the external XMPP clients connection feature:\n{ \u0026#34;@context\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams\u0026#34;, \u0026#34;https://w3id.org/security/v1\u0026#34;, { \u0026#34;RsaSignature2017\u0026#34;: \u0026#34;https://w3id.org/security#RsaSignature2017\u0026#34; }, { // ...  } ], \u0026#34;to\u0026#34;: [ \u0026#34;https://www.w3.org/ns/activitystreams#Public\u0026#34; ], \u0026#34;cc\u0026#34;: [ \u0026#34;https://yourinstance.tld/accounts/root/followers\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;Video\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;The video title\u0026#34;, // ...  \u0026#34;url\u0026#34;: [ /* ... */ ], \u0026#34;attachment\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;Link\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat for live stream: The video title\u0026#34;, \u0026#34;rel\u0026#34;: \u0026#34;discussion\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;xmpp://8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld?join\u0026#34; } ] } Algorithm If you want to display the chat in a web page or in an iframe, here is what you should do:\n get the Video ActivityPub object, if there is no attachment key, stop. loop through the attachment values (if attachment is not an array, just iterate on this single value) search for an entry with rel === discussion, and with href using the https scheme (that begins with https://) if found, open this href  If you want to open the chat room using the XMPP protocol:\n get the Video ActivityPub object, if there is no attachment key, stop. loop through the attachment values (if attachment is not an array, just iterate on this single value) search for an entry with rel === discussion, and with href using the xmpp scheme (that begins with xmpp://) if found, open this xmpp uri with your client, or connect to the XMPP room at that address  Additional notes In the ActivityPub object, there is also a peertubeLiveChat entry. Don\u0026rsquo;t use the content of this entry. This is specific to the livechat plugin, and can be changed or removed in a near future. It is currently required for some endpoint discovery.\nUsing Podcast RSS feed The livechat plugin adds some data in Podcast RSS feeds under the \u0026lt;podcast:liveItem\u0026gt;, so that the chat can be discovered for live streams.\nThis requires Peertube \u0026gt;= 5.2\n The \u0026lt;podcast:chat\u0026gt; element is currently only supported for live streams.\n This follows the \u0026lt;podcast:chat\u0026gt; proposal.\nAt the time of the writing, this proposal is in draft status, and the livechat plugin is a Proof-of-concept. Until the proposal is adopted, the specification can change, and the livechat plugin will be adapted accordingly.\n Basically, the chat will be declared as tag under on the \u0026lt;podcast:liveItem\u0026gt; element.\nBy default, here is an example of what you will get:\n\u0026lt;podcast:liveItem status=\u0026#34;live\u0026#34; start=\u0026#34;2023-07-06T18:00:00.000Z\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The video title\u0026lt;/title\u0026gt; \u0026lt;guid isPermaLink=\u0026#34;false\u0026#34;\u0026gt;e32b4890-983b-4ce5-8b46-f2d6bc1d8819_2023-07-06T18:00:00.000Z\u0026lt;/guid\u0026gt; \u0026lt;link\u0026gt;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026lt;/link\u0026gt; \u0026lt;podcast:socialInteract uri=\u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; protocol=\u0026#34;activitypub\u0026#34; accountUrl=\u0026#34;https://yourinstance.tld/a/youraccount\u0026#34; /\u0026gt; \u0026lt;enclosure url=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; type=\u0026#34;application/x-mpegURL\u0026#34; /\u0026gt; \u0026lt;podcast:alternateEnclosure type=\u0026#34;application/x-mpegURL\u0026#34; lang=\u0026#34;en\u0026#34; title=\u0026#34;HLS\u0026#34; default=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;podcast:source uri=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; /\u0026gt; \u0026lt;/podcast:alternateEnclosure\u0026gt; \u0026lt;itunes:image href=\u0026#34;https://yourinstance.tld/lazy-static/previews/8df24108-6e70-4fc8-b1cc-f2db7fcdd535.jpg\u0026#34; /\u0026gt; \u0026lt;podcast:chat server=\u0026#34;yourinstance.tld\u0026#34; protocol=\u0026#34;xmpp\u0026#34; embedUrl=\u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; /\u0026gt; \u0026lt;/podcast:liveItem\u0026gt; In case the instance has activated the external XMPP clients connection feature:\n\u0026lt;podcast:liveItem status=\u0026#34;live\u0026#34; start=\u0026#34;2023-07-06T18:00:00.000Z\u0026#34;\u0026gt; \u0026lt;title\u0026gt;The video title\u0026lt;/title\u0026gt; \u0026lt;guid isPermaLink=\u0026#34;false\u0026#34;\u0026gt;e32b4890-983b-4ce5-8b46-f2d6bc1d8819_2023-07-06T18:00:00.000Z\u0026lt;/guid\u0026gt; \u0026lt;link\u0026gt;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026lt;/link\u0026gt; \u0026lt;podcast:socialInteract uri=\u0026#34;https://yourinstance.tld/videos/watch/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; protocol=\u0026#34;activitypub\u0026#34; accountUrl=\u0026#34;https://yourinstance.tld/a/youraccount\u0026#34; /\u0026gt; \u0026lt;enclosure url=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; type=\u0026#34;application/x-mpegURL\u0026#34; /\u0026gt; \u0026lt;podcast:alternateEnclosure type=\u0026#34;application/x-mpegURL\u0026#34; lang=\u0026#34;en\u0026#34; title=\u0026#34;HLS\u0026#34; default=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;podcast:source uri=\u0026#34;https://yourinstance.tld/path/to/video/master.m3u8\u0026#34; /\u0026gt; \u0026lt;/podcast:alternateEnclosure\u0026gt; \u0026lt;itunes:image href=\u0026#34;https://yourinstance.tld/lazy-static/previews/8df24108-6e70-4fc8-b1cc-f2db7fcdd535.jpg\u0026#34; /\u0026gt; \u0026lt;podcast:chat server=\u0026#34;yourinstance.tld\u0026#34; protocol=\u0026#34;xmpp\u0026#34; space=\u0026#34;8df24108-6e70-4fc8-b1cc-f2db7fcdd535@room.yourinstance.tld\u0026#34; embedUrl=\u0026#34;https://yourinstance.tld/plugins/livechat/router/webchat/room/8df24108-6e70-4fc8-b1cc-f2db7fcdd535\u0026#34; /\u0026gt; \u0026lt;/podcast:liveItem\u0026gt; Algorithm If you want to display the chat in a web page or in an iframe, here is what you should do:\n get the Podcast RSS feed for the channel, if there is no \u0026lt;podcast:liveItem\u0026gt; element under the \u0026lt;channel\u0026gt;, stop. find the \u0026lt;podcast:liveItem\u0026gt; you are looking for  \u0026lt;podcast:socialInteract\u0026gt; can be used to cross-reference the items with ActivityPub   if there is no \u0026lt;podcast:chat\u0026gt; element under the \u0026lt;podcast:liveItem\u0026gt;, stop. loop through the \u0026lt;podcast:chat\u0026gt; values (if \u0026lt;podcast:chat\u0026gt; is not an array, just iterate on this single value)  there should only be one, but you should expect to handle several just in case   search for the first entry protocol === xmpp and an embedUrl attribute if found, open this embedUrl  If you want to open the chat room using the XMPP protocol:\n get the Podcast RSS feed for the channel, if there is no \u0026lt;podcast:liveItem\u0026gt; element under the \u0026lt;channel\u0026gt;, stop. find the \u0026lt;podcast:liveItem\u0026gt; you are looking for  \u0026lt;podcast:socialInteract\u0026gt; can be used to cross-reference the items with ActivityPub   loop through the \u0026lt;podcast:chat\u0026gt; values (if \u0026lt;podcast:chat\u0026gt; is not an array, just iterate on this single value)  there should only be one, but you should expect to handle several just in case   search for the first entry protocol === xmpp and a space attribute  space should be an XMPP JID for a MUC   if found, open this XMPP JID with your client after converting it to a join URI, or connect to the XMPP room at that address  "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contributing/translate/","title":"Translate","tags":[],"description":"Translate the plugin","content":"You can contribute to this plugin translation. Translations are handled using the Weblate software, using Framasoft Weblate instance.\nNever modify directly files in the languages folder, this could lead to conflicts.\n How to  Create an account: https://weblate.framasoft.org/accounts/register/ Validate your email and follow the link sent Create your password and setup your account Go to the plugin project page: https://weblate.framasoft.org/projects/peertube-livechat/peertube-plugin-livechat/ Choose the locale you want to translate Just translate missing sentences, or correct the ones that seems incorrect to you.  There might be some «very technical» strings. If you are not 100% sure of the meaning, or of your translation, you better not translate it, so it will display in english.\n Adding a new locale If you think there is a missing locale, please check first if it is handled in Peertube. If so, you can open an issue to ask for it.\nAdding new strings / use translations in the code If you are working on new features, and need new strings, you can create them directly in Weblate. The english version is mandatory. Start with it.\nEach string is linked to a key (for example use_chat). Choose an explicit key in english, lower case.\nIf you have to test new strings without waiting for a Weblate merge, you can modify languages/*.yml files, but avoid to commit these changes (to minimize conflict risks).\nUse translations in front-end code Before using a string in front-end, you need to declare a new constant in client/@types/global.d.ts. The constant name must:\n start with the prefix \u0026ldquo;LOC_\u0026rdquo; use the string key, upper cased you just have to declare its type, not its value  For example, to use \u0026ldquo;use_chat\u0026rdquo;, you have to declare:\ndeclare const LOC_USE_CHAT: string The build-client.js script will read the client/@types/global.d.ts, search for such constants, and load their values from the languages files.\nNow, you can simply call peertubeHelpers.translate(LOC_USE_CHAT) in your code.\nUse translations in back-end code In theory, the only parts of the backend code where you need localization is the settings declaration and standardized data (ActivityPub, RSS, \u0026hellip;). Here we need to get english strings from the translation key.\nNote: you should never need another language translation from backend code. Localization must be done on front-end.\nThere is a lib/loc.ts module providing a loc() function. Just pass it the key to have the english string: loc('diagnostic')'.\nDocumentation translation The documentation translation is done using the corresponding Weblate component.\nThere is a specific \u0026ldquo;Hugo shortcodes\u0026rdquo; you can use to display an application string. Saying you want to display the name of the button \u0026ldquo;open_chat_new_window\u0026rdquo;, you can use this in the documentation markdown file:\n{{% livechat_label open_chat_new_window %}} You can also prevent a whole page from being translating by adding livechatnotranslation: true in the Yaml Font Matter section:\n--- title: \u0026#34;Third party\u0026#34; description: \u0026#34;Displaying the livechat with 3rd party software.\u0026#34; weight: 20 chapter: false livechatnotranslation: true --- Never translate a string in the livechat.en.pot file, it would be ignored. Instead, edit directly the markdown files.\nIf a string contains a link, you can change it for the correct link in the translated language. For example, for a link to this documentation, you can add the language code in the url.\nSome strings are block of code. Don\u0026rsquo;t translate code. But you can translate comments, or parameters if relevant.\nIf you are not sure, just don\u0026rsquo;t translate, and ask what to do.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/admin/","title":"Admin documentation","tags":[],"description":"Plugin Peertube Livechat administration","content":"  Settings  Plugin Peertube Livechat settings\n   Advanced usage  Some advanced features\n  XMPP clients  Allow connections using XMPP clients\n   Using Matterbridge  Using Matterbridge to bridge with other chats\n    "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contributing/feedback/","title":"Give your feedback","tags":[],"description":"Give your feedback","content":"You don\u0026rsquo;t need to know how to code to start contributing to this plugin! Other contributions are very valuable too, among which: you can test the software and report bugs, you can give feedback, features that you are interested in, user interface, design, \u0026hellip;\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/admin/advanced/xmpp_clients/","title":"XMPP clients","tags":[],"description":"Allow connections using XMPP clients","content":"This chat module is based on the XMPP protocol, also known as Jabber. It is therefore possible to connect to the chats using XMPP client software. This can for example be useful to facilitate moderation operations.\nFor the user documentation associated with these features, please refer to the user documentation page.\nEnabling these features requires configuration changes on the server, and on the DNS records. It is not possible to configure this only from the Peertube interface, and it requires some basic system some basic system admin skills.\n Login to your Peertube account This feature is not yet available, and will come in a future version of the plugin.\n Connection using an external XMPP account To enable this feature, you will need to set up your server and DNS records, so that XMPP clients can find and access the Prosody server that this plugin uses internally.\nPlugin settings Start by going to the livechat plugin settings of your instance, then enable the setting \u0026ldquo;Enable connection to room using external XMPP accounts\u0026rdquo;. By checking this settings, new settings appear below.\nFirst of all, the \u0026ldquo;Prosody server to server port\u0026rdquo; field. This one defaults to 5269, which is the standard port for this service. You can however change to another port, if this is already in use on your server.\nNext, the field \u0026ldquo;Server to server network interfaces\u0026rdquo; field allows you to specify which network interfaces the server should listen on. The default value \u0026ldquo;*, ::\u0026rdquo; indicates to listen on all IP addresses. You can change these values, if you wish to listen on only certain IP addresses. The syntax is explained next to the setting.\nFor the \u0026ldquo;Certificate folder\u0026rdquo; setting, you can leave it empty. In this case, the plugin will automatically generate self-signed certificates. Some XMPP servers may refuse to connect, depending on their configuration. In this case, you can indicate here a path on the server, in which you must place certificates to be used by the module. It is up to you to generate and renew them. See bellow for more information.\nFirewall You must open the configured port (5269 by default) on your firewall.\nIf you are using Docker for your Peertube, you need to modify the docker-compose.yml file to open port 5269 of the peertube container, so that the outer world can connect to it.\nDNS You need to add a DNS record allowing remote servers to find the \u0026ldquo;room.your_instance.tld\u0026rdquo; component.\nThe easiest way to do this is to add an SRV record for the \u0026ldquo;room\u0026rdquo; subdomain:\n record name: _xmpp-server._tcp.room.your_instance.tld. (replace «your_instance.tld» by your instance uri) TTL: 3600 class: IN SRV: 0 priority: 0 weight: 5 port: 5269 (adapt if your changed the default port) target: your_instance.tld. (replace by your instance uri)  Be careful to keep the dot after \u0026ldquo;your_instance.tld\u0026rdquo;.\nUsing the dig command to check your record, you should get a result similar to this:\n$ dig +short _xmpp-server._tcp.room.videos.john-livingston.fr. SRV 0 5 5269 videos.john-livingston.fr. If you are not using the standard 5269 port, you must also add a SRV record for _xmpp-server._tcp.your_instance.tld. (same as above, just without the room. prefix). Of course, you can also add this record if you use the standard port. It will also work.\nUsing trusted certificates The self-signed certificates that this plugin uses by default can be rejected by some XMPP servers, for security reasons.\nIt is possible to use certificates validated by a certification authority. However, this requires advanced system administration knowledge. Indeed, due to the multitude of possible use cases, it is impossible to document all situations here. This documentation will therefore only explain the goal to be reached, and give an example which will only be suitable for a \u0026ldquo;basic\u0026rdquo; situation (manual installation of Peertube, using letsencrypt). If you are in another situation (Docker installation, certificates signed by another authority, etc\u0026hellip;), you will have to adapt this approach by yourself.\nBasic principle It is up to you to generate valid certificates for domains your_instance.tld and room.your_instance.tld. You can use any method supported by Prosody.\nYou must then place these certificates in a folder that will be accessible to the peertube user, and specify this folder in the plugin setting \u0026ldquo;Certificate folder\u0026rdquo;.\nIf you want to use the ProsodyCtl utility to import certificates, this utility is available (once Peertube is started) using the following command (adapting the path to your Peertube data folder, and replacing \u0026ldquo;xxx\u0026rdquo; with the arguments you wish to pass to prosodyctl): sudo -u peertube /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl xxx\n The plugin will check once a day to see if any files have been modified in this folder, and reload Prosody if necessary.\nMethod for the simple case We assume here that your Peertube installation is \u0026ldquo;classic\u0026rdquo; (no use of Docker), and that the certificates are generated by letsencrypt, using the certbot tool.\nFirst of all, we\u0026rsquo;ll have to create a certificate for the subdomain room.your_instance.tld : this is the uri of the MUC (XMPP chat rooms) component. Even if the connections are made on your_instance.tld, we will need a valid certificate for this subdomain.\nSo start by setting up a DNS entry for room.your_instance.tld, which points to your server. You can use a CNAME entry (or an A entry and a AAAA entry).\nNext, we\u0026rsquo;ll use nginx (already installed for your Peertube) to generate the certbot certificate. We will create a new site. In the file /etc/nginx/site-available/room.peertube, add:\nserver { listen 80; listen [::]:80; server_name room.your_instance.tld; location /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/certbot; } location / { return 301 https://your_instance.tld; } } Then enable the site:\nln -s /etc/nginx/sites-available/room.peertube /etc/nginx/sites-enabled/ systemc reload nginx Then we prepare the folder in which we will later import the certificates. We assume here that you already have the plugin active. We will create the following folder (if it doesn\u0026rsquo;t already exist), with the user peertube to make sure there are no permissions issues:\nsudo -u peertube mkdir /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/certs Now you have to configure this folder in the plugin settings, for the parameter \u0026ldquo;Certificate folders\u0026rdquo;. It\u0026rsquo;s important to do this now, otherwise the certificate import script will put the certificates in the wrong folder.\nWe will configure certbot to import the generated certificates into the Prosody folder. We can use the ProsodyCtl utility packaged in the plugin.\nNote: for it to be available, the plugin must have been started at least once.\nWe will create a file /etc/letsencrypt/renewal-hooks/deploy/prosody.sh containing:\n#!/bin/sh /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun prosodyctl \\  --root \\  --config /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  cert import \\  room.your_instance.tld your_instance.tld /etc/letsencrypt/live Then we ask to generate the certificate:\ncertbot -d room.videos.john-livingston.fr If certbot offers you several methods to generate the certificate, choose \u0026ldquo;nginx\u0026rdquo;.\nNormally you should now find the certificates in the configured folder.\nNote: the first time you do this, you will have to reload Prosody. The easiest way to do this is to restart Peertube.\nMethod for the Docker case This method works with the officially supported Docker guide from PeerTube.\nFirst, ensure you create a DNS entry for room.your_instance.tld, which points to your server. You can use a CNAME entry (or an A entry and a AAAA entry). This is necessary for Let\u0026rsquo;s Encrypt to validate the domain for certificate generation.\nEnter the directory where your docker-compose.yml file exists.\nOpen a shell in the certbot container:\ndocker exec -it certbot /bin/sh Run certbot:\ncertbot You will be presented with a series of prompts. Enter 2 for the authentication type:\nHow would you like to authenticate with the ACME CA? Select the appropriate number [1-2] then [enter] (press \u0026#39;c\u0026#39; to cancel): 2 Enter the domain name room.your_instance.tld:\nPlease enter the domain name(s) you would like on your certificate (comma and/or space separated) (Enter \u0026#39;c\u0026#39; to cancel): room.your_instance.tld Enter the directory where the PeerTube webserver serves requests for Let\u0026rsquo;s Encrypt, /var/www/certbot:\nInput the webroot for \u0026lt;room.your_instance.tld\u0026gt;: (Enter \u0026#39;c\u0026#39; to cancel): /var/www/certbot You should see output like the following:\nSuccessfully received certificate. Certificate is saved at: /etc/letsencrypt/live/room.your_instance.tld/fullchain.pem Key is saved at: /etc/letsencrypt/live/room.your_instance.tld/privkey.pem Run the below command inside the certbot container to give read access to the new certs and private keys to the peertube group. Note: This will also make the files readable to the group with id 999 on the host system. Check the groups on your system to assess this as a risk before running this command.\nchown -R root:999 /etc/letsencrypt/live; \\ chmod 750 /etc/letsencrypt/live; \\ chown -R root:999 /etc/letsencrypt/archive; \\ chmod 750 /etc/letsencrypt/archive; \\ find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} \\; Exit the certbot container:\nexit Modify your docker-compose.yml file, changing the entrypoint line under the certbot service to the following. This is the same as the above, but to be automatically executed after every certificate renewal.\nentrypoint: /bin/sh -c \u0026#34;trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; chown -R root:999 /etc/letsencrypt/live; chmod 750 /etc/letsencrypt/live; chown -R root:999 /etc/letsencrypt/archive; chmod 750 /etc/letsencrypt/archive; find /etc/letsencrypt/ -name \u0026#39;privkey*\u0026#39; -exec chmod 0640 {} +; sleep 12h \u0026amp; wait $${!}; done;\u0026#34; Continuing to modify docker-compose.yml, add the certbot certificate volume into the peertube container. It should look something like this:\nvolumes: - ./docker-volume/certbot/conf:/etc/letsencrypt Restart your services:\ndocker-compose down; docker-comopse up -d In the livechat plugin settings from your PeerTube administration settings, set the certificate directory to the following:\n/etc/letsencrypt/live Save the plugin settings and verify Prosody can see the certificates:\ndocker-compose exec -u peertube \\  peertube \\  /data/plugins/data/peertube-plugin-livechat/prosodyAppImage/squashfs-root/AppRun \\  prosodyctl \\  --config /data/plugins/data/peertube-plugin-livechat/prosody/prosody.cfg.lua \\  check certs Troubleshooting If you can\u0026rsquo;t make it work, you can use the diagnostic tool (there is a button on top of the plugin settings page), and take a close look on the «Prosody check» section.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contributing/develop/","title":"Develop","tags":[],"description":"Develop","content":"Always talk about features you want to develop by creating/finding and commenting the issue tackling your problem before you start working on it, and inform the community that you begin coding by claiming the issue.\nPull Request must be done on the main branch.\nUntil march 2023, contribution were made on the develop branch. This procedure is now deprecated.\n Prerequisite for building this plugin It is highly recommended to be familiar with following concepts:\n Git NodeJS NPM Typescript  To build the plugin, you must have following packages:\n git npm (\u0026gt;=8.x) nodejs (\u0026gt;=14.x) build-essential  The plugin needs to build an AppImage for the Prosody XMPP server. It appears that the way this AppImage is build requires apt and dpkg commands. So it will only work \u0026ldquo;out of the box\u0026rdquo; on Debian-like systems. If you are using another Linux distribution, you can try to install apt and dpkg manually. See for example this Github issue. We will provide another solution as soon as possible.\nBuilding this AppImage also requires following packages:\n python3-venv squashfs-tools  These dependencies were tested on a Debian Bullseye. If there is some dependencies issues on your UNIX/Linux system, please open an issue on Github.\n Develop Clone the repository, buid the plugin, and create your feature branch:\n# Clone the repository. Dont forget the --recursive to clone submodules. git clone https://github.com/JohnXLivingston/peertube-plugin-livechat.git --recursive # Install NPM dependencies and build the module for the first time: npm install # Build the plugin after a modification: npm run build # If you have a fork from the repository, add it as remote (example): git remote add me git@github.com:MY_GITHUB_ACCOUNT/peertube-plugin-livechat.git # Create a local branch for you developments, and checkout it (example): git checkout my_development # Note: if an issue is associated, use fix_1234 as your branch name (where 1234 is the issue\u0026#39;s number) # To propose your modifications, push your branch to your repository (example): git push --set-upstream me my_development # Then go to your github repository with your web browser to propose the Pull Request (see additional instructions below) Once you are ready to show your code to ask for feedback, submit a draft Pull Request. Once you are ready for a code review before merge, submit a Pull Request. In any case, please link your PR to the issues it solves by using the GitHub syntax: \u0026ldquo;fixes #issue_number\u0026rdquo;.\nThe front-end code is in the client folder, the back-end code in server. There are some shared code in shared folder.\nFor general instructions (developping plugins, building, installation, \u0026hellip;), please refer to the Peertube documentation.\nYou can build the plugin with extra debug features simply by using:\nNODE_ENV=dev npm run build ESBuild vs Typescript This plugin uses ESBuild for frontend code generation, as the official peertube-plugin-quickstart plugin. ESBuild can handle Typescript, but does not check types (see ESBuild documentation). That\u0026rsquo;s why we first compile Typescript with the -noEmit option, just to check types (check:client:ts in package.json file). Then, if everything is okay, we run ESBuild to generate the compiled javascript.\nDebug Mode There is a debug mode for this plugin, that shorten some delay. For example, some log files will rotate every two minutes, instead of once per day. This permit to test more easily certain actions, for which it could normally take hours or days to wait.\nTo enable this mode, you juste have to create the /var/www/peertube/storage/plugins/data/peertube-plugin-livechat/debug_mode file (replacing /var/www/peertube/storage/ by the correct path on your installation).\nThe simple existence of this file is sufficient to trigger the debug mode. To make sure it\u0026rsquo;s taken into account, you can restart your Peertube instance.\nThis file can contain some JSON to enable more advanced options. To have a list of existing parameters, check server/lib/debug.ts. Restart Peertube after each content modification.\nDon\u0026rsquo;t enable this mode on a production server, neither on a public server. This could cause security issues.\n Restart Prosody When debug mode is enabled, you can restart Prosody using this API call: http://your_instance.tld/plugins/livechat/router/api/restart_prosody. This call don\u0026rsquo;t need any authentificaiton. It can be done from a command line, for example using curl http://your_instance.tld/plugins/livechat/router/api/restart_prosody.\nProsody debugger It is possible to connect the Prosody AppImage to a remote debugger using MobDebug.\nTo do so, you have to setup MobDebug in a folder that can be accessed by the peertube user. Then, add this in the debub_mode file:\n{ \u0026#34;debug_prosody\u0026#34;: { \u0026#34;debugger_path\u0026#34;: \u0026#34;/the_path_to_mobdebug/src\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;localhost\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;8172\u0026#34; } } host and port are optional. debugger_path must point to the folder where the MobDebug .lua file is.\nRestart Peertube.\nStart your debugger server.\nFor Prosody to connect to the debugger, call the API http://your_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. This call does not need any authentication. It can be done from a command line, for example with curl http://your_instance.tld/plugins/livechat/router/api/restart_prosody?debugger=true. You can even configure your debug server to launch this request automatically.\nProsody will then restart, connecting to the debugger.\nQuick dev environment using Docker There is a tutorial, in french, on the Peertube forum that explains how to quickly build a dev env using Docker.\nA repo was made out of it, check out pt-plugin-dev.\nNote: for an unknown reason, Prosody can\u0026rsquo;t resolve containers DNS address when using the lua-unbound library. There is a dirty hack in the plugin: just create a /data/plugins/data/peertube-plugin-livechat/no_lua_unbound file in your docker-volumes, then restart containers.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/user/","title":"User documentation","tags":[],"description":"Plugin peertube-plugin-livechat user documentation","content":"  Moderation  Plugin peertube-plugin-livechat moderation\n   OBS  Documentation to stream the chat content using OBS.\n   XMPP Clients  Connect to chat using a XMPP client\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/user/xmpp_clients/","title":"XMPP Clients","tags":[],"description":"Connect to chat using a XMPP client","content":"This chat plugin relies on the XMPP protocol (also known as Jabber). It is therefore possible to connect to the chats using XMPP client software. This can be useful for example to facilitate moderation operations.\nThe features described on this page must be enabled and configured by your Peertube instance\u0026rsquo;s administrators. You may therefore not have access to them.\n Login to your Peertube account This feature is not yet available, and will come in a future version of the plugin.\n Connection using an external XMPP account If this feature is enabled on your instance, you can connect to Peertube chats using any XMPP account.\nTo get the address of the room you want to join, you can use the \u0026ldquo;share chat\u0026rdquo; button that is located above the chat:\nBy default, the share button is only visible to the owner of the video, and the admins/moderators of the instance. However, admins can decide to display this button for everyone.\n Then, choose \u0026ldquo;Connect using XMPP\u0026rdquo;:\nThen you just have to click on \u0026ldquo;open\u0026rdquo; or copy/paste the address of the chat room into your XMPP client (using the \u0026ldquo;join a room\u0026rdquo; feature).\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contributing/document/","title":"Documentation","tags":[],"description":"Document the plugin, or translate the documentation.","content":"General information Always inform the community before working (by creating a new issue, or commenting an existing one). This is to avoid that two persons are working on the same thing, and prevent conflicts.\nDocumentation work has to be merged in the main branch.\nThe documentation source code is in the support/documentation/content folder.\nThe documentation is generated using Hugo. You have to install it on your computer if you want to preview your work.\nThe used theme is hugo-theme-learn. You should read its documentation before starting editing the documentation.\nWhen a new plugin version is released, or when documentation is updated, plugin maintainers will merge the main branch to the documentation branch. This will trigger github and gitlab pipelines, and update published documentation.\nTranslations The principal language is english (en code).\nThe support/documentation/content/en folder contains only english documentation files.\nDocumentation is translated using Weblate (see the translation documentation). To do so, we use the po4a tool, as we will se later in this page.\nAdd a new language In the support/documentation/config.toml file, please copy and modify the [Languages.fr] section.\nIf the translations are not complete, it does not matter, english will be used for missing strings.\nPreview To preview your modifications, just run:\nhugo serve -s support/documentation/ Then open your browser on the address http://localhost:1313/peertube-plugin-livechat/. This page will automatically refresh on each modification.\nUpdate localization files and generate documentation translations For now, you only have the english version. To update documentation strings, and generate translations, you have to run the doc-translate.sh script.\nTo do so, make sure you have po4a (version \u0026gt;= 0.69) installed on your computer.\nSome linux distro (like Debian Bullseye for example) have too old version of po4a. Please make sure to install a compatible version. If you are using Debian Bullseye for example, you can download the Bookworm po4a.deb file from https://packages.debian.org, and install it manually.\n To handle translations, just do:\nnpm run doc:translate You can then preview the result using hugo serve -s support/documentation/, and using the language selector.\nWrite documentation Just edit the english files in support/documentation/content/en.\nThen, before commiting, always run npm run doc:translate, so that changes in english files can be propagated to the support/documentation/po/livechat.en.pot file.\nYou can use the livechat_label short code to use application strings. See here: Documentation translation.\nIt is possible to prevent a file from beeing translating, using livechatnotranslation: true in the Yaml Font Matter section. See here: Documentation translation.\nPlease use the livechatnotranslation option for technical documentation. We don\u0026rsquo;t want technical documentation to be translated, to avoid issues because of a wrong translation.\nTo facilitate translators work, avoid making too long paragraphs.\nFor now, it is not possible to use Markdown tables: the translation tools will break them.\nWhat if I can\u0026rsquo;t use hugo and/or po4a? Just edit english markdown files, and specify that you can\u0026rsquo;t build translations when you make your Pull Request.\nPublication Publishing the documentation is automatic, as soon as the changes are merged into the documentation branch.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/installation/upgrade_before_6.0.0/","title":"Upgrade from version older than 6.0.0","tags":[],"description":"Important notes when upgrading for an older version.","content":"IMPORTANT NOTE Since version v6.0.0, this plugin does not need any Prosody installation.\nIf you were using this plugin before this version, and if you had installed Prosody manually, you can safely uninstall Prosody.\nIf you were using the custom Peertube docker image that is embedding Prosody, you can switch back to the official Peertube image.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/documentation/admin/advanced/matterbridge/","title":"Using Matterbridge","tags":[],"description":"Using Matterbridge to bridge with other chats","content":"Here is a tutorial to use Matterbridge with the plugin: https://gitlab.com/refrac/obs-matterbridge-overlay/-/blob/master/documentation/peertube.md\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contributing/","title":"Contributing","tags":[],"description":"Contributing","content":"Interested in contributing? Awesome!\n Code of Conduct  Contributor Covenant Code of Conduct\n   Translate  Translate the plugin\n   Give your feedback  Give your feedback\n   Develop  Develop\n   Documentation  Document the plugin, or translate the documentation.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/issues/","title":"Bug tracking &amp; new features","tags":[],"description":"Bug tracking / New features requests","content":"If you have new feature requests, bugs, or difficulties to setup the plugin, you can use the Github issue tracker. If possible, try using english or french.\nTo have a glimpse to the roadmap for upcoming features, please refer to:\n this github project. the milestones on github.  If you are a webdesigner or a ConverseJS/Prosody/XMPP expert, and want to help improve this plugin, you are welcome.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/technical/","title":"Technical documentation","tags":[],"description":"Technical documentation","content":"  Third party  Displaying the livechat with 3rd party software.\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/contact/","title":"Contact me","tags":[],"description":"Contact the author","content":"If you have any question, or if you want to talk about this plugin, you can join this XMPP room with any Jabber client: plugin-livechat-support@room.im.yiny.org.\nIf you want to support the project financially, you can contact me by mail at git.[at].john-livingston.fr, or check my Liberapay profile.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/credits/","title":"Credits","tags":[],"description":"Plugin Credits","content":"package.json, COPYRIGHT and LICENSE files contain the license information for this software and its dependencies.\nThe plugin is maintained by John Livingston.\nThanks to David Revoy for his work on Peertube\u0026rsquo;s mascot, Sepia. The character design is under CC-By licence, and the SVG files used to create some logo and avatars in this plugin are GPLv3.0.\nThanks to Framasoft for making Peertube possible, for the financial support, and for hosting the project translations on their Weblate instance.\nThanks to ritimo for the financial support.\nThanks to Code Lutin and Rétribution Copie Publique for the financial support.\nThanks to NlNet and the NGI0 Entrust fund for the financial support.\n"},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/","title":"","tags":[],"description":"","content":"PeerTube plugin livechat You can use the language selector in the left menu to view this documentation in different languages. Some translations are missing or incomplete. In this case, you\u0026rsquo;ll see the English version of the text.\n Before updating to a major release, please read the release notes and breaking changes list : CHANGELOG.\n  Introduction  Introduction\n   Documentation  Plugin documentation\n  Installation guide  Plugin peertube-plugin-livechat installation guide\n  Known issues: CPU Compatibility  For now, the plugin only works out of the box for x86_64 and arm64 CPU architecture. Here are some instructions for other CPU architectures.\n Upgrade from version older than 6.0.0  Important notes when upgrading for an older version.\n  Admin documentation  Plugin Peertube Livechat administration\n  Settings  Plugin Peertube Livechat settings\n Advanced usage  Some advanced features\n  User documentation  Plugin peertube-plugin-livechat user documentation\n  Moderation  Plugin peertube-plugin-livechat moderation\n OBS  Documentation to stream the chat content using OBS.\n XMPP Clients  Connect to chat using a XMPP client\n   Contributing  Contributing\n  Code of Conduct  Contributor Covenant Code of Conduct\n   Translate  Translate the plugin\n   Give your feedback  Give your feedback\n   Develop  Develop\n   Documentation  Document the plugin, or translate the documentation.\n    Bug tracking \u0026amp; new features  Bug tracking / New features requests\n   Technical documentation  Technical documentation\n  Third party  Displaying the livechat with 3rd party software.\n    Contact me  Contact the author\n   Credits  Plugin Credits\n   "},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://johnxlivingston.github.io/peertube-plugin-livechat/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]